{"version":3,"sources":["protobuffer/compiled.js","components/service/service.js","components/spinner/index.js","components/spinner/spinner.js","components/service/local-storage-service.js","components/create-connection/create-connection.js","components/create-connection/index.js","components/left-panel/index.js","components/left-panel/left-panel.js","components/toast/toast.js","components/toast/index.js","components/user-type/user-type.js","components/user-function/user-function.js","components/aggregate-function/index.js","components/aggregate-function/aggregate-function.js","components/materialized-view/index.js","components/materialized-view/materialized-view.js","components/cql-editor/index.js","components/cql-editor/cql-editor.js","components/utils/utils.js","components/table/table.js","components/table/index.js","components/right-panel/right-panel.js","components/right-panel/index.js","components/header-buttons/index.js","components/header-buttons/header-buttons.js","components/connection/connection.js","components/connection/index.js","components/context-menu/index.js","components/context-menu/context-menu.js","components/keyspace/keyspace.js","components/keyspace/index.js","components/user-type/index.js","components/user-function/index.js","components/role/role.js","components/role/index.js","components/confirmation-modal/confirmation-modal.js","components/confirmation-modal/index.js","components/app/app.js","components/app/index.js","index.js","protobuffer/error.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","KeySpaces","properties","this","keyspaces","roles","keys","Object","i","length","prototype","emptyArray","create","encode","message","writer","KeySpace","uint32","fork","ldelim","Role","encodeDelimited","decode","reader","end","undefined","len","pos","tag","push","skipType","decodeDelimited","verify","hasOwnProperty","Array","isArray","error","fromObject","object","TypeError","toObject","options","arrays","defaults","j","toJSON","constructor","toJSONOptions","replication","tables","userTypes","userFunctions","aggregateFunctions","views","name","durableWrites","emptyObject","connectionAlias","call","string","bool","Table","UserType","UserFunction","AggregateFunction","MateriliazedView","key","skip","isString","isObject","String","Boolean","keys2","objects","columns","partitionKey","clusteringKey","indices","describe","keyspace","Column","Index","className","isIndexOnKeys","isIndexOnValues","column","type","isPartitionKey","isClusteringKey","isStatic","fields","Field","orReplace","ifNotExist","returnType","calledOnNullInput","language","signature","body","connection","sFunc","sType","finalFunc","initCond","primaryKeyNames","baseTable","select","includesAllColumns","whereClause","nameKeySpace","Roles","memberOf","saltedHash","Rows","rows","module","exports","Service","_spark","exit","a","fetch","ok","window","close","url","init","response","Error","status","arrayBuffer","host","port","user","pass","URL","params","forEach","searchParams","append","text","connection_alias","s","JSON","stringify","o","initialized","getResource","buffer","json","initialize","Spinner","Storage","get","item","Lockr","map","parse","filter","e","isExists","find","ob","pushToStorage","arrayConnection","set","save","saveAll","connections","edit","focus","newObject","newArray","obj","clear","localStorage","getItem","$","CreateConnection","fetchService","storage","LocalStorageService","state","connect","loading","authUser","authPass","checkerAuth","setProperties","alias","h","p","u","check","setState","sendTest","testConnection","then","data","clearFields","props","saveConnection","id","modal","onChange","target","value","condition","checked","document","querySelectorAll","disabled","prevProps","spiner","data-backdrop","data-keyboard","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","onClick","scope","min","max","style","alignContent","display","flexDirection","paddingLeft","marginTop","marginLeft","Component","LeftPanel","Toast","dataToast","result","toastBehavior","toast","animation","delay","on","removeToast","aria-live","aria-atomic","position","top","right","dataForModal","indexFocusElement","nameType","changed","action","process","setFocus","element","closest","querySelector","copyFields","_","el","index","findIndex","innerHTML","copyChanged","newArrayFields","findNewField","add","findOrigin","changeOriginal","makeFields","elements","backgroundColor","applyType","saveContent","path","addType","excludes","title","field","excludesNames","editType","deleteType","newFields","slice","splice","split","icon","faCheck","faPlusCircle","faEdit","hidden","faMinusCircle","SupportModalWindow","warn","includes","setWarn","newState","saveField","newField","getSelectList","types","toLowerCase","selected","color","isdisAbledInput","isDisableOkButton","float","validateAndMakeFunction","match","replace","matchAll","from","trim","indexOf","finish","UF","editorState","EditorState","createWithContent","ContentState","createFromText","viewFunction","showButtopApply","setEditor","editor","focusEditor","getCurrentContent","getPlainText","styles","root","customStyleMap","ref","useState","setEditorState","showButtonApply","setShowButtonApply","useEffect","userFunction","AGF","console","log","MaterializedView","setShowButtopApply","nameView","option","MV","envelope","CqlEditor","service","content","setRows","setResult","columnCount","setColumnCount","_cache","useRef","CellMeasurerCache","defaultWidth","fixedHeight","_cellRenderer","columnIndex","parent","rowIndex","cache","current","height","whiteSpace","disableHeight","width","columnWidth","deferredMeasurementCache","overscanColumnCount","overscanRowCount","cellRenderer","rowCount","rowHeight","minSize","data-placement","query","executeQuery","ArrayBuffer","uint8View","Uint8Array","ar","catch","faChevronCircleRight","placeholder","guidGenerator","S4","Math","random","toString","substring","Properties","opt","setName","onChangeOption","Indices","elem","Columns","ColumnsModal","saveData","setNameColumn","setTitle","setType","setStatic","setPartition","setClustering","setExcludeNames","setAction","setProcess","closeModal","setWarning","IndicesModal","columnName","setColumnName","selectedColumn","setSelectedColumn","nameIndex","setNameIndex","setClassName","setIndexOnKeys","setIndexOnValues","setExcudes","columnsName","Buttons","optionDisabled","runModal","buttons","setButtons","elemens","apply","delete","faTrashAlt","focusTab","setFocusTab","setId","setIndexFocusElement","indexFocusIndex","setIndexFocusIndex","nameTable","setNameTable","setColumns","setIndices","setData","changedOptions","setChangedOptions","indexsForChanged","setIndexsForChanged","changedColumns","setchangedColumns","table","tab","setActiveTab","copyColumns","copyIndices","newArrayColumns","cloneChangedColumns","number","nameOrigin","rename","findExistsIndex","to","newArrayIndices","cloneIndexsForChanged","addColumn","addIndex","editColumn","deleteColumn","cloneColumns","deleteIndex","newColumns","cloneIndices","newIndices","indexAdd","indexDelete","TableProtobuf","padding","fontSize","fontFamily","data-toggle","href","aria-controls","aria-selected","marginRight","nameOption","cloneProperties","changedValue","originValue","cloneChangedOptions","lastTime","RightPanel","closeTabPanel","tabs","setTabs","tabsContent","setTabsContent","render","setRender","returnTabs","supportFunc","returnTabsContent","performance","now","show","HeaderButtons","typeFocus","connected","currentConnection","disconnect","createUserType","createUserFunction","createAggregateFunction","createMaterializedView","createCqlEditor","createTableHandler","data-target","faPlug","faLink","faUnlink","faPlusSquare","faSignOutAlt","wrapBranch","times","initial","level","rotation","wraped","faSpinner","pulse","KS","dataks","ks","id_tree_item","id_presentation","Users","User","Tables","UserFunctions","AggregateFunctions","UserTypes","TypeFields","MaterializedViews","Connection","users","ContextMenu","styleCustom","setStyleCustom","measuredRef","useCallback","node","windowHeight","innerHeight","heightContext","getBoundingClientRect","styleCust","left","aria-haspopup","aria-expanded","faDatabase","Keyspace","nameKS","strategy","repl_factor","durable_writes","dcElements","newItem","oldItem","start","newElements","handleActionButton","copy","dc","makeElements","classList","toggle","createKS","Map","fromEntries","entries","objectForEdit","class","replication_factor","prop","htmlFor","exclud","roleForEdit","nameRole","setNameRole","password","setPassword","confirm_password","setConfirmPassword","setExcludes","warnPassword","setWarningPassword","isSuperUser","setSuperUser","isCanLogin","setCanLogin","setConnection","responseQuery","setResponse","errorResult","setErrorResult","has","createRole","R","typeAction","editRole","chooseHandleFunction","TextDecoder","setTimeout","textDecoder","ConfirmationModal","textToConfirm","killerFunction","faQuestion","hideModalAndExecuteKillerFunction","App","rightPanelContent","focusId","currentKeyspace","showcontext","stylecontext","dataContext","getListConnections","items","makeConnectionWithChangedProps","mapConnections","addAdditionalProperties","makeContextData","typeContext","pushToRightPanel","createMateralizedView","editTableHandler","showUserFunction","findById","showFunction","returnsType","calledOrReturns","showAggregateFunction","showMaterializedView","objectForSeek","values","k","editUserType","newVar","executeContextMenuAction","targetTable","dataForSeek","fill","dropUDTType","typeForDelete","copyRightPanel","contentConnection","deletingItem","dropUserType","makeDataForToast","getConnectionProperies","getTypes","decoded","disconnectState","dropRole","nameRoleWithConnection","getRoles","login","dropUserFunction","funcForDelete","targetFunction","getUserFunctions","dropAggregateFunction","getAggregateFunctions","dropMaterializedView","viewForDelete","targetView","dropMView","getMViews","dropTable","getTables","currentFocus","innerText","closestItem","contains","setDown","tryConnect","preventDefault","x","y","resetFocus","focusSet","addConnection","cs","deleteConnection","newConnections","stringConnections","currentClassName","size","getKeySpaces","ee","getKeyspace","keyspaceName","getKeySpace","editedObject","disConnect","closeElement","showCurrentModalWindow","rolesExclude","namesKS","dropKeyspace","dropKeySpaces","currenKeyspace","createKeySpaces","focusObject","editKeySpaces","makeContent","connectionName","nameKs","fieldName","wrap","fieldIndexFromServer","editedTypeFromServer","fieldIndexFromUi","nameFunc","createMV","createTable","editTable","copyContent","allNull","val","getKeyByValue","addEventListener","getElementById","closestConnection","closestKeyspace","nameConnection","newmap","valueMap","context","listConnections","ReactDOM"],"mappings":"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","file":"static/js/main.9706f31e.chunk.js","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.KeySpaces = (function() {\n\n    /**\n     * Properties of a KeySpaces.\n     * @exports IKeySpaces\n     * @interface IKeySpaces\n     * @property {Array.<IKeySpace>|null} [keyspaces] KeySpaces keyspaces\n     * @property {Array.<IRole>|null} [role] KeySpaces role\n     */\n\n    /**\n     * Constructs a new KeySpaces.\n     * @exports KeySpaces\n     * @classdesc Represents a KeySpaces.\n     * @implements IKeySpaces\n     * @constructor\n     * @param {IKeySpaces=} [properties] Properties to set\n     */\n    function KeySpaces(properties) {\n        this.keyspaces = [];\n        this.roles = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * KeySpaces keyspaces.\n     * @member {Array.<IKeySpace>} keyspaces\n     * @memberof KeySpaces\n     * @instance\n     */\n    KeySpaces.prototype.keyspaces = $util.emptyArray;\n\n    /**\n     * KeySpaces role.\n     * @member {Array.<IRole>} role\n     * @memberof KeySpaces\n     * @instance\n     */\n    KeySpaces.prototype.roles = $util.emptyArray;\n\n    /**\n     * Creates a new KeySpaces instance using the specified properties.\n     * @function create\n     * @memberof KeySpaces\n     * @static\n     * @param {IKeySpaces=} [properties] Properties to set\n     * @returns {KeySpaces} KeySpaces instance\n     */\n    KeySpaces.create = function create(properties) {\n        return new KeySpaces(properties);\n    };\n\n    /**\n     * Encodes the specified KeySpaces message. Does not implicitly {@link KeySpaces.verify|verify} messages.\n     * @function encode\n     * @memberof KeySpaces\n     * @static\n     * @param {IKeySpaces} message KeySpaces message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeySpaces.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.keyspaces != null && message.keyspaces.length)\n            for (var i = 0; i < message.keyspaces.length; ++i)\n                $root.KeySpace.encode(message.keyspaces[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.roles != null && message.roles.length)\n            for (var i = 0; i < message.roles.length; ++i)\n                $root.Role.encode(message.roles[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified KeySpaces message, length delimited. Does not implicitly {@link KeySpaces.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof KeySpaces\n     * @static\n     * @param {IKeySpaces} message KeySpaces message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeySpaces.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a KeySpaces message from the specified reader or buffer.\n     * @function decode\n     * @memberof KeySpaces\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {KeySpaces} KeySpaces\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeySpaces.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KeySpaces();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.keyspaces && message.keyspaces.length))\n                    message.keyspaces = [];\n                message.keyspaces.push($root.KeySpace.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.roles && message.roles.length))\n                    message.roles = [];\n                message.roles.push($root.Role.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a KeySpaces message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof KeySpaces\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {KeySpaces} KeySpaces\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeySpaces.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a KeySpaces message.\n     * @function verify\n     * @memberof KeySpaces\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    KeySpaces.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.keyspaces != null && message.hasOwnProperty(\"keyspaces\")) {\n            if (!Array.isArray(message.keyspaces))\n                return \"keyspaces: array expected\";\n            for (var i = 0; i < message.keyspaces.length; ++i) {\n                var error = $root.KeySpace.verify(message.keyspaces[i]);\n                if (error)\n                    return \"keyspaces.\" + error;\n            }\n        }\n        if (message.roles != null && message.hasOwnProperty(\"roles\")) {\n            if (!Array.isArray(message.roles))\n                return \"role: array expected\";\n            for (var i = 0; i < message.roles.length; ++i) {\n                var error = $root.Role.verify(message.roles[i]);\n                if (error)\n                    return \"role.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a KeySpaces message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof KeySpaces\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {KeySpaces} KeySpaces\n     */\n    KeySpaces.fromObject = function fromObject(object) {\n        if (object instanceof $root.KeySpaces)\n            return object;\n        var message = new $root.KeySpaces();\n        if (object.keyspaces) {\n            if (!Array.isArray(object.keyspaces))\n                throw TypeError(\".KeySpaces.keyspaces: array expected\");\n            message.keyspaces = [];\n            for (var i = 0; i < object.keyspaces.length; ++i) {\n                if (typeof object.keyspaces[i] !== \"object\")\n                    throw TypeError(\".KeySpaces.keyspaces: object expected\");\n                message.keyspaces[i] = $root.KeySpace.fromObject(object.keyspaces[i]);\n            }\n        }\n        if (object.roles) {\n            if (!Array.isArray(object.roles))\n                throw TypeError(\".KeySpaces.role: array expected\");\n            message.roles = [];\n            for (var i = 0; i < object.roles.length; ++i) {\n                if (typeof object.roles[i] !== \"object\")\n                    throw TypeError(\".KeySpaces.role: object expected\");\n                message.roles[i] = $root.Role.fromObject(object.roles[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a KeySpaces message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof KeySpaces\n     * @static\n     * @param {KeySpaces} message KeySpaces\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    KeySpaces.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.keyspaces = [];\n            object.roles = [];\n        }\n        if (message.keyspaces && message.keyspaces.length) {\n            object.keyspaces = [];\n            for (var j = 0; j < message.keyspaces.length; ++j)\n                object.keyspaces[j] = $root.KeySpace.toObject(message.keyspaces[j], options);\n        }\n        if (message.roles && message.roles.length) {\n            object.roles = [];\n            for (var j = 0; j < message.roles.length; ++j)\n                object.roles[j] = $root.Role.toObject(message.roles[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this KeySpaces to JSON.\n     * @function toJSON\n     * @memberof KeySpaces\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    KeySpaces.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return KeySpaces;\n})();\n\n$root.KeySpace = (function() {\n\n    /**\n     * Properties of a KeySpace.\n     * @exports IKeySpace\n     * @interface IKeySpace\n     * @property {string|null} [name] KeySpace name\n     * @property {boolean|null} [durableWrites] KeySpace durableWrites\n     * @property {Object.<string,string>|null} [replication] KeySpace replication\n     * @property {Array.<ITable>|null} [table] KeySpace table\n     * @property {Array.<IUserType>|null} [userTypes] KeySpace userTypes\n     * @property {Array.<IUserFunction>|null} [userFunctions] KeySpace userFunctions\n     * @property {Array.<IAggregateFunction>|null} [aggregateFunctions] KeySpace aggregateFunctions\n     * @property {Array.<IMateriliazedView>|null} [views] KeySpace views\n     * @property {string|null} [connectionAlias] KeySpace connectionAlias\n     */\n\n    /**\n     * Constructs a new KeySpace.\n     * @exports KeySpace\n     * @classdesc Represents a KeySpace.\n     * @implements IKeySpace\n     * @constructor\n     * @param {IKeySpace=} [properties] Properties to set\n     */\n    function KeySpace(properties) {\n        this.replication = {};\n        this.tables = [];\n        this.userTypes = [];\n        this.userFunctions = [];\n        this.aggregateFunctions = [];\n        this.views = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * KeySpace name.\n     * @member {string} name\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.name = \"\";\n\n    /**\n     * KeySpace durableWrites.\n     * @member {boolean} durableWrites\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.durableWrites = false;\n\n    /**\n     * KeySpace replication.\n     * @member {Object.<string,string>} replication\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.replication = $util.emptyObject;\n\n    /**\n     * KeySpace table.\n     * @member {Array.<ITable>} table\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.tables = $util.emptyArray;\n\n    /**\n     * KeySpace userTypes.\n     * @member {Array.<IUserType>} userTypes\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.userTypes = $util.emptyArray;\n\n    /**\n     * KeySpace userFunctions.\n     * @member {Array.<IUserFunction>} userFunctions\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.userFunctions = $util.emptyArray;\n\n    /**\n     * KeySpace aggregateFunctions.\n     * @member {Array.<IAggregateFunction>} aggregateFunctions\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.aggregateFunctions = $util.emptyArray;\n\n    /**\n     * KeySpace views.\n     * @member {Array.<IMateriliazedView>} views\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.views = $util.emptyArray;\n\n    /**\n     * KeySpace connectionAlias.\n     * @member {string} connectionAlias\n     * @memberof KeySpace\n     * @instance\n     */\n    KeySpace.prototype.connectionAlias = \"\";\n\n    /**\n     * Creates a new KeySpace instance using the specified properties.\n     * @function create\n     * @memberof KeySpace\n     * @static\n     * @param {IKeySpace=} [properties] Properties to set\n     * @returns {KeySpace} KeySpace instance\n     */\n    KeySpace.create = function create(properties) {\n        return new KeySpace(properties);\n    };\n\n    /**\n     * Encodes the specified KeySpace message. Does not implicitly {@link KeySpace.verify|verify} messages.\n     * @function encode\n     * @memberof KeySpace\n     * @static\n     * @param {IKeySpace} message KeySpace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeySpace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.durableWrites != null && Object.hasOwnProperty.call(message, \"durableWrites\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.durableWrites);\n        if (message.replication != null && Object.hasOwnProperty.call(message, \"replication\"))\n            for (var keys = Object.keys(message.replication), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.replication[keys[i]]).ldelim();\n        if (message.tables != null && message.tables.length)\n            for (var i = 0; i < message.tables.length; ++i)\n                $root.Table.encode(message.tables[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.userTypes != null && message.userTypes.length)\n            for (var i = 0; i < message.userTypes.length; ++i)\n                $root.UserType.encode(message.userTypes[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.userFunctions != null && message.userFunctions.length)\n            for (var i = 0; i < message.userFunctions.length; ++i)\n                $root.UserFunction.encode(message.userFunctions[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.aggregateFunctions != null && message.aggregateFunctions.length)\n            for (var i = 0; i < message.aggregateFunctions.length; ++i)\n                $root.AggregateFunction.encode(message.aggregateFunctions[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.views != null && message.views.length)\n            for (var i = 0; i < message.views.length; ++i)\n                $root.MateriliazedView.encode(message.views[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.connectionAlias != null && Object.hasOwnProperty.call(message, \"connectionAlias\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.connectionAlias);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified KeySpace message, length delimited. Does not implicitly {@link KeySpace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof KeySpace\n     * @static\n     * @param {IKeySpace} message KeySpace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeySpace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a KeySpace message from the specified reader or buffer.\n     * @function decode\n     * @memberof KeySpace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {KeySpace} KeySpace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeySpace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KeySpace(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.durableWrites = reader.bool();\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.replication === $util.emptyObject)\n                    message.replication = {};\n                key = reader.string();\n                reader.pos++;\n                message.replication[key] = reader.string();\n                break;\n            case 4:\n                if (!(message.tables && message.tables.length))\n                    message.tables = [];\n                message.tables.push($root.Table.decode(reader, reader.uint32()));\n                break;\n            case 5:\n                if (!(message.userTypes && message.userTypes.length))\n                    message.userTypes = [];\n                message.userTypes.push($root.UserType.decode(reader, reader.uint32()));\n                break;\n            case 6:\n                if (!(message.userFunctions && message.userFunctions.length))\n                    message.userFunctions = [];\n                message.userFunctions.push($root.UserFunction.decode(reader, reader.uint32()));\n                break;\n            case 7:\n                if (!(message.aggregateFunctions && message.aggregateFunctions.length))\n                    message.aggregateFunctions = [];\n                message.aggregateFunctions.push($root.AggregateFunction.decode(reader, reader.uint32()));\n                break;\n            case 8:\n                if (!(message.views && message.views.length))\n                    message.views = [];\n                message.views.push($root.MateriliazedView.decode(reader, reader.uint32()));\n                break;\n            case 9:\n                message.connectionAlias = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a KeySpace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof KeySpace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {KeySpace} KeySpace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeySpace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a KeySpace message.\n     * @function verify\n     * @memberof KeySpace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    KeySpace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.durableWrites != null && message.hasOwnProperty(\"durableWrites\"))\n            if (typeof message.durableWrites !== \"boolean\")\n                return \"durableWrites: boolean expected\";\n        if (message.replication != null && message.hasOwnProperty(\"replication\")) {\n            if (!$util.isObject(message.replication))\n                return \"replication: object expected\";\n            var key = Object.keys(message.replication);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isString(message.replication[key[i]]))\n                    return \"replication: string{k:string} expected\";\n        }\n        if (message.tables != null && message.hasOwnProperty(\"tables\")) {\n            if (!Array.isArray(message.tables))\n                return \"table: array expected\";\n            for (var i = 0; i < message.tables.length; ++i) {\n                var error = $root.Table.verify(message.tables[i]);\n                if (error)\n                    return \"table.\" + error;\n            }\n        }\n        if (message.userTypes != null && message.hasOwnProperty(\"userTypes\")) {\n            if (!Array.isArray(message.userTypes))\n                return \"userTypes: array expected\";\n            for (var i = 0; i < message.userTypes.length; ++i) {\n                var error = $root.UserType.verify(message.userTypes[i]);\n                if (error)\n                    return \"userTypes.\" + error;\n            }\n        }\n        if (message.userFunctions != null && message.hasOwnProperty(\"userFunctions\")) {\n            if (!Array.isArray(message.userFunctions))\n                return \"userFunctions: array expected\";\n            for (var i = 0; i < message.userFunctions.length; ++i) {\n                var error = $root.UserFunction.verify(message.userFunctions[i]);\n                if (error)\n                    return \"userFunctions.\" + error;\n            }\n        }\n        if (message.aggregateFunctions != null && message.hasOwnProperty(\"aggregateFunctions\")) {\n            if (!Array.isArray(message.aggregateFunctions))\n                return \"aggregateFunctions: array expected\";\n            for (var i = 0; i < message.aggregateFunctions.length; ++i) {\n                var error = $root.AggregateFunction.verify(message.aggregateFunctions[i]);\n                if (error)\n                    return \"aggregateFunctions.\" + error;\n            }\n        }\n        if (message.views != null && message.hasOwnProperty(\"views\")) {\n            if (!Array.isArray(message.views))\n                return \"views: array expected\";\n            for (var i = 0; i < message.views.length; ++i) {\n                var error = $root.MateriliazedView.verify(message.views[i]);\n                if (error)\n                    return \"views.\" + error;\n            }\n        }\n        if (message.connectionAlias != null && message.hasOwnProperty(\"connectionAlias\"))\n            if (!$util.isString(message.connectionAlias))\n                return \"connectionAlias: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a KeySpace message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof KeySpace\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {KeySpace} KeySpace\n     */\n    KeySpace.fromObject = function fromObject(object) {\n        if (object instanceof $root.KeySpace)\n            return object;\n        var message = new $root.KeySpace();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.durableWrites != null)\n            message.durableWrites = Boolean(object.durableWrites);\n        if (object.replication) {\n            if (typeof object.replication !== \"object\")\n                throw TypeError(\".KeySpace.replication: object expected\");\n            message.replication = {};\n            for (var keys = Object.keys(object.replication), i = 0; i < keys.length; ++i)\n                message.replication[keys[i]] = String(object.replication[keys[i]]);\n        }\n        if (object.tables) {\n            if (!Array.isArray(object.tables))\n                throw TypeError(\".KeySpace.table: array expected\");\n            message.tables = [];\n            for (var i = 0; i < object.tables.length; ++i) {\n                if (typeof object.tables[i] !== \"object\")\n                    throw TypeError(\".KeySpace.table: object expected\");\n                message.tables[i] = $root.Table.fromObject(object.tables[i]);\n            }\n        }\n        if (object.userTypes) {\n            if (!Array.isArray(object.userTypes))\n                throw TypeError(\".KeySpace.userTypes: array expected\");\n            message.userTypes = [];\n            for (var i = 0; i < object.userTypes.length; ++i) {\n                if (typeof object.userTypes[i] !== \"object\")\n                    throw TypeError(\".KeySpace.userTypes: object expected\");\n                message.userTypes[i] = $root.UserType.fromObject(object.userTypes[i]);\n            }\n        }\n        if (object.userFunctions) {\n            if (!Array.isArray(object.userFunctions))\n                throw TypeError(\".KeySpace.userFunctions: array expected\");\n            message.userFunctions = [];\n            for (var i = 0; i < object.userFunctions.length; ++i) {\n                if (typeof object.userFunctions[i] !== \"object\")\n                    throw TypeError(\".KeySpace.userFunctions: object expected\");\n                message.userFunctions[i] = $root.UserFunction.fromObject(object.userFunctions[i]);\n            }\n        }\n        if (object.aggregateFunctions) {\n            if (!Array.isArray(object.aggregateFunctions))\n                throw TypeError(\".KeySpace.aggregateFunctions: array expected\");\n            message.aggregateFunctions = [];\n            for (var i = 0; i < object.aggregateFunctions.length; ++i) {\n                if (typeof object.aggregateFunctions[i] !== \"object\")\n                    throw TypeError(\".KeySpace.aggregateFunctions: object expected\");\n                message.aggregateFunctions[i] = $root.AggregateFunction.fromObject(object.aggregateFunctions[i]);\n            }\n        }\n        if (object.views) {\n            if (!Array.isArray(object.views))\n                throw TypeError(\".KeySpace.views: array expected\");\n            message.views = [];\n            for (var i = 0; i < object.views.length; ++i) {\n                if (typeof object.views[i] !== \"object\")\n                    throw TypeError(\".KeySpace.views: object expected\");\n                message.views[i] = $root.MateriliazedView.fromObject(object.views[i]);\n            }\n        }\n        if (object.connectionAlias != null)\n            message.connectionAlias = String(object.connectionAlias);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a KeySpace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof KeySpace\n     * @static\n     * @param {KeySpace} message KeySpace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    KeySpace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.tables = [];\n            object.userTypes = [];\n            object.userFunctions = [];\n            object.aggregateFunctions = [];\n            object.views = [];\n        }\n        if (options.objects || options.defaults)\n            object.replication = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.durableWrites = false;\n            object.connectionAlias = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.durableWrites != null && message.hasOwnProperty(\"durableWrites\"))\n            object.durableWrites = message.durableWrites;\n        var keys2;\n        if (message.replication && (keys2 = Object.keys(message.replication)).length) {\n            object.replication = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.replication[keys2[j]] = message.replication[keys2[j]];\n        }\n        if (message.tables && message.tables.length) {\n            object.tables = [];\n            for (var j = 0; j < message.tables.length; ++j)\n                object.tables[j] = $root.Table.toObject(message.tables[j], options);\n        }\n        if (message.userTypes && message.userTypes.length) {\n            object.userTypes = [];\n            for (var j = 0; j < message.userTypes.length; ++j)\n                object.userTypes[j] = $root.UserType.toObject(message.userTypes[j], options);\n        }\n        if (message.userFunctions && message.userFunctions.length) {\n            object.userFunctions = [];\n            for (var j = 0; j < message.userFunctions.length; ++j)\n                object.userFunctions[j] = $root.UserFunction.toObject(message.userFunctions[j], options);\n        }\n        if (message.aggregateFunctions && message.aggregateFunctions.length) {\n            object.aggregateFunctions = [];\n            for (var j = 0; j < message.aggregateFunctions.length; ++j)\n                object.aggregateFunctions[j] = $root.AggregateFunction.toObject(message.aggregateFunctions[j], options);\n        }\n        if (message.views && message.views.length) {\n            object.views = [];\n            for (var j = 0; j < message.views.length; ++j)\n                object.views[j] = $root.MateriliazedView.toObject(message.views[j], options);\n        }\n        if (message.connectionAlias != null && message.hasOwnProperty(\"connectionAlias\"))\n            object.connectionAlias = message.connectionAlias;\n        return object;\n    };\n\n    /**\n     * Converts this KeySpace to JSON.\n     * @function toJSON\n     * @memberof KeySpace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    KeySpace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return KeySpace;\n})();\n\n$root.Table = (function() {\n\n    /**\n     * Properties of a Table.\n     * @exports ITable\n     * @interface ITable\n     * @property {string|null} [name] Table name\n     * @property {Array.<IColumn>|null} [columns] Table columns\n     * @property {Array.<string>|null} [partitionKey] Table partitionKey\n     * @property {Array.<string>|null} [clusteringKey] Table clusteringKey\n     * @property {Object.<string,string>|null} [options] Table options\n     * @property {Array.<IIndex>|null} [indices] Table indices\n     * @property {string|null} [describe] Table describe\n     * @property {string|null} [connectionAlias] Table connectionAlias\n     * @property {string|null} [keyspace] Table keyspace\n     */\n\n    /**\n     * Constructs a new Table.\n     * @exports Table\n     * @classdesc Represents a Table.\n     * @implements ITable\n     * @constructor\n     * @param {ITable=} [properties] Properties to set\n     */\n    function Table(properties) {\n        this.columns = [];\n        this.partitionKey = [];\n        this.clusteringKey = [];\n        this.options = {};\n        this.indices = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Table name.\n     * @member {string} name\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.name = \"\";\n\n    /**\n     * Table columns.\n     * @member {Array.<IColumn>} columns\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.columns = $util.emptyArray;\n\n    /**\n     * Table partitionKey.\n     * @member {Array.<string>} partitionKey\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.partitionKey = $util.emptyArray;\n\n    /**\n     * Table clusteringKey.\n     * @member {Array.<string>} clusteringKey\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.clusteringKey = $util.emptyArray;\n\n    /**\n     * Table options.\n     * @member {Object.<string,string>} options\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.options = $util.emptyObject;\n\n    /**\n     * Table indices.\n     * @member {Array.<IIndex>} indices\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.indices = $util.emptyArray;\n\n    /**\n     * Table describe.\n     * @member {string} describe\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.describe = \"\";\n\n    /**\n     * Table connectionAlias.\n     * @member {string} connectionAlias\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.connectionAlias = \"\";\n\n    /**\n     * Table keyspace.\n     * @member {string} keyspace\n     * @memberof Table\n     * @instance\n     */\n    Table.prototype.keyspace = \"\";\n\n    /**\n     * Creates a new Table instance using the specified properties.\n     * @function create\n     * @memberof Table\n     * @static\n     * @param {ITable=} [properties] Properties to set\n     * @returns {Table} Table instance\n     */\n    Table.create = function create(properties) {\n        return new Table(properties);\n    };\n\n    /**\n     * Encodes the specified Table message. Does not implicitly {@link Table.verify|verify} messages.\n     * @function encode\n     * @memberof Table\n     * @static\n     * @param {ITable} message Table message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Table.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.columns != null && message.columns.length)\n            for (var i = 0; i < message.columns.length; ++i)\n                $root.Column.encode(message.columns[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.partitionKey != null && message.partitionKey.length)\n            for (var i = 0; i < message.partitionKey.length; ++i)\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.partitionKey[i]);\n        if (message.clusteringKey != null && message.clusteringKey.length)\n            for (var i = 0; i < message.clusteringKey.length; ++i)\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.clusteringKey[i]);\n        if (message.options != null && Object.hasOwnProperty.call(message, \"options\"))\n            for (var keys = Object.keys(message.options), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.options[keys[i]]).ldelim();\n        if (message.indices != null && message.indices.length)\n            for (var i = 0; i < message.indices.length; ++i)\n                $root.Index.encode(message.indices[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.describe != null && Object.hasOwnProperty.call(message, \"describe\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.describe);\n        if (message.connectionAlias != null && Object.hasOwnProperty.call(message, \"connectionAlias\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.connectionAlias);\n        if (message.keyspace != null && Object.hasOwnProperty.call(message, \"keyspace\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.keyspace);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Table message, length delimited. Does not implicitly {@link Table.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Table\n     * @static\n     * @param {ITable} message Table message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Table.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Table message from the specified reader or buffer.\n     * @function decode\n     * @memberof Table\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Table} Table\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Table.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Table(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                if (!(message.columns && message.columns.length))\n                    message.columns = [];\n                message.columns.push($root.Column.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                if (!(message.partitionKey && message.partitionKey.length))\n                    message.partitionKey = [];\n                message.partitionKey.push(reader.string());\n                break;\n            case 4:\n                if (!(message.clusteringKey && message.clusteringKey.length))\n                    message.clusteringKey = [];\n                message.clusteringKey.push(reader.string());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.options === $util.emptyObject)\n                    message.options = {};\n                key = reader.string();\n                reader.pos++;\n                message.options[key] = reader.string();\n                break;\n            case 6:\n                if (!(message.indices && message.indices.length))\n                    message.indices = [];\n                message.indices.push($root.Index.decode(reader, reader.uint32()));\n                break;\n            case 7:\n                message.describe = reader.string();\n                break;\n            case 8:\n                message.connectionAlias = reader.string();\n                break;\n            case 9:\n                message.keyspace = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Table message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Table\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Table} Table\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Table.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Table message.\n     * @function verify\n     * @memberof Table\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Table.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.columns != null && message.hasOwnProperty(\"columns\")) {\n            if (!Array.isArray(message.columns))\n                return \"columns: array expected\";\n            for (var i = 0; i < message.columns.length; ++i) {\n                var error = $root.Column.verify(message.columns[i]);\n                if (error)\n                    return \"columns.\" + error;\n            }\n        }\n        if (message.partitionKey != null && message.hasOwnProperty(\"partitionKey\")) {\n            if (!Array.isArray(message.partitionKey))\n                return \"partitionKey: array expected\";\n            for (var i = 0; i < message.partitionKey.length; ++i)\n                if (!$util.isString(message.partitionKey[i]))\n                    return \"partitionKey: string[] expected\";\n        }\n        if (message.clusteringKey != null && message.hasOwnProperty(\"clusteringKey\")) {\n            if (!Array.isArray(message.clusteringKey))\n                return \"clusteringKey: array expected\";\n            for (var i = 0; i < message.clusteringKey.length; ++i)\n                if (!$util.isString(message.clusteringKey[i]))\n                    return \"clusteringKey: string[] expected\";\n        }\n        if (message.options != null && message.hasOwnProperty(\"options\")) {\n            if (!$util.isObject(message.options))\n                return \"options: object expected\";\n            var key = Object.keys(message.options);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isString(message.options[key[i]]))\n                    return \"options: string{k:string} expected\";\n        }\n        if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n            if (!Array.isArray(message.indices))\n                return \"indices: array expected\";\n            for (var i = 0; i < message.indices.length; ++i) {\n                var error = $root.Index.verify(message.indices[i]);\n                if (error)\n                    return \"indices.\" + error;\n            }\n        }\n        if (message.describe != null && message.hasOwnProperty(\"describe\"))\n            if (!$util.isString(message.describe))\n                return \"describe: string expected\";\n        if (message.connectionAlias != null && message.hasOwnProperty(\"connectionAlias\"))\n            if (!$util.isString(message.connectionAlias))\n                return \"connectionAlias: string expected\";\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            if (!$util.isString(message.keyspace))\n                return \"keyspace: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Table message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Table\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Table} Table\n     */\n    Table.fromObject = function fromObject(object) {\n        if (object instanceof $root.Table)\n            return object;\n        var message = new $root.Table();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.columns) {\n            if (!Array.isArray(object.columns))\n                throw TypeError(\".Table.columns: array expected\");\n            message.columns = [];\n            for (var i = 0; i < object.columns.length; ++i) {\n                if (typeof object.columns[i] !== \"object\")\n                    throw TypeError(\".Table.columns: object expected\");\n                message.columns[i] = $root.Column.fromObject(object.columns[i]);\n            }\n        }\n        if (object.partitionKey) {\n            if (!Array.isArray(object.partitionKey))\n                throw TypeError(\".Table.partitionKey: array expected\");\n            message.partitionKey = [];\n            for (var i = 0; i < object.partitionKey.length; ++i)\n                message.partitionKey[i] = String(object.partitionKey[i]);\n        }\n        if (object.clusteringKey) {\n            if (!Array.isArray(object.clusteringKey))\n                throw TypeError(\".Table.clusteringKey: array expected\");\n            message.clusteringKey = [];\n            for (var i = 0; i < object.clusteringKey.length; ++i)\n                message.clusteringKey[i] = String(object.clusteringKey[i]);\n        }\n        if (object.options) {\n            if (typeof object.options !== \"object\")\n                throw TypeError(\".Table.options: object expected\");\n            message.options = {};\n            for (var keys = Object.keys(object.options), i = 0; i < keys.length; ++i)\n                message.options[keys[i]] = String(object.options[keys[i]]);\n        }\n        if (object.indices) {\n            if (!Array.isArray(object.indices))\n                throw TypeError(\".Table.indices: array expected\");\n            message.indices = [];\n            for (var i = 0; i < object.indices.length; ++i) {\n                if (typeof object.indices[i] !== \"object\")\n                    throw TypeError(\".Table.indices: object expected\");\n                message.indices[i] = $root.Index.fromObject(object.indices[i]);\n            }\n        }\n        if (object.describe != null)\n            message.describe = String(object.describe);\n        if (object.connectionAlias != null)\n            message.connectionAlias = String(object.connectionAlias);\n        if (object.keyspace != null)\n            message.keyspace = String(object.keyspace);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Table message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Table\n     * @static\n     * @param {Table} message Table\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Table.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.columns = [];\n            object.partitionKey = [];\n            object.clusteringKey = [];\n            object.indices = [];\n        }\n        if (options.objects || options.defaults)\n            object.options = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.describe = \"\";\n            object.connectionAlias = \"\";\n            object.keyspace = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.columns && message.columns.length) {\n            object.columns = [];\n            for (var j = 0; j < message.columns.length; ++j)\n                object.columns[j] = $root.Column.toObject(message.columns[j], options);\n        }\n        if (message.partitionKey && message.partitionKey.length) {\n            object.partitionKey = [];\n            for (var j = 0; j < message.partitionKey.length; ++j)\n                object.partitionKey[j] = message.partitionKey[j];\n        }\n        if (message.clusteringKey && message.clusteringKey.length) {\n            object.clusteringKey = [];\n            for (var j = 0; j < message.clusteringKey.length; ++j)\n                object.clusteringKey[j] = message.clusteringKey[j];\n        }\n        var keys2;\n        if (message.options && (keys2 = Object.keys(message.options)).length) {\n            object.options = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.options[keys2[j]] = message.options[keys2[j]];\n        }\n        if (message.indices && message.indices.length) {\n            object.indices = [];\n            for (var j = 0; j < message.indices.length; ++j)\n                object.indices[j] = $root.Index.toObject(message.indices[j], options);\n        }\n        if (message.describe != null && message.hasOwnProperty(\"describe\"))\n            object.describe = message.describe;\n        if (message.connectionAlias != null && message.hasOwnProperty(\"connectionAlias\"))\n            object.connectionAlias = message.connectionAlias;\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            object.keyspace = message.keyspace;\n        return object;\n    };\n\n    /**\n     * Converts this Table to JSON.\n     * @function toJSON\n     * @memberof Table\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Table.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Table;\n})();\n\n$root.Index = (function() {\n\n    /**\n     * Properties of an Index.\n     * @exports IIndex\n     * @interface IIndex\n     * @property {string|null} [name] Index name\n     * @property {string|null} [className] Index className\n     * @property {boolean|null} [isIndexOnKeys] Index isIndexOnKeys\n     * @property {boolean|null} [isIndexOnValues] Index isIndexOnValues\n     * @property {string|null} [column] Index column\n     * @property {string|null} [keyspace] Index keyspace\n     */\n\n    /**\n     * Constructs a new Index.\n     * @exports Index\n     * @classdesc Represents an Index.\n     * @implements IIndex\n     * @constructor\n     * @param {IIndex=} [properties] Properties to set\n     */\n    function Index(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Index name.\n     * @member {string} name\n     * @memberof Index\n     * @instance\n     */\n    Index.prototype.name = \"\";\n\n    /**\n     * Index className.\n     * @member {string} className\n     * @memberof Index\n     * @instance\n     */\n    Index.prototype.className = \"\";\n\n    /**\n     * Index isIndexOnKeys.\n     * @member {boolean} isIndexOnKeys\n     * @memberof Index\n     * @instance\n     */\n    Index.prototype.isIndexOnKeys = false;\n\n    /**\n     * Index isIndexOnValues.\n     * @member {boolean} isIndexOnValues\n     * @memberof Index\n     * @instance\n     */\n    Index.prototype.isIndexOnValues = false;\n\n    /**\n     * Index column.\n     * @member {string} column\n     * @memberof Index\n     * @instance\n     */\n    Index.prototype.column = \"\";\n\n    /**\n     * Index keyspace.\n     * @member {string} keyspace\n     * @memberof Index\n     * @instance\n     */\n    Index.prototype.keyspace = \"\";\n\n    /**\n     * Creates a new Index instance using the specified properties.\n     * @function create\n     * @memberof Index\n     * @static\n     * @param {IIndex=} [properties] Properties to set\n     * @returns {Index} Index instance\n     */\n    Index.create = function create(properties) {\n        return new Index(properties);\n    };\n\n    /**\n     * Encodes the specified Index message. Does not implicitly {@link Index.verify|verify} messages.\n     * @function encode\n     * @memberof Index\n     * @static\n     * @param {IIndex} message Index message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Index.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.className != null && Object.hasOwnProperty.call(message, \"className\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.className);\n        if (message.isIndexOnKeys != null && Object.hasOwnProperty.call(message, \"isIndexOnKeys\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isIndexOnKeys);\n        if (message.isIndexOnValues != null && Object.hasOwnProperty.call(message, \"isIndexOnValues\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isIndexOnValues);\n        if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.column);\n        if (message.keyspace != null && Object.hasOwnProperty.call(message, \"keyspace\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.keyspace);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Index message, length delimited. Does not implicitly {@link Index.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Index\n     * @static\n     * @param {IIndex} message Index message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Index.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Index message from the specified reader or buffer.\n     * @function decode\n     * @memberof Index\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Index} Index\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Index.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Index();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.className = reader.string();\n                break;\n            case 3:\n                message.isIndexOnKeys = reader.bool();\n                break;\n            case 4:\n                message.isIndexOnValues = reader.bool();\n                break;\n            case 5:\n                message.column = reader.string();\n                break;\n            case 6:\n                message.keyspace = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Index message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Index\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Index} Index\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Index.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Index message.\n     * @function verify\n     * @memberof Index\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Index.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.className != null && message.hasOwnProperty(\"className\"))\n            if (!$util.isString(message.className))\n                return \"className: string expected\";\n        if (message.isIndexOnKeys != null && message.hasOwnProperty(\"isIndexOnKeys\"))\n            if (typeof message.isIndexOnKeys !== \"boolean\")\n                return \"isIndexOnKeys: boolean expected\";\n        if (message.isIndexOnValues != null && message.hasOwnProperty(\"isIndexOnValues\"))\n            if (typeof message.isIndexOnValues !== \"boolean\")\n                return \"isIndexOnValues: boolean expected\";\n        if (message.column != null && message.hasOwnProperty(\"column\"))\n            if (!$util.isString(message.column))\n                return \"column: string expected\";\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            if (!$util.isString(message.keyspace))\n                return \"keyspace: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Index message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Index\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Index} Index\n     */\n    Index.fromObject = function fromObject(object) {\n        if (object instanceof $root.Index)\n            return object;\n        var message = new $root.Index();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.className != null)\n            message.className = String(object.className);\n        if (object.isIndexOnKeys != null)\n            message.isIndexOnKeys = Boolean(object.isIndexOnKeys);\n        if (object.isIndexOnValues != null)\n            message.isIndexOnValues = Boolean(object.isIndexOnValues);\n        if (object.column != null)\n            message.column = String(object.column);\n        if (object.keyspace != null)\n            message.keyspace = String(object.keyspace);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Index message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Index\n     * @static\n     * @param {Index} message Index\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Index.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.className = \"\";\n            object.isIndexOnKeys = false;\n            object.isIndexOnValues = false;\n            object.column = \"\";\n            object.keyspace = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.className != null && message.hasOwnProperty(\"className\"))\n            object.className = message.className;\n        if (message.isIndexOnKeys != null && message.hasOwnProperty(\"isIndexOnKeys\"))\n            object.isIndexOnKeys = message.isIndexOnKeys;\n        if (message.isIndexOnValues != null && message.hasOwnProperty(\"isIndexOnValues\"))\n            object.isIndexOnValues = message.isIndexOnValues;\n        if (message.column != null && message.hasOwnProperty(\"column\"))\n            object.column = message.column;\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            object.keyspace = message.keyspace;\n        return object;\n    };\n\n    /**\n     * Converts this Index to JSON.\n     * @function toJSON\n     * @memberof Index\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Index.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Index;\n})();\n\n$root.Column = (function() {\n\n    /**\n     * Properties of a Column.\n     * @exports IColumn\n     * @interface IColumn\n     * @property {string|null} [name] Column name\n     * @property {string|null} [type] Column type\n     * @property {boolean|null} [isPartitionKey] Column isPartitionKey\n     * @property {boolean|null} [isClusteringKey] Column isClusteringKey\n     * @property {boolean|null} [isStatic] Column isStatic\n     */\n\n    /**\n     * Constructs a new Column.\n     * @exports Column\n     * @classdesc Represents a Column.\n     * @implements IColumn\n     * @constructor\n     * @param {IColumn=} [properties] Properties to set\n     */\n    function Column(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Column name.\n     * @member {string} name\n     * @memberof Column\n     * @instance\n     */\n    Column.prototype.name = \"\";\n\n    /**\n     * Column type.\n     * @member {string} type\n     * @memberof Column\n     * @instance\n     */\n    Column.prototype.type = \"\";\n\n    /**\n     * Column isPartitionKey.\n     * @member {boolean} isPartitionKey\n     * @memberof Column\n     * @instance\n     */\n    Column.prototype.isPartitionKey = false;\n\n    /**\n     * Column isClusteringKey.\n     * @member {boolean} isClusteringKey\n     * @memberof Column\n     * @instance\n     */\n    Column.prototype.isClusteringKey = false;\n\n    /**\n     * Column isStatic.\n     * @member {boolean} isStatic\n     * @memberof Column\n     * @instance\n     */\n    Column.prototype.isStatic = false;\n\n    /**\n     * Creates a new Column instance using the specified properties.\n     * @function create\n     * @memberof Column\n     * @static\n     * @param {IColumn=} [properties] Properties to set\n     * @returns {Column} Column instance\n     */\n    Column.create = function create(properties) {\n        return new Column(properties);\n    };\n\n    /**\n     * Encodes the specified Column message. Does not implicitly {@link Column.verify|verify} messages.\n     * @function encode\n     * @memberof Column\n     * @static\n     * @param {IColumn} message Column message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Column.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);\n        if (message.isPartitionKey != null && Object.hasOwnProperty.call(message, \"isPartitionKey\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isPartitionKey);\n        if (message.isClusteringKey != null && Object.hasOwnProperty.call(message, \"isClusteringKey\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isClusteringKey);\n        if (message.isStatic != null && Object.hasOwnProperty.call(message, \"isStatic\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isStatic);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Column message, length delimited. Does not implicitly {@link Column.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Column\n     * @static\n     * @param {IColumn} message Column message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Column.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Column message from the specified reader or buffer.\n     * @function decode\n     * @memberof Column\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Column} Column\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Column.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Column();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.type = reader.string();\n                break;\n            case 3:\n                message.isPartitionKey = reader.bool();\n                break;\n            case 4:\n                message.isClusteringKey = reader.bool();\n                break;\n            case 5:\n                message.isStatic = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Column message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Column\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Column} Column\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Column.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Column message.\n     * @function verify\n     * @memberof Column\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Column.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        if (message.isPartitionKey != null && message.hasOwnProperty(\"isPartitionKey\"))\n            if (typeof message.isPartitionKey !== \"boolean\")\n                return \"isPartitionKey: boolean expected\";\n        if (message.isClusteringKey != null && message.hasOwnProperty(\"isClusteringKey\"))\n            if (typeof message.isClusteringKey !== \"boolean\")\n                return \"isClusteringKey: boolean expected\";\n        if (message.isStatic != null && message.hasOwnProperty(\"isStatic\"))\n            if (typeof message.isStatic !== \"boolean\")\n                return \"isStatic: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Column message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Column\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Column} Column\n     */\n    Column.fromObject = function fromObject(object) {\n        if (object instanceof $root.Column)\n            return object;\n        var message = new $root.Column();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.type != null)\n            message.type = String(object.type);\n        if (object.isPartitionKey != null)\n            message.isPartitionKey = Boolean(object.isPartitionKey);\n        if (object.isClusteringKey != null)\n            message.isClusteringKey = Boolean(object.isClusteringKey);\n        if (object.isStatic != null)\n            message.isStatic = Boolean(object.isStatic);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Column message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Column\n     * @static\n     * @param {Column} message Column\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Column.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.type = \"\";\n            object.isPartitionKey = false;\n            object.isClusteringKey = false;\n            object.isStatic = false;\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        if (message.isPartitionKey != null && message.hasOwnProperty(\"isPartitionKey\"))\n            object.isPartitionKey = message.isPartitionKey;\n        if (message.isClusteringKey != null && message.hasOwnProperty(\"isClusteringKey\"))\n            object.isClusteringKey = message.isClusteringKey;\n        if (message.isStatic != null && message.hasOwnProperty(\"isStatic\"))\n            object.isStatic = message.isStatic;\n        return object;\n    };\n\n    /**\n     * Converts this Column to JSON.\n     * @function toJSON\n     * @memberof Column\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Column.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Column;\n})();\n\n$root.UserType = (function() {\n\n    /**\n     * Properties of a UserType.\n     * @exports IUserType\n     * @interface IUserType\n     * @property {string|null} [name] UserType name\n     * @property {Array.<IField>|null} [fields] UserType fields\n     */\n\n    /**\n     * Constructs a new UserType.\n     * @exports UserType\n     * @classdesc Represents a UserType.\n     * @implements IUserType\n     * @constructor\n     * @param {IUserType=} [properties] Properties to set\n     */\n    function UserType(properties) {\n        this.fields = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserType name.\n     * @member {string} name\n     * @memberof UserType\n     * @instance\n     */\n    UserType.prototype.name = \"\";\n\n    /**\n     * UserType fields.\n     * @member {Array.<IField>} fields\n     * @memberof UserType\n     * @instance\n     */\n    UserType.prototype.fields = $util.emptyArray;\n\n    /**\n     * Creates a new UserType instance using the specified properties.\n     * @function create\n     * @memberof UserType\n     * @static\n     * @param {IUserType=} [properties] Properties to set\n     * @returns {UserType} UserType instance\n     */\n    UserType.create = function create(properties) {\n        return new UserType(properties);\n    };\n\n    /**\n     * Encodes the specified UserType message. Does not implicitly {@link UserType.verify|verify} messages.\n     * @function encode\n     * @memberof UserType\n     * @static\n     * @param {IUserType} message UserType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserType.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.fields != null && message.fields.length)\n            for (var i = 0; i < message.fields.length; ++i)\n                $root.Field.encode(message.fields[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserType message, length delimited. Does not implicitly {@link UserType.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserType\n     * @static\n     * @param {IUserType} message UserType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserType.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserType message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserType} UserType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserType.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserType();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                if (!(message.fields && message.fields.length))\n                    message.fields = [];\n                message.fields.push($root.Field.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserType message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserType} UserType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserType.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserType message.\n     * @function verify\n     * @memberof UserType\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserType.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.fields != null && message.hasOwnProperty(\"fields\")) {\n            if (!Array.isArray(message.fields))\n                return \"fields: array expected\";\n            for (var i = 0; i < message.fields.length; ++i) {\n                var error = $root.Field.verify(message.fields[i]);\n                if (error)\n                    return \"fields.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a UserType message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserType\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserType} UserType\n     */\n    UserType.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserType)\n            return object;\n        var message = new $root.UserType();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.fields) {\n            if (!Array.isArray(object.fields))\n                throw TypeError(\".UserType.fields: array expected\");\n            message.fields = [];\n            for (var i = 0; i < object.fields.length; ++i) {\n                if (typeof object.fields[i] !== \"object\")\n                    throw TypeError(\".UserType.fields: object expected\");\n                message.fields[i] = $root.Field.fromObject(object.fields[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserType message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserType\n     * @static\n     * @param {UserType} message UserType\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserType.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.fields = [];\n        if (options.defaults)\n            object.name = \"\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.fields && message.fields.length) {\n            object.fields = [];\n            for (var j = 0; j < message.fields.length; ++j)\n                object.fields[j] = $root.Field.toObject(message.fields[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this UserType to JSON.\n     * @function toJSON\n     * @memberof UserType\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserType.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserType;\n})();\n\n$root.Field = (function() {\n\n    /**\n     * Properties of a Field.\n     * @exports IField\n     * @interface IField\n     * @property {string|null} [name] Field name\n     * @property {string|null} [type] Field type\n     */\n\n    /**\n     * Constructs a new Field.\n     * @exports Field\n     * @classdesc Represents a Field.\n     * @implements IField\n     * @constructor\n     * @param {IField=} [properties] Properties to set\n     */\n    function Field(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Field name.\n     * @member {string} name\n     * @memberof Field\n     * @instance\n     */\n    Field.prototype.name = \"\";\n\n    /**\n     * Field type.\n     * @member {string} type\n     * @memberof Field\n     * @instance\n     */\n    Field.prototype.type = \"\";\n\n    /**\n     * Creates a new Field instance using the specified properties.\n     * @function create\n     * @memberof Field\n     * @static\n     * @param {IField=} [properties] Properties to set\n     * @returns {Field} Field instance\n     */\n    Field.create = function create(properties) {\n        return new Field(properties);\n    };\n\n    /**\n     * Encodes the specified Field message. Does not implicitly {@link Field.verify|verify} messages.\n     * @function encode\n     * @memberof Field\n     * @static\n     * @param {IField} message Field message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Field.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Field message, length delimited. Does not implicitly {@link Field.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Field\n     * @static\n     * @param {IField} message Field message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Field.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Field message from the specified reader or buffer.\n     * @function decode\n     * @memberof Field\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Field} Field\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Field.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Field();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.type = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Field message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Field\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Field} Field\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Field.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Field message.\n     * @function verify\n     * @memberof Field\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Field.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            if (!$util.isString(message.type))\n                return \"type: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Field message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Field\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Field} Field\n     */\n    Field.fromObject = function fromObject(object) {\n        if (object instanceof $root.Field)\n            return object;\n        var message = new $root.Field();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.type != null)\n            message.type = String(object.type);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Field message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Field\n     * @static\n     * @param {Field} message Field\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Field.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.type = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.type != null && message.hasOwnProperty(\"type\"))\n            object.type = message.type;\n        return object;\n    };\n\n    /**\n     * Converts this Field to JSON.\n     * @function toJSON\n     * @memberof Field\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Field.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Field;\n})();\n\n$root.UserFunction = (function() {\n\n    /**\n     * Properties of a UserFunction.\n     * @exports IUserFunction\n     * @interface IUserFunction\n     * @property {string|null} [name] UserFunction name\n     * @property {string|null} [keyspace] UserFunction keyspace\n     * @property {boolean|null} [orReplace] UserFunction orReplace\n     * @property {boolean|null} [ifNotExist] UserFunction ifNotExist\n     * @property {string|null} [returnType] UserFunction returnType\n     * @property {boolean|null} [calledOnNullInput] UserFunction calledOnNullInput\n     * @property {string|null} [language] UserFunction language\n     * @property {string|null} [signature] UserFunction signature\n     * @property {string|null} [body] UserFunction body\n     * @property {string|null} [connection] UserFunction connection\n     */\n\n    /**\n     * Constructs a new UserFunction.\n     * @exports UserFunction\n     * @classdesc Represents a UserFunction.\n     * @implements IUserFunction\n     * @constructor\n     * @param {IUserFunction=} [properties] Properties to set\n     */\n    function UserFunction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * UserFunction name.\n     * @member {string} name\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.name = \"\";\n\n    /**\n     * UserFunction keyspace.\n     * @member {string} keyspace\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.keyspace = \"\";\n\n    /**\n     * UserFunction orReplace.\n     * @member {boolean} orReplace\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.orReplace = false;\n\n    /**\n     * UserFunction ifNotExist.\n     * @member {boolean} ifNotExist\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.ifNotExist = false;\n\n    /**\n     * UserFunction returnType.\n     * @member {string} returnType\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.returnType = \"\";\n\n    /**\n     * UserFunction calledOnNullInput.\n     * @member {boolean} calledOnNullInput\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.calledOnNullInput = false;\n\n    /**\n     * UserFunction language.\n     * @member {string} language\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.language = \"\";\n\n    /**\n     * UserFunction signature.\n     * @member {string} signature\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.signature = \"\";\n\n    /**\n     * UserFunction body.\n     * @member {string} body\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.body = \"\";\n\n    /**\n     * UserFunction connection.\n     * @member {string} connection\n     * @memberof UserFunction\n     * @instance\n     */\n    UserFunction.prototype.connection = \"\";\n\n    /**\n     * Creates a new UserFunction instance using the specified properties.\n     * @function create\n     * @memberof UserFunction\n     * @static\n     * @param {IUserFunction=} [properties] Properties to set\n     * @returns {UserFunction} UserFunction instance\n     */\n    UserFunction.create = function create(properties) {\n        return new UserFunction(properties);\n    };\n\n    /**\n     * Encodes the specified UserFunction message. Does not implicitly {@link UserFunction.verify|verify} messages.\n     * @function encode\n     * @memberof UserFunction\n     * @static\n     * @param {IUserFunction} message UserFunction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserFunction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.keyspace != null && Object.hasOwnProperty.call(message, \"keyspace\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyspace);\n        if (message.orReplace != null && Object.hasOwnProperty.call(message, \"orReplace\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.orReplace);\n        if (message.ifNotExist != null && Object.hasOwnProperty.call(message, \"ifNotExist\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.ifNotExist);\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.returnType);\n        if (message.calledOnNullInput != null && Object.hasOwnProperty.call(message, \"calledOnNullInput\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.calledOnNullInput);\n        if (message.language != null && Object.hasOwnProperty.call(message, \"language\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.language);\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.signature);\n        if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.body);\n        if (message.connection != null && Object.hasOwnProperty.call(message, \"connection\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.connection);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified UserFunction message, length delimited. Does not implicitly {@link UserFunction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof UserFunction\n     * @static\n     * @param {IUserFunction} message UserFunction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UserFunction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a UserFunction message from the specified reader or buffer.\n     * @function decode\n     * @memberof UserFunction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {UserFunction} UserFunction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserFunction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UserFunction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.keyspace = reader.string();\n                break;\n            case 3:\n                message.orReplace = reader.bool();\n                break;\n            case 4:\n                message.ifNotExist = reader.bool();\n                break;\n            case 5:\n                message.returnType = reader.string();\n                break;\n            case 6:\n                message.calledOnNullInput = reader.bool();\n                break;\n            case 7:\n                message.language = reader.string();\n                break;\n            case 8:\n                message.signature = reader.string();\n                break;\n            case 9:\n                message.body = reader.string();\n                break;\n            case 11:\n                message.connection = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a UserFunction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof UserFunction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {UserFunction} UserFunction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UserFunction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a UserFunction message.\n     * @function verify\n     * @memberof UserFunction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    UserFunction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            if (!$util.isString(message.keyspace))\n                return \"keyspace: string expected\";\n        if (message.orReplace != null && message.hasOwnProperty(\"orReplace\"))\n            if (typeof message.orReplace !== \"boolean\")\n                return \"orReplace: boolean expected\";\n        if (message.ifNotExist != null && message.hasOwnProperty(\"ifNotExist\"))\n            if (typeof message.ifNotExist !== \"boolean\")\n                return \"ifNotExist: boolean expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.calledOnNullInput != null && message.hasOwnProperty(\"calledOnNullInput\"))\n            if (typeof message.calledOnNullInput !== \"boolean\")\n                return \"calledOnNullInput: boolean expected\";\n        if (message.language != null && message.hasOwnProperty(\"language\"))\n            if (!$util.isString(message.language))\n                return \"language: string expected\";\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            if (!$util.isString(message.body))\n                return \"body: string expected\";\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            if (!$util.isString(message.connection))\n                return \"connection: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a UserFunction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UserFunction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {UserFunction} UserFunction\n     */\n    UserFunction.fromObject = function fromObject(object) {\n        if (object instanceof $root.UserFunction)\n            return object;\n        var message = new $root.UserFunction();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.keyspace != null)\n            message.keyspace = String(object.keyspace);\n        if (object.orReplace != null)\n            message.orReplace = Boolean(object.orReplace);\n        if (object.ifNotExist != null)\n            message.ifNotExist = Boolean(object.ifNotExist);\n        if (object.returnType != null)\n            message.returnType = String(object.returnType);\n        if (object.calledOnNullInput != null)\n            message.calledOnNullInput = Boolean(object.calledOnNullInput);\n        if (object.language != null)\n            message.language = String(object.language);\n        if (object.signature != null)\n            message.signature = String(object.signature);\n        if (object.body != null)\n            message.body = String(object.body);\n        if (object.connection != null)\n            message.connection = String(object.connection);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a UserFunction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UserFunction\n     * @static\n     * @param {UserFunction} message UserFunction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UserFunction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.keyspace = \"\";\n            object.orReplace = false;\n            object.ifNotExist = false;\n            object.returnType = \"\";\n            object.calledOnNullInput = false;\n            object.language = \"\";\n            object.signature = \"\";\n            object.body = \"\";\n            object.connection = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            object.keyspace = message.keyspace;\n        if (message.orReplace != null && message.hasOwnProperty(\"orReplace\"))\n            object.orReplace = message.orReplace;\n        if (message.ifNotExist != null && message.hasOwnProperty(\"ifNotExist\"))\n            object.ifNotExist = message.ifNotExist;\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.calledOnNullInput != null && message.hasOwnProperty(\"calledOnNullInput\"))\n            object.calledOnNullInput = message.calledOnNullInput;\n        if (message.language != null && message.hasOwnProperty(\"language\"))\n            object.language = message.language;\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            object.body = message.body;\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            object.connection = message.connection;\n        return object;\n    };\n\n    /**\n     * Converts this UserFunction to JSON.\n     * @function toJSON\n     * @memberof UserFunction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UserFunction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UserFunction;\n})();\n\n$root.AggregateFunction = (function() {\n\n    /**\n     * Properties of an AggregateFunction.\n     * @exports IAggregateFunction\n     * @interface IAggregateFunction\n     * @property {string|null} [name] AggregateFunction name\n     * @property {string|null} [keyspace] AggregateFunction keyspace\n     * @property {boolean|null} [orReplace] AggregateFunction orReplace\n     * @property {boolean|null} [ifNotExist] AggregateFunction ifNotExist\n     * @property {string|null} [signature] AggregateFunction signature\n     * @property {string|null} [sFunc] AggregateFunction sFunc\n     * @property {string|null} [sType] AggregateFunction sType\n     * @property {string|null} [finalFunc] AggregateFunction finalFunc\n     * @property {string|null} [initCond] AggregateFunction initCond\n     * @property {string|null} [connection] AggregateFunction connection\n     */\n\n    /**\n     * Constructs a new AggregateFunction.\n     * @exports AggregateFunction\n     * @classdesc Represents an AggregateFunction.\n     * @implements IAggregateFunction\n     * @constructor\n     * @param {IAggregateFunction=} [properties] Properties to set\n     */\n    function AggregateFunction(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AggregateFunction name.\n     * @member {string} name\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.name = \"\";\n\n    /**\n     * AggregateFunction keyspace.\n     * @member {string} keyspace\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.keyspace = \"\";\n\n    /**\n     * AggregateFunction orReplace.\n     * @member {boolean} orReplace\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.orReplace = false;\n\n    /**\n     * AggregateFunction ifNotExist.\n     * @member {boolean} ifNotExist\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.ifNotExist = false;\n\n    /**\n     * AggregateFunction signature.\n     * @member {string} signature\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.signature = \"\";\n\n    /**\n     * AggregateFunction sFunc.\n     * @member {string} sFunc\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.sFunc = \"\";\n\n    /**\n     * AggregateFunction sType.\n     * @member {string} sType\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.sType = \"\";\n\n    /**\n     * AggregateFunction finalFunc.\n     * @member {string} finalFunc\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.finalFunc = \"\";\n\n    /**\n     * AggregateFunction initCond.\n     * @member {string} initCond\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.initCond = \"\";\n\n    /**\n     * AggregateFunction connection.\n     * @member {string} connection\n     * @memberof AggregateFunction\n     * @instance\n     */\n    AggregateFunction.prototype.connection = \"\";\n\n    /**\n     * Creates a new AggregateFunction instance using the specified properties.\n     * @function create\n     * @memberof AggregateFunction\n     * @static\n     * @param {IAggregateFunction=} [properties] Properties to set\n     * @returns {AggregateFunction} AggregateFunction instance\n     */\n    AggregateFunction.create = function create(properties) {\n        return new AggregateFunction(properties);\n    };\n\n    /**\n     * Encodes the specified AggregateFunction message. Does not implicitly {@link AggregateFunction.verify|verify} messages.\n     * @function encode\n     * @memberof AggregateFunction\n     * @static\n     * @param {IAggregateFunction} message AggregateFunction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AggregateFunction.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.keyspace != null && Object.hasOwnProperty.call(message, \"keyspace\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyspace);\n        if (message.orReplace != null && Object.hasOwnProperty.call(message, \"orReplace\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.orReplace);\n        if (message.ifNotExist != null && Object.hasOwnProperty.call(message, \"ifNotExist\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.ifNotExist);\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signature);\n        if (message.sFunc != null && Object.hasOwnProperty.call(message, \"sFunc\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.sFunc);\n        if (message.sType != null && Object.hasOwnProperty.call(message, \"sType\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.sType);\n        if (message.finalFunc != null && Object.hasOwnProperty.call(message, \"finalFunc\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.finalFunc);\n        if (message.initCond != null && Object.hasOwnProperty.call(message, \"initCond\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.initCond);\n        if (message.connection != null && Object.hasOwnProperty.call(message, \"connection\"))\n            writer.uint32(/* id 10, wireType 2 =*/82).string(message.connection);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AggregateFunction message, length delimited. Does not implicitly {@link AggregateFunction.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AggregateFunction\n     * @static\n     * @param {IAggregateFunction} message AggregateFunction message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AggregateFunction.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AggregateFunction message from the specified reader or buffer.\n     * @function decode\n     * @memberof AggregateFunction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AggregateFunction} AggregateFunction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AggregateFunction.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AggregateFunction();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.keyspace = reader.string();\n                break;\n            case 3:\n                message.orReplace = reader.bool();\n                break;\n            case 4:\n                message.ifNotExist = reader.bool();\n                break;\n            case 5:\n                message.signature = reader.string();\n                break;\n            case 6:\n                message.sFunc = reader.string();\n                break;\n            case 7:\n                message.sType = reader.string();\n                break;\n            case 8:\n                message.finalFunc = reader.string();\n                break;\n            case 9:\n                message.initCond = reader.string();\n                break;\n            case 10:\n                message.connection = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AggregateFunction message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AggregateFunction\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AggregateFunction} AggregateFunction\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AggregateFunction.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an AggregateFunction message.\n     * @function verify\n     * @memberof AggregateFunction\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    AggregateFunction.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            if (!$util.isString(message.keyspace))\n                return \"keyspace: string expected\";\n        if (message.orReplace != null && message.hasOwnProperty(\"orReplace\"))\n            if (typeof message.orReplace !== \"boolean\")\n                return \"orReplace: boolean expected\";\n        if (message.ifNotExist != null && message.hasOwnProperty(\"ifNotExist\"))\n            if (typeof message.ifNotExist !== \"boolean\")\n                return \"ifNotExist: boolean expected\";\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.sFunc != null && message.hasOwnProperty(\"sFunc\"))\n            if (!$util.isString(message.sFunc))\n                return \"sFunc: string expected\";\n        if (message.sType != null && message.hasOwnProperty(\"sType\"))\n            if (!$util.isString(message.sType))\n                return \"sType: string expected\";\n        if (message.finalFunc != null && message.hasOwnProperty(\"finalFunc\"))\n            if (!$util.isString(message.finalFunc))\n                return \"finalFunc: string expected\";\n        if (message.initCond != null && message.hasOwnProperty(\"initCond\"))\n            if (!$util.isString(message.initCond))\n                return \"initCond: string expected\";\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            if (!$util.isString(message.connection))\n                return \"connection: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates an AggregateFunction message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof AggregateFunction\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {AggregateFunction} AggregateFunction\n     */\n    AggregateFunction.fromObject = function fromObject(object) {\n        if (object instanceof $root.AggregateFunction)\n            return object;\n        var message = new $root.AggregateFunction();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.keyspace != null)\n            message.keyspace = String(object.keyspace);\n        if (object.orReplace != null)\n            message.orReplace = Boolean(object.orReplace);\n        if (object.ifNotExist != null)\n            message.ifNotExist = Boolean(object.ifNotExist);\n        if (object.signature != null)\n            message.signature = String(object.signature);\n        if (object.sFunc != null)\n            message.sFunc = String(object.sFunc);\n        if (object.sType != null)\n            message.sType = String(object.sType);\n        if (object.finalFunc != null)\n            message.finalFunc = String(object.finalFunc);\n        if (object.initCond != null)\n            message.initCond = String(object.initCond);\n        if (object.connection != null)\n            message.connection = String(object.connection);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an AggregateFunction message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof AggregateFunction\n     * @static\n     * @param {AggregateFunction} message AggregateFunction\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AggregateFunction.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.keyspace = \"\";\n            object.orReplace = false;\n            object.ifNotExist = false;\n            object.signature = \"\";\n            object.sFunc = \"\";\n            object.sType = \"\";\n            object.finalFunc = \"\";\n            object.initCond = \"\";\n            object.connection = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.keyspace != null && message.hasOwnProperty(\"keyspace\"))\n            object.keyspace = message.keyspace;\n        if (message.orReplace != null && message.hasOwnProperty(\"orReplace\"))\n            object.orReplace = message.orReplace;\n        if (message.ifNotExist != null && message.hasOwnProperty(\"ifNotExist\"))\n            object.ifNotExist = message.ifNotExist;\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.sFunc != null && message.hasOwnProperty(\"sFunc\"))\n            object.sFunc = message.sFunc;\n        if (message.sType != null && message.hasOwnProperty(\"sType\"))\n            object.sType = message.sType;\n        if (message.finalFunc != null && message.hasOwnProperty(\"finalFunc\"))\n            object.finalFunc = message.finalFunc;\n        if (message.initCond != null && message.hasOwnProperty(\"initCond\"))\n            object.initCond = message.initCond;\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            object.connection = message.connection;\n        return object;\n    };\n\n    /**\n     * Converts this AggregateFunction to JSON.\n     * @function toJSON\n     * @memberof AggregateFunction\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AggregateFunction.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AggregateFunction;\n})();\n\n$root.MateriliazedView = (function() {\n\n    /**\n     * Properties of a MateriliazedView.\n     * @exports IMateriliazedView\n     * @interface IMateriliazedView\n     * @property {string|null} [name] MateriliazedView name\n     * @property {string|null} [baseTable] MateriliazedView baseTable\n     * @property {string|null} [select] MateriliazedView select\n     * @property {boolean|null} [includesAllColumns] MateriliazedView includesAllColumns\n     * @property {string|null} [whereClause] MateriliazedView whereClause\n     * @property {Array.<string>|null} [primaryKeyNames] MateriliazedView primaryKeyNames\n     * @property {Object.<string,string>|null} [options] MateriliazedView options\n     * @property {string|null} [connection] MateriliazedView connection\n     * @property {string|null} [nameKeySpace] MateriliazedView nameKeySpace\n     * @property {string|null} [describe] MateriliazedView describe\n     */\n\n    /**\n     * Constructs a new MateriliazedView.\n     * @exports MateriliazedView\n     * @classdesc Represents a MateriliazedView.\n     * @implements IMateriliazedView\n     * @constructor\n     * @param {IMateriliazedView=} [properties] Properties to set\n     */\n    function MateriliazedView(properties) {\n        this.primaryKeyNames = [];\n        this.options = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * MateriliazedView name.\n     * @member {string} name\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.name = \"\";\n\n    /**\n     * MateriliazedView baseTable.\n     * @member {string} baseTable\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.baseTable = \"\";\n\n    /**\n     * MateriliazedView select.\n     * @member {string} select\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.select = \"\";\n\n    /**\n     * MateriliazedView includesAllColumns.\n     * @member {boolean} includesAllColumns\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.includesAllColumns = false;\n\n    /**\n     * MateriliazedView whereClause.\n     * @member {string} whereClause\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.whereClause = \"\";\n\n    /**\n     * MateriliazedView primaryKeyNames.\n     * @member {Array.<string>} primaryKeyNames\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.primaryKeyNames = $util.emptyArray;\n\n    /**\n     * MateriliazedView options.\n     * @member {Object.<string,string>} options\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.options = $util.emptyObject;\n\n    /**\n     * MateriliazedView connection.\n     * @member {string} connection\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.connection = \"\";\n\n    /**\n     * MateriliazedView nameKeySpace.\n     * @member {string} nameKeySpace\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.nameKeySpace = \"\";\n\n    /**\n     * MateriliazedView describe.\n     * @member {string} describe\n     * @memberof MateriliazedView\n     * @instance\n     */\n    MateriliazedView.prototype.describe = \"\";\n\n    /**\n     * Creates a new MateriliazedView instance using the specified properties.\n     * @function create\n     * @memberof MateriliazedView\n     * @static\n     * @param {IMateriliazedView=} [properties] Properties to set\n     * @returns {MateriliazedView} MateriliazedView instance\n     */\n    MateriliazedView.create = function create(properties) {\n        return new MateriliazedView(properties);\n    };\n\n    /**\n     * Encodes the specified MateriliazedView message. Does not implicitly {@link MateriliazedView.verify|verify} messages.\n     * @function encode\n     * @memberof MateriliazedView\n     * @static\n     * @param {IMateriliazedView} message MateriliazedView message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MateriliazedView.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.baseTable != null && Object.hasOwnProperty.call(message, \"baseTable\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.baseTable);\n        if (message.select != null && Object.hasOwnProperty.call(message, \"select\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.select);\n        if (message.includesAllColumns != null && Object.hasOwnProperty.call(message, \"includesAllColumns\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.includesAllColumns);\n        if (message.whereClause != null && Object.hasOwnProperty.call(message, \"whereClause\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.whereClause);\n        if (message.primaryKeyNames != null && message.primaryKeyNames.length)\n            for (var i = 0; i < message.primaryKeyNames.length; ++i)\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.primaryKeyNames[i]);\n        if (message.options != null && Object.hasOwnProperty.call(message, \"options\"))\n            for (var keys = Object.keys(message.options), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 7, wireType 2 =*/58).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.options[keys[i]]).ldelim();\n        if (message.connection != null && Object.hasOwnProperty.call(message, \"connection\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.connection);\n        if (message.nameKeySpace != null && Object.hasOwnProperty.call(message, \"nameKeySpace\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.nameKeySpace);\n        if (message.describe != null && Object.hasOwnProperty.call(message, \"describe\"))\n            writer.uint32(/* id 10, wireType 2 =*/82).string(message.describe);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified MateriliazedView message, length delimited. Does not implicitly {@link MateriliazedView.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof MateriliazedView\n     * @static\n     * @param {IMateriliazedView} message MateriliazedView message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MateriliazedView.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a MateriliazedView message from the specified reader or buffer.\n     * @function decode\n     * @memberof MateriliazedView\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {MateriliazedView} MateriliazedView\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MateriliazedView.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MateriliazedView(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.baseTable = reader.string();\n                break;\n            case 3:\n                message.select = reader.string();\n                break;\n            case 4:\n                message.includesAllColumns = reader.bool();\n                break;\n            case 5:\n                message.whereClause = reader.string();\n                break;\n            case 6:\n                if (!(message.primaryKeyNames && message.primaryKeyNames.length))\n                    message.primaryKeyNames = [];\n                message.primaryKeyNames.push(reader.string());\n                break;\n            case 7:\n                reader.skip().pos++;\n                if (message.options === $util.emptyObject)\n                    message.options = {};\n                key = reader.string();\n                reader.pos++;\n                message.options[key] = reader.string();\n                break;\n            case 8:\n                message.connection = reader.string();\n                break;\n            case 9:\n                message.nameKeySpace = reader.string();\n                break;\n            case 10:\n                message.describe = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a MateriliazedView message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof MateriliazedView\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {MateriliazedView} MateriliazedView\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MateriliazedView.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a MateriliazedView message.\n     * @function verify\n     * @memberof MateriliazedView\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    MateriliazedView.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.baseTable != null && message.hasOwnProperty(\"baseTable\"))\n            if (!$util.isString(message.baseTable))\n                return \"baseTable: string expected\";\n        if (message.select != null && message.hasOwnProperty(\"select\"))\n            if (!$util.isString(message.select))\n                return \"select: string expected\";\n        if (message.includesAllColumns != null && message.hasOwnProperty(\"includesAllColumns\"))\n            if (typeof message.includesAllColumns !== \"boolean\")\n                return \"includesAllColumns: boolean expected\";\n        if (message.whereClause != null && message.hasOwnProperty(\"whereClause\"))\n            if (!$util.isString(message.whereClause))\n                return \"whereClause: string expected\";\n        if (message.primaryKeyNames != null && message.hasOwnProperty(\"primaryKeyNames\")) {\n            if (!Array.isArray(message.primaryKeyNames))\n                return \"primaryKeyNames: array expected\";\n            for (var i = 0; i < message.primaryKeyNames.length; ++i)\n                if (!$util.isString(message.primaryKeyNames[i]))\n                    return \"primaryKeyNames: string[] expected\";\n        }\n        if (message.options != null && message.hasOwnProperty(\"options\")) {\n            if (!$util.isObject(message.options))\n                return \"options: object expected\";\n            var key = Object.keys(message.options);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isString(message.options[key[i]]))\n                    return \"options: string{k:string} expected\";\n        }\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            if (!$util.isString(message.connection))\n                return \"connection: string expected\";\n        if (message.nameKeySpace != null && message.hasOwnProperty(\"nameKeySpace\"))\n            if (!$util.isString(message.nameKeySpace))\n                return \"nameKeySpace: string expected\";\n        if (message.describe != null && message.hasOwnProperty(\"describe\"))\n            if (!$util.isString(message.describe))\n                return \"describe: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a MateriliazedView message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof MateriliazedView\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {MateriliazedView} MateriliazedView\n     */\n    MateriliazedView.fromObject = function fromObject(object) {\n        if (object instanceof $root.MateriliazedView)\n            return object;\n        var message = new $root.MateriliazedView();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.baseTable != null)\n            message.baseTable = String(object.baseTable);\n        if (object.select != null)\n            message.select = String(object.select);\n        if (object.includesAllColumns != null)\n            message.includesAllColumns = Boolean(object.includesAllColumns);\n        if (object.whereClause != null)\n            message.whereClause = String(object.whereClause);\n        if (object.primaryKeyNames) {\n            if (!Array.isArray(object.primaryKeyNames))\n                throw TypeError(\".MateriliazedView.primaryKeyNames: array expected\");\n            message.primaryKeyNames = [];\n            for (var i = 0; i < object.primaryKeyNames.length; ++i)\n                message.primaryKeyNames[i] = String(object.primaryKeyNames[i]);\n        }\n        if (object.options) {\n            if (typeof object.options !== \"object\")\n                throw TypeError(\".MateriliazedView.options: object expected\");\n            message.options = {};\n            for (var keys = Object.keys(object.options), i = 0; i < keys.length; ++i)\n                message.options[keys[i]] = String(object.options[keys[i]]);\n        }\n        if (object.connection != null)\n            message.connection = String(object.connection);\n        if (object.nameKeySpace != null)\n            message.nameKeySpace = String(object.nameKeySpace);\n        if (object.describe != null)\n            message.describe = String(object.describe);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a MateriliazedView message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof MateriliazedView\n     * @static\n     * @param {MateriliazedView} message MateriliazedView\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    MateriliazedView.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.primaryKeyNames = [];\n        if (options.objects || options.defaults)\n            object.options = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.baseTable = \"\";\n            object.select = \"\";\n            object.includesAllColumns = false;\n            object.whereClause = \"\";\n            object.connection = \"\";\n            object.nameKeySpace = \"\";\n            object.describe = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.baseTable != null && message.hasOwnProperty(\"baseTable\"))\n            object.baseTable = message.baseTable;\n        if (message.select != null && message.hasOwnProperty(\"select\"))\n            object.select = message.select;\n        if (message.includesAllColumns != null && message.hasOwnProperty(\"includesAllColumns\"))\n            object.includesAllColumns = message.includesAllColumns;\n        if (message.whereClause != null && message.hasOwnProperty(\"whereClause\"))\n            object.whereClause = message.whereClause;\n        if (message.primaryKeyNames && message.primaryKeyNames.length) {\n            object.primaryKeyNames = [];\n            for (var j = 0; j < message.primaryKeyNames.length; ++j)\n                object.primaryKeyNames[j] = message.primaryKeyNames[j];\n        }\n        var keys2;\n        if (message.options && (keys2 = Object.keys(message.options)).length) {\n            object.options = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.options[keys2[j]] = message.options[keys2[j]];\n        }\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            object.connection = message.connection;\n        if (message.nameKeySpace != null && message.hasOwnProperty(\"nameKeySpace\"))\n            object.nameKeySpace = message.nameKeySpace;\n        if (message.describe != null && message.hasOwnProperty(\"describe\"))\n            object.describe = message.describe;\n        return object;\n    };\n\n    /**\n     * Converts this MateriliazedView to JSON.\n     * @function toJSON\n     * @memberof MateriliazedView\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    MateriliazedView.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return MateriliazedView;\n})();\n\n$root.Roles = (function() {\n\n    /**\n     * Properties of a Roles.\n     * @exports IRoles\n     * @interface IRoles\n     * @property {Array.<IRole>|null} [role] Roles role\n     */\n\n    /**\n     * Constructs a new Roles.\n     * @exports Roles\n     * @classdesc Represents a Roles.\n     * @implements IRoles\n     * @constructor\n     * @param {IRoles=} [properties] Properties to set\n     */\n    function Roles(properties) {\n        this.roles = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Roles role.\n     * @member {Array.<IRole>} role\n     * @memberof Roles\n     * @instance\n     */\n    Roles.prototype.roles = $util.emptyArray;\n\n    /**\n     * Creates a new Roles instance using the specified properties.\n     * @function create\n     * @memberof Roles\n     * @static\n     * @param {IRoles=} [properties] Properties to set\n     * @returns {Roles} Roles instance\n     */\n    Roles.create = function create(properties) {\n        return new Roles(properties);\n    };\n\n    /**\n     * Encodes the specified Roles message. Does not implicitly {@link Roles.verify|verify} messages.\n     * @function encode\n     * @memberof Roles\n     * @static\n     * @param {IRoles} message Roles message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Roles.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.roles != null && message.roles.length)\n            for (var i = 0; i < message.roles.length; ++i)\n                $root.Role.encode(message.roles[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Roles message, length delimited. Does not implicitly {@link Roles.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Roles\n     * @static\n     * @param {IRoles} message Roles message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Roles.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Roles message from the specified reader or buffer.\n     * @function decode\n     * @memberof Roles\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Roles} Roles\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Roles.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Roles();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.roles && message.roles.length))\n                    message.roles = [];\n                message.roles.push($root.Role.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Roles message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Roles\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Roles} Roles\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Roles.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Roles message.\n     * @function verify\n     * @memberof Roles\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Roles.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.roles != null && message.hasOwnProperty(\"roles\")) {\n            if (!Array.isArray(message.roles))\n                return \"role: array expected\";\n            for (var i = 0; i < message.roles.length; ++i) {\n                var error = $root.Role.verify(message.roles[i]);\n                if (error)\n                    return \"role.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Roles message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Roles\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Roles} Roles\n     */\n    Roles.fromObject = function fromObject(object) {\n        if (object instanceof $root.Roles)\n            return object;\n        var message = new $root.Roles();\n        if (object.roles) {\n            if (!Array.isArray(object.roles))\n                throw TypeError(\".Roles.role: array expected\");\n            message.roles = [];\n            for (var i = 0; i < object.roles.length; ++i) {\n                if (typeof object.roles[i] !== \"object\")\n                    throw TypeError(\".Roles.role: object expected\");\n                message.roles[i] = $root.Role.fromObject(object.roles[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Roles message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Roles\n     * @static\n     * @param {Roles} message Roles\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Roles.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.roles = [];\n        if (message.roles && message.roles.length) {\n            object.roles = [];\n            for (var j = 0; j < message.roles.length; ++j)\n                object.roles[j] = $root.Role.toObject(message.roles[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Roles to JSON.\n     * @function toJSON\n     * @memberof Roles\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Roles.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Roles;\n})();\n\n$root.Role = (function() {\n\n    /**\n     * Properties of a Role.\n     * @exports IRole\n     * @interface IRole\n     * @property {string|null} [name] Role name\n     * @property {string|null} [memberOf] Role memberOf\n     * @property {string|null} [saltedHash] Role saltedHash\n     * @property {Object.<string,string>|null} [options] Role options\n     * @property {string|null} [connection] Role connection\n     */\n\n    /**\n     * Constructs a new Role.\n     * @exports Role\n     * @classdesc Represents a Role.\n     * @implements IRole\n     * @constructor\n     * @param {IRole=} [properties] Properties to set\n     */\n    function Role(properties) {\n        this.options = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Role name.\n     * @member {string} name\n     * @memberof Role\n     * @instance\n     */\n    Role.prototype.name = \"\";\n\n    /**\n     * Role memberOf.\n     * @member {string} memberOf\n     * @memberof Role\n     * @instance\n     */\n    Role.prototype.memberOf = \"\";\n\n    /**\n     * Role saltedHash.\n     * @member {string} saltedHash\n     * @memberof Role\n     * @instance\n     */\n    Role.prototype.saltedHash = \"\";\n\n    /**\n     * Role options.\n     * @member {Object.<string,string>} options\n     * @memberof Role\n     * @instance\n     */\n    Role.prototype.options = $util.emptyObject;\n\n    /**\n     * Role connection.\n     * @member {string} connection\n     * @memberof Role\n     * @instance\n     */\n    Role.prototype.connection = \"\";\n\n    /**\n     * Creates a new Role instance using the specified properties.\n     * @function create\n     * @memberof Role\n     * @static\n     * @param {IRole=} [properties] Properties to set\n     * @returns {Role} Role instance\n     */\n    Role.create = function create(properties) {\n        return new Role(properties);\n    };\n\n    /**\n     * Encodes the specified Role message. Does not implicitly {@link Role.verify|verify} messages.\n     * @function encode\n     * @memberof Role\n     * @static\n     * @param {IRole} message Role message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Role.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.memberOf != null && Object.hasOwnProperty.call(message, \"memberOf\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.memberOf);\n        if (message.saltedHash != null && Object.hasOwnProperty.call(message, \"saltedHash\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.saltedHash);\n        if (message.options != null && Object.hasOwnProperty.call(message, \"options\"))\n            for (var keys = Object.keys(message.options), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.options[keys[i]]).ldelim();\n        if (message.connection != null && Object.hasOwnProperty.call(message, \"connection\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.connection);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Role message, length delimited. Does not implicitly {@link Role.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Role\n     * @static\n     * @param {IRole} message Role message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Role.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Role message from the specified reader or buffer.\n     * @function decode\n     * @memberof Role\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Role} Role\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Role.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Role(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                message.memberOf = reader.string();\n                break;\n            case 3:\n                message.saltedHash = reader.string();\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.options === $util.emptyObject)\n                    message.options = {};\n                key = reader.string();\n                reader.pos++;\n                message.options[key] = reader.string();\n                break;\n            case 5:\n                message.connection = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Role message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Role\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Role} Role\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Role.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Role message.\n     * @function verify\n     * @memberof Role\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Role.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.memberOf != null && message.hasOwnProperty(\"memberOf\"))\n            if (!$util.isString(message.memberOf))\n                return \"memberOf: string expected\";\n        if (message.saltedHash != null && message.hasOwnProperty(\"saltedHash\"))\n            if (!$util.isString(message.saltedHash))\n                return \"saltedHash: string expected\";\n        if (message.options != null && message.hasOwnProperty(\"options\")) {\n            if (!$util.isObject(message.options))\n                return \"options: object expected\";\n            var key = Object.keys(message.options);\n            for (var i = 0; i < key.length; ++i)\n                if (!$util.isString(message.options[key[i]]))\n                    return \"options: string{k:string} expected\";\n        }\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            if (!$util.isString(message.connection))\n                return \"connection: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Role message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Role\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Role} Role\n     */\n    Role.fromObject = function fromObject(object) {\n        if (object instanceof $root.Role)\n            return object;\n        var message = new $root.Role();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.memberOf != null)\n            message.memberOf = String(object.memberOf);\n        if (object.saltedHash != null)\n            message.saltedHash = String(object.saltedHash);\n        if (object.options) {\n            if (typeof object.options !== \"object\")\n                throw TypeError(\".Role.options: object expected\");\n            message.options = {};\n            for (var keys = Object.keys(object.options), i = 0; i < keys.length; ++i)\n                message.options[keys[i]] = String(object.options[keys[i]]);\n        }\n        if (object.connection != null)\n            message.connection = String(object.connection);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Role message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Role\n     * @static\n     * @param {Role} message Role\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Role.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.options = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.memberOf = \"\";\n            object.saltedHash = \"\";\n            object.connection = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.memberOf != null && message.hasOwnProperty(\"memberOf\"))\n            object.memberOf = message.memberOf;\n        if (message.saltedHash != null && message.hasOwnProperty(\"saltedHash\"))\n            object.saltedHash = message.saltedHash;\n        var keys2;\n        if (message.options && (keys2 = Object.keys(message.options)).length) {\n            object.options = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.options[keys2[j]] = message.options[keys2[j]];\n        }\n        if (message.connection != null && message.hasOwnProperty(\"connection\"))\n            object.connection = message.connection;\n        return object;\n    };\n\n    /**\n     * Converts this Role to JSON.\n     * @function toJSON\n     * @memberof Role\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Role.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Role;\n})();\n\n$root.Rows = (function() {\n\n    /**\n     * Properties of a Rows.\n     * @exports IRows\n     * @interface IRows\n     * @property {Array.<string>|null} [rows] Rows rows\n     */\n\n    /**\n     * Constructs a new Rows.\n     * @exports Rows\n     * @classdesc Represents a Rows.\n     * @implements IRows\n     * @constructor\n     * @param {IRows=} [properties] Properties to set\n     */\n    function Rows(properties) {\n        this.rows = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Rows rows.\n     * @member {Array.<string>} rows\n     * @memberof Rows\n     * @instance\n     */\n    Rows.prototype.rows = $util.emptyArray;\n\n    /**\n     * Creates a new Rows instance using the specified properties.\n     * @function create\n     * @memberof Rows\n     * @static\n     * @param {IRows=} [properties] Properties to set\n     * @returns {Rows} Rows instance\n     */\n    Rows.create = function create(properties) {\n        return new Rows(properties);\n    };\n\n    /**\n     * Encodes the specified Rows message. Does not implicitly {@link Rows.verify|verify} messages.\n     * @function encode\n     * @memberof Rows\n     * @static\n     * @param {IRows} message Rows message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Rows.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.rows != null && message.rows.length)\n            for (var i = 0; i < message.rows.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.rows[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Rows message, length delimited. Does not implicitly {@link Rows.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Rows\n     * @static\n     * @param {IRows} message Rows message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Rows.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Rows message from the specified reader or buffer.\n     * @function decode\n     * @memberof Rows\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Rows} Rows\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Rows.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Rows();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.rows && message.rows.length))\n                    message.rows = [];\n                message.rows.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Rows message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Rows\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Rows} Rows\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Rows.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Rows message.\n     * @function verify\n     * @memberof Rows\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Rows.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.rows != null && message.hasOwnProperty(\"rows\")) {\n            if (!Array.isArray(message.rows))\n                return \"rows: array expected\";\n            for (var i = 0; i < message.rows.length; ++i)\n                if (!$util.isString(message.rows[i]))\n                    return \"rows: string[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Rows message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Rows\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Rows} Rows\n     */\n    Rows.fromObject = function fromObject(object) {\n        if (object instanceof $root.Rows)\n            return object;\n        var message = new $root.Rows();\n        if (object.rows) {\n            if (!Array.isArray(object.rows))\n                throw TypeError(\".Rows.rows: array expected\");\n            message.rows = [];\n            for (var i = 0; i < object.rows.length; ++i)\n                message.rows[i] = String(object.rows[i]);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Rows message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Rows\n     * @static\n     * @param {Rows} message Rows\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Rows.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.rows = [];\n        if (message.rows && message.rows.length) {\n            object.rows = [];\n            for (var j = 0; j < message.rows.length; ++j)\n                object.rows[j] = message.rows[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Rows to JSON.\n     * @function toJSON\n     * @memberof Rows\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Rows.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Rows;\n})();\n\nmodule.exports = $root;\n","export default class Service {\r\n\r\n    // _spark = window.location.href;\r\n    _spark = 'http://localhost:8080';\r\n\r\n\r\n    initialized(body) {\r\n        let object = {};\r\n        object.method = 'POST';\r\n        object.mode = 'cors';\r\n        object.cache = 'no-cache';\r\n        object.credentials = 'omit';\r\n        object.redirect = 'follow';\r\n        object.referrerPolicy = 'no-referrer';\r\n        object.body = body;\r\n        return object;\r\n    }\r\n\r\n\r\n    async getResource(url, init) {\r\n        const response = await fetch(`${this._spark}${url}`, init);\r\n        if (!response.ok) {\r\n            throw  new Error(`Could not fetch ${url}, received ${response.status}`)\r\n        }\r\n        return await response.arrayBuffer();\r\n\r\n    }\r\n\r\n    async testConnection(host, port, user, pass) {\r\n        let url = new URL(`${this._spark}/testConnection`),\r\n            params = {host: host, port: port, user: user, pass: pass};\r\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\r\n\r\n        let response = await fetch(url);\r\n\r\n        if (!response.ok) {\r\n            throw  new Error(`Could not fetch ${url}, received ${response.status}`)\r\n        }\r\n\r\n        return await response.text();\r\n    }\r\n\r\n    exit = async () => {\r\n        try {\r\n            let response = await fetch(`${this._spark}/exit`);\r\n\r\n            if (!response.ok) {\r\n                window.close();\r\n                // throw  new Error(`Could not fetch ${url}, received ${response.status}`)\r\n            }\r\n        } catch (e) {\r\n            window.close();\r\n        }\r\n        \r\n    }\r\n\r\n    async getKeySpaces(host, port, connection_alias, user, pass) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/keyspaces\", o);\r\n    }\r\n\r\n    async getKeySpace(host, port, connection_alias, user, pass, nameKeySpace) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass, nameKeySpace})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/keyspaces\", o);\r\n    }\r\n\r\n    async getTypes(host, port, connection_alias, user, pass, nameKeySpace) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass, nameKeySpace})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/gettypes\", o);\r\n    }\r\n\r\n    async getUserFunctions(host, port, connection_alias, user, pass, nameKeySpace) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass, nameKeySpace})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/getfunctions\", o);\r\n    }\r\n\r\n    async getRoles(host, port, connection_alias, user, pass) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/getroles\", o);\r\n    }\r\n\r\n    async getTables(host, port, connection_alias, user, pass, nameKeySpace) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass, nameKeySpace})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/gettables\", o);\r\n    }\r\n\r\n    async getAggregateFunctions(host, port, connection_alias, user, pass, nameKeySpace) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass, nameKeySpace})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/getaggregatefunctions\", o);\r\n    }\r\n\r\n    async getMViews(host, port, connection_alias, user, pass, nameKeySpace) {\r\n        let s = JSON.stringify({host, port, connection_alias, user, pass, nameKeySpace})\r\n        let o = this.initialized(`${s}`);\r\n        return await this.getResource(\"/getmaterializedviews\", o);\r\n    }\r\n\r\n    async createKeySpaces(buffer) {\r\n        let o = this.initialized(buffer);\r\n        return await this.getResource(\"/createkeyspace\", o);\r\n    }\r\n\r\n    async editKeySpaces(buffer) {\r\n        let o = this.initialized(buffer);\r\n        return await this.getResource(\"/editkeyspace\", o);\r\n    }\r\n\r\n    async dropKeySpaces(buffer) {\r\n        let o = this.initialized(buffer);\r\n        return await this.getResource(\"/dropkeyspace\", o);\r\n    }\r\n\r\n    async createUserType(object) {\r\n        let json = JSON.stringify(object)\r\n        let o = this.initialized(json);\r\n        return await this.getResource(\"/createusertype\", o);\r\n    }\r\n\r\n    async executeQuery(object) {\r\n        let json = JSON.stringify(object)\r\n        let o = this.initialized(json);\r\n        return await this.getResource(\"/executequery\", o);\r\n    }\r\n\r\n    async createMV(object) {\r\n        let o = this.initialized(object);\r\n        return await this.getResource(\"/creatematerializedview\", o);\r\n    }\r\n\r\n    async createRole(object) {\r\n        let o = this.initialized(object);\r\n        return await this.getResource(\"/createrole\", o);\r\n    }\r\n\r\n    async createTable(object) {\r\n        let o = this.initialized(object);\r\n        return await this.getResource(\"/createtable\", o);\r\n    }\r\n\r\n    async editUserType(object) {\r\n        let json = JSON.stringify(object)\r\n        let o = this.initialized(json);\r\n        return await this.getResource(\"/editusertype\", o);\r\n    }\r\n\r\n    async editTable(object) {\r\n        let json = JSON.stringify(object)\r\n        let o = this.initialized(json);\r\n        return await this.getResource(\"/edittable\", o);\r\n    }\r\n\r\n    async editRole(object) {\r\n        let o = this.initialized(object);\r\n        return await this.getResource(\"/editrole\", o);\r\n    }\r\n\r\n    async dropUserType(string) {\r\n        let o = this.initialized(string);\r\n        return await this.getResource(\"/dropusertype\", o);\r\n    }\r\n\r\n    async dropRole(string) {\r\n        let o = this.initialized(string);\r\n        return await this.getResource(\"/droprole\", o);\r\n    }\r\n\r\n    async dropUserFunction(string) {\r\n        let o = this.initialized(string);\r\n        return await this.getResource(\"/dropuserfunction\", o);\r\n    }\r\n\r\n    async dropAggregateFunction(string) {\r\n        let o = this.initialized(string);\r\n        return await this.getResource(\"/dropaggregatefunction\", o);\r\n    }\r\n\r\n    async dropMView(string) {\r\n        let o = this.initialized(string);\r\n        return await this.getResource(\"/dropmaterializedview\", o);\r\n    }\r\n\r\n    async dropTable(string) {\r\n        let o = this.initialized(string);\r\n        return await this.getResource(\"/droptable\", o);\r\n    }\r\n\r\n    async createUserFunction(buffer) {\r\n        let o = this.initialized(buffer);\r\n        return await this.getResource(\"/createuserfunction\", o);\r\n    }\r\n\r\n    async createAggregateFunction(buffer) {\r\n        let o = this.initialized(buffer);\r\n        return await this.getResource(\"/createaggregatefunction\", o);\r\n    }\r\n\r\n    async disConnect(connection_alias) {\r\n        let url = new URL(`${this._spark}/disconnect`);\r\n        let params = {connection_alias: connection_alias};\r\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\r\n\r\n        let response = await fetch(url);\r\n\r\n        if (!response.ok) {\r\n            throw  new Error(`Could not fetch ${url}, received ${response.status}`)\r\n        }\r\n        return await response.text();\r\n    }\r\n\r\n    async proto(host) {\r\n        return await this.getResource(\"/hello\", this.initialize(host));\r\n    }\r\n\r\n\r\n}","import Spinner from './spinner';\r\nexport default Spinner;\r\n\r\n","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n\r\n    return (\r\n        <div className=\"loadingio-spinner-rolling-q55m2voz0c\">\r\n            <div className=\"ldio-c61crjbz78v\">\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Spinner;","import Lockr from 'lockr';\r\n\r\n\r\nexport default class Storage {\r\n\r\n    constructor() {\r\n        if (localStorage.getItem('_connection_') === null || typeof localStorage.getItem('_connection_') === 'undefined') {\r\n            Lockr.set('_connection_', []);\r\n        }\r\n    }\r\n\r\n    get = (item) => {\r\n        if (typeof item === 'undefined') {\r\n            return Lockr.get('_connection_');\r\n        }\r\n\r\n\r\n        return Lockr.get('_connection_').map(object => {\r\n            if (JSON.parse(object).connection_alias === item) {\r\n                return object;\r\n            }\r\n             return undefined;\r\n        }).filter((e) => typeof e !== \"undefined\")[0];\r\n\r\n    }\r\n\r\n    isExists = (object) => {\r\n        if (Lockr.get('_connection_').length > 0) {\r\n            let find = false;\r\n            Lockr.get('_connection_').forEach(ob => {\r\n\r\n                if (JSON.parse(ob).connection_alias === JSON.parse(object).connection_alias) {\r\n                    find = true;\r\n                }\r\n            })\r\n            return find;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    pushToStorage = (object) => {\r\n        let arrayConnection = Lockr.get('_connection_');\r\n        arrayConnection.push(object);\r\n        Lockr.set('_connection_', arrayConnection);\r\n    }\r\n\r\n    save = (object) => {\r\n        if (Lockr.get('_connection_').length === 0) {\r\n            this.pushToStorage(object);\r\n            return true;\r\n        }\r\n\r\n        if (this.isExists(object)) {\r\n            throw new Error('Object ' + object + ' already exists');\r\n        } else {\r\n            this.pushToStorage(object);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    saveAll = (connections) => {\r\n        Lockr.set('_connection_', connections);\r\n    }\r\n\r\n    edit = (focus, newObject) => {\r\n        if (Lockr.get('_connection_').length === 0) {\r\n            throw new Error('Empty localstorage');\r\n        }\r\n\r\n        if(!(JSON.parse(newObject).connection_alias === focus) && this.isExists(newObject)){\r\n            throw new Error('Object ' + newObject + ' already exists');\r\n        }\r\n\r\n        let newArray = Lockr.get('_connection_').map(obj => {\r\n\r\n            if(JSON.parse(obj).connection_alias === focus){\r\n                return newObject;\r\n            }\r\n            return obj;\r\n\r\n        });\r\n\r\n        Lockr.set('_connection_',newArray);\r\n        return true;\r\n    }\r\n\r\n    clear = () => {\r\n        Lockr.set('_connection_', []);\r\n    }\r\n\r\n\r\n}","import React, {Component} from \"react\";\r\nimport Service from \"../service/service\";\r\nimport Spinner from \"../spinner\";\r\nimport LocalStorageService from \"../service/local-storage-service\";\r\nimport './create-connection.css';\r\n\r\nconst $ = window.$;\r\n\r\n\r\nexport default class CreateConnection extends Component {\r\n\r\n\r\n    fetchService = new Service();\r\n    storage = new LocalStorageService();\r\n\r\n\r\n    state = {\r\n        connection_alias: 'connection',\r\n        host: '',\r\n        port: '',\r\n        connect: 'No connected',\r\n        loading: false,\r\n        authUser: '',\r\n        authPass: '',\r\n        checkerAuth: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        $(`#${this.props.id}`).modal('show')\r\n        if (this.props.focus) {\r\n            this.setProperties(this.props.focus)\r\n        }\r\n    }\r\n\r\n    setProperties = (focus) => {\r\n        if (Array.isArray(this.storage.get()))\r\n            this.storage.get().forEach(object => {\r\n                if (focus === JSON.parse(object).connection_alias) {\r\n                    let {connection_alias: alias, host: h, port: p, authUser: u, authPass: pass, checkerAuth: check} = JSON.parse(object);\r\n                    this.setState(({connection_alias, host, port, authUser, authPass}) => {\r\n                        return {\r\n                            connection_alias: alias,\r\n                            host: h,\r\n                            port: p,\r\n                            authUser: u,\r\n                            authPass: pass,\r\n                            checkerAuth: check\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.focus !== prevProps.focus || (this.props.focus !== '' && this.state.host === '')) {\r\n            this.setProperties(this.props.focus)\r\n        }\r\n    }\r\n\r\n\r\n    sendTest = () => {\r\n        this.setState(() => {\r\n            return {loading: true, connect: ''}\r\n        });\r\n        let {host, port, authUser, authPass} = this.state;\r\n        this.fetchService.testConnection(host, port, authUser, authPass).then((data) => {\r\n            this.setState(({connect}) => {\r\n                return {connect: data, loading: false}\r\n            });\r\n\r\n        })\r\n    };\r\n\r\n    clearFields = () => {\r\n        this.setState(({host, port, connect, authUser, authPass}) => {\r\n            return ({host: '', port: '', connect: '', authUser: '', authPass: '', checkerAuth: false})\r\n        })\r\n        this.props.close()\r\n    }\r\n\r\n    saveConnection = () => {\r\n        let focus = this.props.focus;\r\n        let {host, port, connection_alias, authUser, authPass, checkerAuth} = this.state;\r\n        let connection = JSON.stringify({host, port, connection_alias, authUser, authPass, checkerAuth});\r\n        // edit section\r\n        if (this.props.id === 'editconnection') {\r\n            try {\r\n                this.storage.edit(focus, connection);\r\n                this.clearFields();\r\n                this.props.save(connection);\r\n                $(`#${this.props.id}`).modal('hide');\r\n            } catch (e) {\r\n                this.props.save(null);\r\n                this.setState(({connect}) => {\r\n                    return {connect: '\\'' + connection_alias + '\\' already exists'}\r\n                })\r\n            }\r\n\r\n        } else {\r\n            try {\r\n                this.storage.save(connection);\r\n                this.clearFields();\r\n                this.props.save(connection);\r\n                $(`#${this.props.id}`).modal('hide');\r\n            } catch (e) {\r\n                this.props.save(null);\r\n                this.setState(({connect}) => {\r\n                    return {connect: '\\'' + connection_alias + '\\' already exists'}\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onChange = (e) => {\r\n        let id = e.target.id;\r\n        let value = e.target.value;\r\n        if (id === 'host') {\r\n            this.setState(({host}) => {\r\n                return {host: value}\r\n            })\r\n        }\r\n        if (id === 'port') {\r\n            this.setState(({port}) => {\r\n                return {port: value}\r\n            })\r\n        }\r\n        if (id === 'alias') {\r\n            this.setState(({connection_alias}) => {\r\n                return {connection_alias: value}\r\n            })\r\n        }\r\n        if (id === 'auth_checkbox') {\r\n            const condition = e.target.checked;\r\n            this.setState(({checkerAuth}) => {\r\n                return {checkerAuth: condition}\r\n            })\r\n            //todo: ?\r\n            document.querySelectorAll('.authForm').forEach(e => e.disabled = condition)\r\n\r\n        }\r\n        if (id === 'user_auth') {\r\n            this.setState(({authUser}) => {\r\n                return {authUser: value}\r\n            })\r\n        }\r\n        if (id === 'user_pass') {\r\n            this.setState(({authPass}) => {\r\n                return {authPass: value}\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {connect, host, port, loading, authPass, authUser, checkerAuth} = this.state;\r\n        let spiner;\r\n        if (loading) {\r\n            spiner = <Spinner/>;\r\n        }\r\n        let error;\r\n        if (connect !== 'Connected') {\r\n            if (connect.length > 50) {\r\n                error = 'error scroll'\r\n            } else {\r\n                error = 'error'\r\n            }\r\n        }\r\n\r\n//todo: use authentication add label tag\r\n        return (\r\n            <div>\r\n                <div className=\"modal fade\" id={this.props.id} data-backdrop=\"static\" data-keyboard=\"false\"\r\n                     tabIndex=\"-1\"\r\n                     role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\" id=\"staticBackdropLabel\">\r\n                                    {this.props.id === 'createconnection' ? 'Create Connection' : 'Edit Connection'}\r\n                                </h5>\r\n                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                                        onClick={this.props.close}>\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div className=\"modal-body\">\r\n\r\n                                <form onChange={this.onChange}>\r\n                                    <table >\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Host</th>\r\n                                            <th scope=\"col\">Port</th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        <tr>\r\n                                            <td><input\r\n                                                type='text'\r\n                                                id='host'\r\n                                                value={host}/></td>\r\n                                            <td><input\r\n                                                type='number'\r\n                                                id='port'\r\n                                                value={port}\r\n                                                min={1024}\r\n                                                max={65535}/></td>\r\n                                        </tr>\r\n                                        </tbody>\r\n                                        <div style={{alignContent: 'flex-end'}}><input type=\"checkbox\"\r\n                                                                                       id={'auth_checkbox'}\r\n                                                                                       checked={checkerAuth}\r\n                                        /> Use\r\n                                            autentification\r\n                                        </div>\r\n\r\n                                        <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                            <div><span>User</span> <input className={\"authForm\"} type=\"text\"\r\n                                                                          disabled={!checkerAuth}\r\n                                                                          value={authUser === '' ? '' : authUser}\r\n                                                                          style={{paddingLeft: '30%'}}\r\n                                                                          id={\"user_auth\"}/></div>\r\n                                            <div>Password <input type=\"password\" className={\"authForm\"}\r\n                                                                 value={authPass === '' ? '' : authPass}\r\n                                                                 disabled={!checkerAuth}\r\n                                                                 id={\"user_pass\"}/></div>\r\n                                        </div>\r\n                                        <button onClick={this.sendTest} style={{marginTop: '5px'}}\r\n                                                id='button' type=\"button\" className=\"btn btn-primary float-left\">TEST\r\n                                        </button>\r\n                                        {spiner}\r\n                                    </table>\r\n                                    <div>Connection alias <input type={\"text\"}\r\n                                                                 style={{marginLeft: '10px'}}\r\n                                                                 id={\"alias\"}\r\n                                                                 value={this.state.connection_alias}/></div>\r\n                                    <div className={`valid ${error}`}>\r\n                                        <span>{connect === 'No connected' ? '' : connect}</span>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\"\r\n                                        onClick={this.clearFields}>Close\r\n                                </button>\r\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={this.saveConnection}\r\n                                >SAVE\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}","import CreateConnection from \"./create-connection\";\r\n\r\nexport default CreateConnection;","import LeftPanel from \"./left-panel\";\r\n\r\nexport default LeftPanel;","import React from \"react\";\r\nimport './left-panel.css';\r\n\r\n\r\nconst LeftPanel = ({connections}) => {\r\n    return (<div className={\"left-panel\"}>\r\n        <div id={\"tree-container\"}>\r\n            {connections}\r\n        </div>\r\n    </div>);\r\n\r\n\r\n}\r\nexport default LeftPanel;","import React, {Component} from \"react\";\r\n\r\nconst $ = window.$;\r\n\r\nexport default class Toast extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {data: props.dataToast.result, style: props.dataToast.style}\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.toastBehavior();\r\n    }\r\n\r\n    toastBehavior() {\r\n        $(`.toast`).toast({animation: true, delay: 20000});\r\n        $(`.toast`).toast('show');\r\n\r\n        $(`.toast`).on('hide.bs.toast', () => {\r\n            this.props.removeToast()\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.dataToast !== this.props.dataToast) {\r\n\r\n            this.setState(() => {\r\n                return {data: this.props.dataToast.result, style: this.props.dataToast.style}\r\n            });\r\n            this.toastBehavior();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div aria-live=\"polite\" aria-atomic=\"true\"  style={{position: 'absolute', top: 0, right: 0}}>\r\n                <div>\r\n                    <div className=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n                        <div className=\"toast-header\">\r\n                            <strong className=\"mr-auto\">Result Action</strong>\r\n                            <button type=\"button\" className=\"ml-2 mb-1 close\" data-dismiss=\"toast\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"toast-body\" style={this.state.style}>\r\n                            {this.state.data}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import Toast from \"./toast\";\r\n\r\nexport default Toast;","import React, {Component} from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faPlusCircle, faEdit, faMinusCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as _ from 'lodash'\r\n\r\nconst $ = window.$;\r\n\r\nexport default class UserType extends Component {\r\n\r\n\r\n    state = {\r\n        fields: [],\r\n        modal: false,\r\n        dataForModal: '',\r\n        indexFocusElement: -1,\r\n        nameType: '',\r\n        changed: [],\r\n        action: '',\r\n        process: '',\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super();\r\n        if (props.element.fields) {\r\n            let nameType = '';\r\n            if (props.element.action === 'edit') {\r\n                nameType = props.element.name.split('.')[2];\r\n            }\r\n            this.state = {nameType, fields: props.element.fields, action: props.element.action, changed: []}\r\n\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.element.fields !== this.props.element.fields) {\r\n            let nameType = this.state.nameType;\r\n            this.setState(() => {\r\n                return {\r\n                    fields: this.props.element.fields\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        if (e) {\r\n            let value = e.target.value;\r\n            this.setState(() => {\r\n                return {nameType: value}\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let {fields, modal, dataForModal, nameType, action} = this.state;\r\n        return (<div>\r\n            <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n                    <button type=\"button\" className=\"btn btn-outline-secondary\"\r\n                            onClick={this.applyType}\r\n                            disabled={(fields.length === 0 || nameType === '')}\r\n                            title=\"to apply type\"><FontAwesomeIcon\r\n                        icon={faCheck}/></button>\r\n                    <button type=\"button\"\r\n                            className=\"btn btn-outline-secondary\"\r\n                            onClick={this.addType}\r\n                    ><FontAwesomeIcon icon={faPlusCircle}/>\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-outline-secondary\"\r\n                            disabled={fields.length === 0}\r\n                            onClick={this.editType}\r\n                    ><FontAwesomeIcon\r\n                        icon={faEdit}/></button>\r\n\r\n                    <button type=\"button\" className=\"btn btn-outline-secondary\"\r\n                            disabled={fields.length === 0}\r\n                            hidden={action === 'edit'}\r\n                            onClick={this.deleteType}><FontAwesomeIcon\r\n                        icon={faMinusCircle}/></button>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div><span>Name</span> <input onChange={this.onChange} value={nameType} disabled={action === 'edit'}/></div>\r\n            <table className=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Data Type</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody onClick={this.setFocus}>\r\n                {this.makeFields(fields)}\r\n                </tbody>\r\n            </table>\r\n\r\n            {modal ? <SupportModalWindow data={dataForModal} save={this.save}/> : null}\r\n        </div>);\r\n    }\r\n\r\n    setFocus = (e) => {\r\n        let closestTR = e.target.closest('.type-field');\r\n        let element = closestTR.querySelector('.type-field-name');\r\n        if (element) {\r\n            if (this.state.fields.length > 0) {\r\n\r\n                let copyFields = _.cloneDeep(this.state.fields);\r\n                //reset focus\r\n                copyFields.forEach(el => {\r\n                    if (el.focus) {\r\n                        delete el.focus;\r\n                    }\r\n                })\r\n\r\n                let index = this.state.fields.findIndex(el => el.name === element.innerHTML);\r\n                copyFields[index].focus = true;\r\n\r\n                this.setState(() => {\r\n                    return {fields: copyFields, indexFocusElement: index}\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    save = (object) => {\r\n        if (object) {\r\n            let newArrayFields = []\r\n            let {fields, indexFocusElement} = this.state;\r\n            if (fields.length > 0) {\r\n                newArrayFields = _.cloneDeep(fields);\r\n            }\r\n            let copyChanged;\r\n            if (this.state.process === 'editing') {\r\n                // edit field\r\n                if (this.state.action === 'edit') {\r\n                    copyChanged = _.cloneDeep(this.state.changed);\r\n\r\n                    let findNewField = copyChanged.findIndex(el => {\r\n                            if (el.add) {\r\n                                return el.add.name === newArrayFields[indexFocusElement].name\r\n                            }\r\n                        }\r\n                    );\r\n                    if (findNewField > -1) {\r\n                        copyChanged[findNewField] = {add: object};\r\n                    } else {\r\n\r\n                        // {changeOriginal : [origin type, previously type]}\r\n                        let findOrigin = copyChanged.findIndex(el => {\r\n                                if (el.changeOriginal) {\r\n                                    return el.changeOriginal[1].name === newArrayFields[indexFocusElement].name\r\n                                }\r\n                            }\r\n                        );\r\n                        if (findOrigin > -1) {\r\n                            copyChanged[findOrigin].changeOriginal[1] = object;\r\n                        } else {\r\n                            copyChanged.push({\r\n                                changeOriginal: [newArrayFields[indexFocusElement],\r\n                                    object]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                newArrayFields[indexFocusElement] = object;\r\n            } else {\r\n                //add field\r\n\r\n                if (this.state.action === 'edit') {\r\n                    copyChanged = _.cloneDeep(this.state.changed);\r\n                    copyChanged.push({add: object})\r\n                }\r\n\r\n                newArrayFields.push(object)\r\n            }\r\n            if (this.state.action === 'edit') {\r\n                this.setState(() => {\r\n                    return {fields: newArrayFields, modal: false, indexFocusElement: -1, changed: copyChanged,}\r\n                })\r\n            } else {\r\n                this.setState(() => {\r\n                    return {fields: newArrayFields, modal: false, indexFocusElement: -1}\r\n                })\r\n            }\r\n\r\n        } else {\r\n            this.setState(() => {\r\n                return {modal: false}\r\n            })\r\n        }\r\n    }\r\n\r\n    makeFields = (elements) => {\r\n\r\n        if (elements.length !== 0) {\r\n\r\n            return elements.map((element, i) => {\r\n\r\n                if (element.focus) {\r\n                    return (\r\n                        <tr className={'type-field'} style={{backgroundColor: '#91dca2'}}>\r\n                            <td className={'type-field-name'}>{element.name}</td>\r\n                            <td>{element.type}</td>\r\n                        </tr>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <tr className={'type-field'}>\r\n                            <td className={'type-field-name'}>{element.name}</td>\r\n                            <td>{element.type}</td>\r\n                        </tr>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    applyType = () => {\r\n        let {nameType, fields, changed} = this.state;\r\n        if (this.props.element.action === 'create') {\r\n            this.props.saveContent({nameType, fields, path: this.props.element.name, action: 'create'})\r\n        }\r\n        if (this.props.element.action === 'edit') {\r\n            this.props.saveContent({nameType, changed, path: this.props.element.name, action: 'edit'})\r\n            this.setState(() => {\r\n                return {changed: []}\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    addType = () => {\r\n        let excludes = [];\r\n        if (this.state.fields.length > 0) {\r\n            this.state.fields.forEach(element => {\r\n                excludes.push(element.name)\r\n            })\r\n        }\r\n\r\n        let data = {\r\n            title: 'New Field',\r\n            field: '',\r\n            type: '',\r\n            excludesNames: excludes,\r\n            action: this.props.element.action\r\n        }\r\n        this.setState(() => {\r\n            return {modal: true, dataForModal: data, process: 'adding'}\r\n        })\r\n    }\r\n\r\n    editType = () => {\r\n        let {indexFocusElement, fields} = this.state;\r\n        if (indexFocusElement > -1) {\r\n            let field = fields[indexFocusElement];\r\n            let excludes = [];\r\n\r\n            fields.forEach((element, i) => {\r\n                if (i !== indexFocusElement) {\r\n                    excludes.push(element.name)\r\n                }\r\n            })\r\n\r\n            let data = {\r\n                title: 'Edit Field',\r\n                field: field.name,\r\n                type: field.type,\r\n                excludesNames: excludes,\r\n                action: this.props.element.action\r\n            }\r\n            this.setState(() => {\r\n                return {modal: true, dataForModal: data, process: 'editing'}\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteType = () => {\r\n        if (this.state.indexFocusElement > -1) {\r\n            let cloneDeep = _.cloneDeep(this.state.fields);\r\n            let newFields = cloneDeep.slice();\r\n            newFields.splice(this.state.indexFocusElement, 1);\r\n\r\n            this.setState(() => {\r\n                return {fields: newFields, indexFocusElement: -1}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nclass SupportModalWindow extends Component {\r\n    state = {\r\n        title: 'New Field',\r\n        field: '',\r\n        type: '',\r\n        excludesNames: [],\r\n        warn: '',\r\n        action: ''\r\n    }\r\n\r\n\r\n    setWarn(value) {\r\n        this.setState(() => {\r\n            return {\r\n                warn: <span style={{color: \"red\"}}> this name already uses </span>,\r\n                field: value\r\n            }\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super();\r\n        try {\r\n            this.state = {\r\n                title: props.data.title ? props.data.title : '',\r\n                field: props.data.field ? props.data.field : '',\r\n                type: props.data.type ? props.data.type : '',\r\n                excludesNames: props.data.excludesNames ? props.data.excludesNames : [],\r\n                warn: '',\r\n                action: props.data.action ? props.data.action : ''\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        $('#support-modal').modal('show');\r\n    }\r\n\r\n    onChange = (e) => {\r\n        if (e.target) {\r\n            try {\r\n                let value = e.target.value;\r\n                if (e.target.className === 'nameField') {\r\n                    if (this.state.excludesNames.includes(value)) {\r\n                        this.setWarn(value)\r\n                    } else {\r\n                        let newState = {field: value}\r\n                        if (this.state.warn !== '') {\r\n                            newState.warn = ''\r\n                        }\r\n                        this.setState(() => {\r\n                            return newState\r\n                        })\r\n                    }\r\n\r\n                } else {\r\n                    this.setState(() => {\r\n                        return {type: value}\r\n                    })\r\n                }\r\n            } catch (e) {\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let {field, type, warn, action, title} = this.state;\r\n\r\n        let isdisAbledInput = (action === 'edit' && title === 'Edit Field') ||\r\n            (action === 'edit' && title === 'New Field' && field === '')\r\n\r\n        let isDisableOkButton = type === '' || warn !== '' || field === '';\r\n        return (\r\n            <div className=\"modal fade\" id=\"support-modal\" data-backdrop=\"static\" data-keyboard=\"false\"\r\n                 tabIndex=\"-1\"\r\n                 role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"staticBackdropLabel\">{title}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                                    onClick={() => this.saveField()}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\" onChange={this.onChange}>\r\n\r\n                            <div><span>Field name</span> <input className={'nameField'} value={field}\r\n                            />{warn}</div>\r\n                            <div><span style={{float: 'left'}}>Type</span>\r\n\r\n                                <select className=\"custom-select mr-sm-2\" disabled={isdisAbledInput}>\r\n                                    {this.getSelectList(type)}\r\n                                </select>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\"\r\n                                    onClick={() => this.saveField()}>Cancel\r\n                            </button>\r\n                            <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\"\r\n                                    disabled={isDisableOkButton}\r\n                                    onClick={() => this.saveField('save')}>OK\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    saveField = (e) => {\r\n        if (e) {\r\n            let newField = {name: this.state.field, type: this.state.type}\r\n            this.props.save(newField)\r\n        } else {\r\n            this.props.save()\r\n        }\r\n\r\n    }\r\n\r\n    getSelectList = (type) => {\r\n        //todo: include custom type from system_schema.types SET LIST MAP NEED ANOTHER\r\n        const types = ['', 'ascii', 'bigint', 'blob', 'boolean', 'counter', 'date', 'decimal',\r\n            'double', 'duration', 'float', 'inet', 'int',\r\n            'smallint', 'text', 'time', 'timestamp', 'timeuuid', 'tinyint', 'tuple',\r\n            'uuid', 'varchar', 'varint']\r\n\r\n\r\n        let index = types.findIndex(element => element === type.toLowerCase());\r\n\r\n        return types.map((element, i) => {\r\n            if (i === index) {\r\n                return (<option selected>{element}</option>);\r\n            } else {\r\n                return (<option>{element}</option>);\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n}\r\n\r\n","import React, {Component} from \"react\";\r\nimport {ContentState, Editor, EditorState} from \"draft-js\";\r\nimport {faCheck} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {UserFunction as UF} from \"../../protobuffer/compiled.js\"\r\nimport styles from './user-function.css';\r\n\r\nexport default class UserFunction extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        if (props.element) {\r\n\r\n            this.state = {\r\n                editorState: EditorState.createWithContent(ContentState.createFromText(props.element.viewFunction)),\r\n                warn: '',\r\n                showButtopApply: props.element.action !== 'create',\r\n            };\r\n\r\n            this.onChange = (editorState) => {\r\n\r\n                this.setState(() => {\r\n                    return {editorState}\r\n                });\r\n\r\n            }\r\n\r\n            this.setEditor = (editor) => {\r\n                this.editor = editor;\r\n            };\r\n            this.focusEditor = () => {\r\n                if (this.editor) {\r\n                    this.editor.focus();\r\n                }\r\n            };\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.focusEditor();\r\n    }\r\n\r\n\r\n    validateAndMakeFunction = (text) => {\r\n        // analize user function\r\n        text = text.toLowerCase();\r\n\r\n        // remove double spaces\r\n        text = text.replace(/\\s{2,}/g, ' ')\r\n        text = text.replace(/\\s\\n/g, '\\n')\r\n\r\n        let match = text.matchAll(/(create){1}[\\s\\n]?(or[\\s\\n]replace)?[\\s\\n]+(function){1}[\\s\\n]?(if[\\s\\n]not[\\s\\n]exists)?[\\s\\n]+([^\\s\\n]+)[\\s\\n]*(\\(.*?\\)[\\s\\n])(returns[\\s\\n]null|called)([\\s\\n]on[\\s\\n]null[\\s\\n]input[\\s\\n]returns[\\s\\n])([^\\s\\n]+)([\\s\\n]language[\\s\\n])([^\\s\\n]+)[\\s\\n](as[\\s\\n])('.+')/g);\r\n\r\n        match = Array.from(match);\r\n        if (match.length === 0) {\r\n            this.setState(() => {\r\n                return {\r\n                    warn: <span style={{color: \"red\", marginLeft: 20}}>Function not valid. Please change it! </span>\r\n                }\r\n            })\r\n        } else {\r\n\r\n            if (match[0][2] && match[0][4]) {\r\n                this.setState(() => {\r\n                    return {warn: <span style={{color: \"red\", marginLeft: 20}}> OR REPLACE and IF NOT EXISTS cannot be used together. Please change it! </span>}\r\n                })\r\n            }\r\n\r\n            let parameterFunction = match[0][6];\r\n\r\n\r\n            let signature = parameterFunction.replace(/\\((.*)\\)/g, '$1');\r\n            signature = signature.trim();\r\n\r\n            const name = match[0][5];\r\n            const orReplace = !(match[0][2] === undefined);\r\n\r\n            const ifNotExist = !(match[0][4] === undefined);\r\n            const calledOnNullInput = match[0][7].indexOf('called') !== -1;\r\n            const returnType = match[0][9];\r\n            const language = match[0][11];\r\n            const body = match[0][13];\r\n            const keyspace = this.props.element.name.split('.')[1]\r\n            const connection = this.props.element.name.split('.')[0]\r\n\r\n            let finish = UF.encode(UF.create({\r\n                connection,\r\n                name, keyspace,\r\n                orReplace, ifNotExist, returnType,\r\n                calledOnNullInput,\r\n                language, body, signature\r\n            })).finish();\r\n\r\n            this.props.saveContent(finish)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let {warn, editorState, showButtopApply} = this.state;\r\n        return (<>\r\n                <button type=\"button\" className=\"btn btn-outline-success\"\r\n                        disabled={showButtopApply}\r\n                        onClick={() => this.validateAndMakeFunction(editorState.getCurrentContent().getPlainText())}>\r\n                    <FontAwesomeIcon\r\n                        icon={faCheck}/></button>\r\n                {warn}\r\n                <div style={styles.root} onClick={this.focusEditor}>\r\n                    <Editor\r\n                        customStyleMap={styles.editor}\r\n                        ref={this.setEditor}\r\n                        editorState={editorState}\r\n                        onChange={this.onChange}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n","import AggregateFunction from \"./aggregate-function\";\r\n\r\nexport default AggregateFunction;","import React, {useEffect, useState} from \"react\";\r\nimport {ContentState, Editor, EditorState} from \"draft-js\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {AggregateFunction as AGF} from \"../../protobuffer/compiled\";\r\nimport styles from './aggregate-function.css'\r\n\r\nconst AggregateFunction = ({element, saveContent}) => {\r\n\r\n\r\n    const [editorState, setEditorState] = useState(() => EditorState.createWithContent(ContentState.createFromText(element.viewFunction)));\r\n    let [warn, setWarn] = useState('')\r\n    let [showButtonApply, setShowButtonApply] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        if (element.action !== 'create') {\r\n            setShowButtonApply(true)\r\n        }\r\n    }, [element])\r\n\r\n\r\n    const validateAndMakeFunction = (text) => {\r\n        try {\r\n            // analize user function\r\n            text = text.toLowerCase();\r\n\r\n\r\n            // remove double spaces\r\n            text = text.replace(/\\s{2,}/g, ' ')\r\n            text = text.replace(/\\s\\n/g, '\\n')\r\n\r\n            let match = text.matchAll(/(create){1}[\\s\\n]?(or[\\s\\n]+replace)?[\\s\\n]+(aggregate){1}[\\s\\n]?(if[\\s\\n]+not[\\s\\n]+exists)?[\\s\\n]+([^\\s\\n]+)[\\s\\n]*(\\(.*?\\))[\\s\\n]+(sfunc){1}[\\s\\n]+([^\\s\\n]+)[\\s\\n]+(stype)[\\s\\n]+([^\\s\\n]+)([\\s\\n]+finalfunc[\\s\\n]+[^\\s\\n]+)?([\\s\\n]+initcond[\\s\\n]+[^\\s\\n;]+)?/g);\r\n\r\n            match = Array.from(match);\r\n            if (match.length === 0) {\r\n                setWarn(() => (\r\n                    <span style={{color: \"red\", marginLeft: 20}}>Function not valid. Please change it! </span>))\r\n            } else {\r\n\r\n                if (match[0][2] && match[0][4]) {\r\n                    setWarn(() => (\r\n                        <span style={{color: \"red\", marginLeft: 20}}> OR REPLACE and IF NOT EXISTS cannot be used together. Please change it! </span>))\r\n                }\r\n\r\n                let parameterFunction = match[0][6];\r\n\r\n\r\n                let signature = parameterFunction.replace(/\\((.*)\\)/g, '$1');\r\n                signature = signature.trim();\r\n\r\n                const name = match[0][5];\r\n                const orReplace = !(match[0][2] === undefined);\r\n\r\n\r\n                const sFunc = match[0][8];\r\n                const sType = match[0][10];\r\n                const finalFunc = match[0][11] === undefined ? '' : match[0][11];\r\n                const initCond = match[0][12] === undefined ? '' : match[0][12].split('\\(\\)')[1];\r\n                const keyspace = element.name.split('.')[1]\r\n                const connection = element.name.split('.')[0]\r\n\r\n\r\n                let userFunction = AGF.create({\r\n                    connection,\r\n                    name, keyspace,\r\n                    orReplace, sFunc, sType,\r\n                    finalFunc,\r\n                    initCond, signature\r\n                })\r\n                let finish = AGF.encode(userFunction).finish();\r\n                saveContent(finish)\r\n\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n\r\n    return ((<>\r\n            <button type=\"button\" className=\"btn btn-outline-success\"\r\n                    disabled={showButtonApply}\r\n                    onClick={() => validateAndMakeFunction(editorState.getCurrentContent().getPlainText())}\r\n            >\r\n                <FontAwesomeIcon\r\n                    icon={faCheck}/></button>\r\n            {warn}\r\n            <div style={styles.root}>\r\n                <Editor\r\n                    customStyleMap={styles.editor}\r\n                    editorState={editorState}\r\n                    onChange={setEditorState}\r\n                />\r\n            </div>\r\n        </>\r\n    ))\r\n}\r\n\r\n\r\nexport default AggregateFunction;","import MaterializedView from \"./materialized-view\";\r\n\r\nexport default MaterializedView;","import React, {useEffect, useState} from \"react\";\r\nimport {ContentState, Editor, EditorState} from \"draft-js\";\r\nimport {MateriliazedView as MV} from \"../../protobuffer/compiled\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck} from \"@fortawesome/free-solid-svg-icons\";\r\nimport styles from './materialized-view.css';\r\n\r\nconst MaterializedView = ({element, saveContent}) => {\r\n\r\n\r\n    const [editorState, setEditorState] = useState(() => EditorState.createWithContent(ContentState.createFromText(element.viewFunction)));\r\n    let [warn, setWarn] = useState('')\r\n    let [showButtopApply, setShowButtopApply] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        if (element.action !== 'create') {\r\n            setShowButtopApply(true)\r\n        }\r\n    }, [element])\r\n\r\n\r\n    const validateAndMakeFunction = (text) => {\r\n        // analize user function\r\n        text = text.toLowerCase();\r\n\r\n\r\n        // remove double spaces\r\n        text = text.replace(/\\s{2,}/g, ' ')\r\n        text = text.replace(/\\s\\n/g, '\\n')\r\n\r\n        let match = text.matchAll(/create[\\s\\n]+materialized[\\s\\n]+view[\\s\\n]+([a-zA-Z_0-9]+)[\\s\\n]+as[\\s\\n]+select[\\s\\n]+(.*)[\\s\\n]+from[\\s\\n]+([^\\s\\n]+)[\\s\\n]+where[\\s\\n]?(^(and)$)?[\\s\\n]+(([\\s\\n]+and[\\s\\n]+)??[^\\s\\n]+[\\s\\n]+is[\\s\\n]+not[\\s\\n]+null)+[\\s\\n]+primary[\\s\\n]key[\\s\\n]+([\\s\\n]?\\(.*\\)){1}([\\s\\n]+with[\\s\\n]+(.*)+)?/g);\r\n\r\n        match = Array.from(match);\r\n        if (match.length === 0) {\r\n            setWarn(() => (<span style={{color: \"red\", marginLeft: 20}}>Function not valid. Please change it! </span>))\r\n        } else {\r\n            const nameView = match[0][1];\r\n            const select = match[0][2];\r\n            const baseTable = match[0][3];\r\n            let primaryKeyNames = match[0][8].replace(/\\((.*)\\)/g, '$1');\r\n            const option = match[0][9];\r\n\r\n            const connection = element.name.split('.')[0];\r\n            const nameKeySpace = element.name.split('.')[1];\r\n\r\n\r\n            if(primaryKeyNames){\r\n                if(primaryKeyNames.includes(\",\")){\r\n                    primaryKeyNames = primaryKeyNames.split(\",\");\r\n                }\r\n            }\r\n\r\n            let includesAllColumns;\r\n            if(select.trim().includes(\"*\")){\r\n                includesAllColumns = true;\r\n            }\r\n\r\n\r\n            let message = MV.create({name:nameView,select,baseTable,primaryKeyNames,option,connection,nameKeySpace,includesAllColumns});\r\n\r\n            let envelope = MV.encode(message).finish();\r\n\r\n            saveContent(envelope);\r\n        }\r\n    }\r\n\r\n\r\n    return ((<>\r\n            <button type=\"button\" className=\"btn btn-outline-success\"\r\n                    disabled={showButtopApply}\r\n                onClick={() => validateAndMakeFunction(editorState.getCurrentContent().getPlainText())}\r\n            >\r\n                <FontAwesomeIcon\r\n                    icon={faCheck}/></button>\r\n            {warn}\r\n            <div style={styles.root}>\r\n                <Editor\r\n                    customStyleMap={styles.editor}\r\n                    editorState={editorState}\r\n                    onChange={setEditorState}\r\n\r\n                />\r\n            </div>\r\n        </>\r\n    ))\r\n}\r\n\r\n\r\nexport default MaterializedView;","import CqlEditor from \"./cql-editor\";\r\n\r\nexport default CqlEditor;","import React, {useEffect, useRef, useState} from \"react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport {ContentState, Editor, EditorState} from \"draft-js\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faChevronCircleRight} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Service from \"../service/service\";\r\nimport {Rows} from '../../protobuffer/compiled'\r\nimport {AutoSizer, Grid, CellMeasurerCache, CellMeasurer} from \"react-virtualized\";\r\nimport styles from './cql-editor.css';\r\n\r\nconst CqlEditor = ({element}) => {\r\n\r\n    const service = new Service();\r\n\r\n    const [editorState, setEditorState] = useState(() => EditorState.createWithContent(ContentState.createFromText(element.content ? element.content : '')));\r\n    const [connection] = useState(element.connection);\r\n    const [rows, setRows] = useState([]);\r\n    const [result, setResult] = useState(null);\r\n    const [columnCount, setColumnCount] = useState(0);\r\n    const _cache = useRef(new CellMeasurerCache({\r\n        defaultWidth: 100,\r\n        fixedHeight: true,\r\n    }))\r\n\r\n\r\n    const executeQuery = () => {\r\n\r\n        let query = {query: editorState.getCurrentContent().getPlainText(), connection}\r\n        service.executeQuery(query).then(result => {\r\n\r\n            if (result instanceof ArrayBuffer) {\r\n\r\n                let uint8View = new Uint8Array(result);\r\n\r\n                let rows = Rows.decode(uint8View).rows;\r\n\r\n                let ar = [];\r\n                rows.map(item => {\r\n                    try {\r\n                        let parse = JSON.parse(item);\r\n                        ar.push(parse)\r\n                    } catch (e) {\r\n                        ar.push(item)\r\n                    }\r\n\r\n                })\r\n\r\n                setRows(() => {\r\n                    return ar\r\n                })\r\n\r\n\r\n                setColumnCount(() => {\r\n                    return ar[0].length\r\n                })\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n        }).catch(e => {\r\n            console.log(e)\r\n        })\r\n    }\r\n\r\n\r\n    const _cellRenderer = ({columnIndex, key, parent, rowIndex, style}) => {\r\n\r\n        return (\r\n            <CellMeasurer\r\n                cache={_cache.current}\r\n                columnIndex={columnIndex}\r\n                key={key}\r\n                parent={parent}\r\n                rowIndex={rowIndex}>\r\n                <div\r\n                    className={'evenRow cell'}\r\n                    style={{\r\n                        ...style,\r\n                        height: 35,\r\n                        whiteSpace: 'nowrap',\r\n                    }}>\r\n                    {rows[rowIndex][columnIndex]}\r\n                </div>\r\n            </CellMeasurer>\r\n        );\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (rows.length > 0 && columnCount > 0) {\r\n\r\n            setResult(() => {\r\n                return (\r\n                    <AutoSizer disableHeight>\r\n                        {({width}) => (\r\n                            <Grid\r\n                                className={'BodyGrid'}\r\n                                columnCount={columnCount}\r\n                                columnWidth={_cache.current.columnWidth}\r\n                                deferredMeasurementCache={_cache.current}\r\n                                height={350}\r\n                                overscanColumnCount={0}\r\n                                overscanRowCount={2}\r\n                                cellRenderer={_cellRenderer}\r\n                                rowCount={rows.length}\r\n                                rowHeight={35}\r\n                                width={width}\r\n                            />\r\n                        )}\r\n                    </AutoSizer>\r\n                )\r\n            })\r\n\r\n        } else {\r\n            if (result !== null)\r\n                setResult(() => null)\r\n        }\r\n    }, [rows, columnCount])\r\n\r\n\r\n    return (\r\n        <SplitPane split=\"horizontal\" minSize={150}>\r\n            <div className={'root'} style={styles.root}>\r\n                <button data-placement=\"bottom\" onClick={executeQuery}\r\n                        type=\"button\" className={\"btn btn-primary\"}><FontAwesomeIcon\r\n                    icon={faChevronCircleRight}/></button>\r\n                <Editor\r\n                    className={'editor'}\r\n                    customStyleMap={styles.editor}\r\n                    editorState={editorState}\r\n                    onChange={setEditorState}\r\n                    placeholder=\"Enter query ...\"/>\r\n            </div>\r\n            {result}\r\n        </SplitPane>\r\n    );\r\n\r\n}\r\n\r\nexport default CqlEditor;\r\n\r\n\r\n\r\n","export const guidGenerator = () =>  {\r\n    let S4 = function () {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\r\n}\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faPlusCircle, faEdit, faTrashAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {guidGenerator} from '../utils/utils'\r\nimport * as _ from \"lodash\";\r\nimport {Table as TableProtobuf} from '../../protobuffer/compiled'\r\nimport './table.css';\r\n\r\nconst $ = window.$\r\n\r\nconst Table = ({element, saveContent}) => {\r\n\r\n    const [focusTab, setFocusTab] = useState('');\r\n    const [id, setId] = useState('');\r\n    const [action, setAction] = useState('');\r\n    const [indexFocusElement, setIndexFocusElement] = useState(-1);\r\n    // const [indexFocusTrigger, setIndexFocusTrigger] = useState(-1);\r\n    const [indexFocusIndex, setIndexFocusIndex] = useState(-1);\r\n    const [properties, setProperties] = useState('');\r\n    const [nameTable, setNameTable] = useState('');\r\n    const [columns, setColumns] = useState([]);\r\n    // const [triggers, setTriggers] = useState([]);\r\n    const [indices, setIndices] = useState([]);\r\n\r\n    const [data, setData] = useState('');\r\n    const [changedOptions, setChangedOptions] = useState([]);\r\n    const [indexsForChanged, setIndexsForChanged] = useState([]);\r\n    const [changedColumns, setchangedColumns] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setAction(element.action)\r\n        setId(guidGenerator());\r\n        if (element.action === 'edit') {\r\n            if (element.table) {\r\n                setNameTable(() => {\r\n                    return element.table.name\r\n                })\r\n                if (element.table.columns) {\r\n                    setColumns(() => {\r\n                        return element.table.columns\r\n                    })\r\n                }\r\n                if (element.table.indices) {\r\n\r\n                    let filter = element.table.indices.map((item) => {\r\n                        if (item.name !== undefined) {\r\n                            return item\r\n                        }\r\n                    }).filter(item => item !== undefined);\r\n                    setIndices(() => {\r\n                        return filter\r\n                    })\r\n                }\r\n                if (element.table.options) {\r\n\r\n                    let options = Object.keys(element.table.options).map((key) => {\r\n                        if (key !== 'rotation' && key !== 'id_tree_item' && key !== 'id_presentation') {\r\n                            return {name: key, value: element.table.options[key]}\r\n                        }\r\n                    }).filter(item => item !== undefined);\r\n                    setProperties(() => {\r\n                        return options\r\n                    })\r\n                }\r\n            }\r\n\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        $(`#prop-tab${id}`).tab('show');\r\n    }, [id])\r\n\r\n\r\n    const onChangeOption = (e) => {\r\n\r\n\r\n        let closestTR = e.target.closest('.option_element');\r\n        let element = closestTR.querySelector('.name_option');\r\n\r\n        let nameOption = element.innerHTML;\r\n        let cloneProperties = _.cloneDeep(properties);\r\n\r\n        let index = cloneProperties.findIndex(el => el.name === nameOption);\r\n\r\n        let changedValue = e.target.value;\r\n        let originValue = properties[index].value;\r\n\r\n        originValue = originValue.replace(/\\s{2,}/g, ' ').trim();\r\n        changedValue = changedValue.replace(/\\s{2,}/g, ' ').trim();\r\n\r\n\r\n        if (changedValue !== originValue) {\r\n            let cloneChangedOptions = _.cloneDeep(changedOptions);\r\n            if (changedOptions.length !== 0) {\r\n\r\n                let number = cloneChangedOptions.findIndex(element => element.name === nameOption);\r\n                if (number > -1) {\r\n                    if (cloneChangedOptions[number].originValue === changedValue) {\r\n                        cloneChangedOptions.splice(number, 1);\r\n                    } else {\r\n                        cloneChangedOptions[number] = {\r\n                            ...cloneChangedOptions[number],\r\n                            name: nameOption,\r\n                            value: changedValue\r\n                        };\r\n                    }\r\n                    setChangedOptions(() => {\r\n                        return cloneChangedOptions\r\n                    })\r\n                } else {\r\n                    cloneChangedOptions.push({name: nameOption, value: changedValue, originValue})\r\n                    setChangedOptions(() => {\r\n                        return cloneChangedOptions\r\n                    })\r\n                }\r\n            } else {\r\n                cloneChangedOptions.push({name: nameOption, value: changedValue, originValue})\r\n                setChangedOptions(() => {\r\n                    return cloneChangedOptions\r\n                })\r\n            }\r\n            cloneProperties[index] = {name: nameOption, value: changedValue}\r\n            setProperties(() => {\r\n                return cloneProperties\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    const setDisabledOption = () => {\r\n        let result = {apply: false, add: false, edit: false, delete: false}\r\n\r\n        if (!nameTable || columns.length === 0) {\r\n            result.apply = true;\r\n        }\r\n        if (columns.length === 0) {\r\n            result.edit = true;\r\n            result.delete = true;\r\n        }\r\n\r\n        if (focusTab === 'indices') {\r\n            if (columns.length === 0) {\r\n                result.add = true;\r\n            }\r\n            if (indices.length === 0) {\r\n                result.delete = true;\r\n            }\r\n        }\r\n        // if (focusTab === 'triggers') {\r\n        //     if (triggers.length === 0) {\r\n        //         result.delete = true;\r\n        //     }\r\n        // }\r\n        return result;\r\n    }\r\n\r\n    const setActiveTab = (focusTab) => {\r\n        setFocusTab(() => {\r\n            return focusTab\r\n        });\r\n    }\r\n    const setFocus = (e) => {\r\n        if (focusTab === 'columns') {\r\n            let closestTR = e.target.closest('.column_element');\r\n            let element = closestTR.querySelector('.name_element');\r\n            if (element) {\r\n                if (columns.length > 0) {\r\n\r\n                    let copyColumns = _.cloneDeep(columns);\r\n                    //reset focus\r\n                    copyColumns.forEach(el => {\r\n                        if (el.focus) {\r\n                            delete el.focus;\r\n                        }\r\n                    })\r\n\r\n                    let index = copyColumns.findIndex(el => el.name === element.innerHTML);\r\n                    copyColumns[index].focus = true;\r\n\r\n                    setColumns(() => {\r\n                        return copyColumns\r\n                    })\r\n                    setIndexFocusElement(() => {\r\n                        return index\r\n                    })\r\n\r\n                }\r\n            }\r\n        }\r\n        // if (focusTab === 'triggers') {\r\n        //     let closestTR = e.target.closest('.indices_element');\r\n        //     let element = closestTR.querySelector('.name_trigger');\r\n        //     if (element) {\r\n        //         if (triggers.length > 0) {\r\n        //\r\n        //             let copyTriggers = _.cloneDeep(triggers);\r\n        //             //reset focus\r\n        //             copyTriggers.forEach(el => {\r\n        //                 if (el.focus) {\r\n        //                     delete el.focus;\r\n        //                 }\r\n        //             })\r\n        //\r\n        //             let index = copyTriggers.findIndex(el => el.name === element.innerHTML);\r\n        //             copyTriggers[index].focus = true;\r\n        //\r\n        //             setTriggers(() => {\r\n        //                 return copyTriggers\r\n        //             })\r\n        //             setIndexFocusTrigger(() => {\r\n        //                 return index\r\n        //             })\r\n        //\r\n        //         }\r\n        //     }\r\n        // }\r\n        if (focusTab === 'indices') {\r\n            let closestTR = e.target.closest('.indices_element');\r\n            let element = closestTR.querySelector('.name_index');\r\n            if (element) {\r\n                if (indices.length > 0) {\r\n\r\n                    let copyIndices = _.cloneDeep(indices);\r\n                    //reset focus\r\n                    copyIndices.forEach(el => {\r\n                        if (el.focus) {\r\n                            delete el.focus;\r\n                        }\r\n                    })\r\n\r\n                    let index = copyIndices.findIndex(el => el.name === element.innerHTML);\r\n                    copyIndices[index].focus = true;\r\n\r\n                    setIndices(() => {\r\n                        return copyIndices\r\n                    })\r\n                    setIndexFocusIndex(() => {\r\n                        return index\r\n                    })\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    const saveData = (data) => {\r\n        if (data) {\r\n            if (focusTab === 'columns') {\r\n                let newArrayColumns = []\r\n\r\n                if (columns.length > 0) {\r\n                    newArrayColumns = _.cloneDeep(columns);\r\n                }\r\n\r\n                if (data.process === 'adding') {\r\n                    newArrayColumns.push(data)\r\n                    if (element.action === 'edit') {\r\n                        let cloneChangedColumns = _.cloneDeep(changedColumns);\r\n                        if (cloneChangedColumns.length > 0) {\r\n\r\n                            let number = cloneChangedColumns.findIndex(item => item.add !== undefined);\r\n\r\n                            if (number > -1) {\r\n                                cloneChangedColumns[number].add.push(data)\r\n\r\n                            } else {\r\n                                cloneChangedColumns.push({add: [data]})\r\n                            }\r\n                        } else {\r\n                            cloneChangedColumns.push({add: [data]})\r\n                        }\r\n                        setchangedColumns(() => {\r\n                            return cloneChangedColumns\r\n                        })\r\n                    }\r\n                }\r\n                if (data.process === 'editing') {\r\n\r\n\r\n                    let nameOrigin = newArrayColumns[indexFocusElement].name;\r\n                    newArrayColumns[indexFocusElement] = data\r\n                    setIndexFocusElement(() => {\r\n                        return -1\r\n                    })\r\n\r\n\r\n                    if (element.action === 'edit') {\r\n                        let cloneChangedColumns = _.cloneDeep(changedColumns);\r\n                        if (cloneChangedColumns.length > 0) {\r\n\r\n                            let number = cloneChangedColumns.findIndex(item => item.rename !== undefined);\r\n\r\n                            if (number > -1) {\r\n                                let findExistsIndex = cloneChangedColumns[number].rename.findIndex(item => item.to === nameOrigin);\r\n\r\n                                if (findExistsIndex > -1) {\r\n                                    if (cloneChangedColumns[number].rename[findExistsIndex].from === data.name) {\r\n                                        cloneChangedColumns[number].rename.splice(findExistsIndex, 1);\r\n                                    } else {\r\n                                        cloneChangedColumns[number].rename[findExistsIndex] = {\r\n                                            ...cloneChangedColumns[number].rename[findExistsIndex],\r\n                                            to: data.name\r\n                                        };\r\n                                    }\r\n\r\n                                } else {\r\n                                    cloneChangedColumns[number].rename.push({from: nameOrigin, to: data.name})\r\n                                }\r\n\r\n                            } else {\r\n                                cloneChangedColumns.push({rename: [{from: nameOrigin, to: data.name}]})\r\n                            }\r\n                        } else {\r\n                            cloneChangedColumns.push({rename: [{from: nameOrigin, to: data.name}]})\r\n                        }\r\n                        setchangedColumns(() => {\r\n                            return cloneChangedColumns\r\n                        })\r\n                    }\r\n                }\r\n\r\n\r\n                setColumns(() => {\r\n                    return newArrayColumns\r\n                })\r\n            }\r\n            // if (focusTab === 'triggers') {\r\n            //     let newArrayTriggers = []\r\n            //\r\n            //     if (triggers.length > 0) {\r\n            //         newArrayTriggers = _.cloneDeep(triggers);\r\n            //     }\r\n            //\r\n            //     if (indexFocusTrigger > -1) {\r\n            //         newArrayTriggers[indexFocusElement] = data\r\n            //         setIndexFocusTrigger(() => {\r\n            //             return -1\r\n            //         })\r\n            //     } else {\r\n            //         newArrayTriggers.push(data)\r\n            //     }\r\n            //\r\n            //\r\n            //     setTriggers(() => {\r\n            //         return newArrayTriggers\r\n            //     })\r\n            // }\r\n            if (focusTab === 'indices') {\r\n                let newArrayIndices = []\r\n\r\n                if (indices.length > 0) {\r\n                    newArrayIndices = _.cloneDeep(indices);\r\n                }\r\n                if (element.action === 'edit') {\r\n\r\n                    let cloneIndexsForChanged = _.cloneDeep(indexsForChanged);\r\n                    if (cloneIndexsForChanged.length > 0) {\r\n\r\n                        let index = cloneIndexsForChanged.findIndex(item => item.add !== undefined);\r\n\r\n                        if (index > -1) {\r\n                            cloneIndexsForChanged[index].add.push(data);\r\n\r\n                        } else {\r\n                            cloneIndexsForChanged.push({add: [data]})\r\n                        }\r\n\r\n                    } else {\r\n                        cloneIndexsForChanged.push({add: [data]})\r\n                    }\r\n                    setIndexsForChanged(() => {\r\n                        return cloneIndexsForChanged\r\n                    })\r\n                }\r\n\r\n                newArrayIndices.push(data)\r\n\r\n                setIndices(() => {\r\n                    return newArrayIndices\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n\r\n        setData(() => {\r\n            return ''\r\n        })\r\n\r\n    }\r\n    const showModal = (action) => {\r\n        if (focusTab === 'columns') {\r\n            if (action === 'add') {\r\n                addColumn();\r\n                $(`#columnsmodal${id}`).modal('show')\r\n            }\r\n            if (action === 'edit') {\r\n                editColumn();\r\n                if (indexFocusElement > -1)\r\n                    $(`#columnsmodal${id}`).modal('show')\r\n            }\r\n            if (action === 'delete') {\r\n                if (indexFocusElement > -1) {\r\n                    deleteColumn();\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        if (action === 'apply') {\r\n            if (element.action === 'create') {\r\n                let connectionAlias = element.name.split('.')[0];\r\n                let keyspace = element.name.split('.')[1];\r\n\r\n\r\n                indices.forEach(item => {\r\n                    item[keyspace] = keyspace\r\n                })\r\n\r\n                let message = TableProtobuf.create({name: nameTable, columns, indices, connectionAlias, keyspace});\r\n                let finish = TableProtobuf.encode(message).finish();\r\n                // todo: need think about it\r\n                saveContent({finish, action: 'create'})\r\n            }\r\n\r\n            if (element.action === 'edit') {\r\n                let connectionAlias = element.name.split('.')[0];\r\n                let keyspace = element.name.split('.')[1];\r\n\r\n                let objectForEdit = {\r\n                    nameTable,\r\n                    connectionAlias,\r\n                    keyspace,\r\n                    action: 'edit',\r\n                    changedOptions,\r\n                    changedColumns,\r\n                    indexsForChanged\r\n                }\r\n\r\n                saveContent(objectForEdit)\r\n            }\r\n\r\n\r\n        }\r\n\r\n        // if (focusTab === 'triggers') {\r\n        //     if (action === 'add') {\r\n        //         addTrigger();\r\n        //         $(`#triggersmodal${id}`).modal('show')\r\n        //     }\r\n        //\r\n        //     if (action === 'delete') {\r\n        //         if (indexFocusTrigger > -1)\r\n        //             deleteTrigger();\r\n        //     }\r\n        //\r\n        // }\r\n        if (focusTab === 'indices') {\r\n            if (action === 'add') {\r\n                addIndex();\r\n                $(`#indicesmodal${id}`).modal('show')\r\n            }\r\n\r\n            if (action === 'delete') {\r\n                if (indexFocusIndex > -1)\r\n                    deleteIndex();\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const addColumn = () => {\r\n        let excludes = [];\r\n        if (columns.length > 0) {\r\n            columns.forEach(element => {\r\n                excludes.push(element.name)\r\n            })\r\n        }\r\n\r\n        let data = {\r\n            title: 'New Column',\r\n            column: '',\r\n            type: '',\r\n            excludesNames: excludes,\r\n            action,\r\n            process: 'adding'\r\n        }\r\n\r\n        setData(() => {\r\n            return data\r\n        })\r\n\r\n    }\r\n    // const addTrigger = () => {\r\n    //\r\n    //     let data = {\r\n    //         title: 'New Trigger',\r\n    //         name: '',\r\n    //         clazz: '',\r\n    //         action: 'create'\r\n    //     }\r\n    //\r\n    //     setData(() => {\r\n    //         return data\r\n    //     })\r\n    //\r\n    // }\r\n    const addIndex = () => {\r\n\r\n        let excludes = [];\r\n        if (indices.length > 0) {\r\n            indices.forEach(element => {\r\n                excludes.push(element.name)\r\n            })\r\n        }\r\n\r\n        let namesColumn = columns.map(item => item.name);\r\n\r\n        let data = {\r\n            title: 'New Index',\r\n            name: '',\r\n            columnsName: namesColumn,\r\n            action: 'create',\r\n            excludes\r\n        }\r\n\r\n        setData(() => {\r\n            return data\r\n        })\r\n\r\n    }\r\n\r\n    const editColumn = () => {\r\n\r\n        if (indexFocusElement > -1) {\r\n            let excludes = [];\r\n            let column = columns[indexFocusElement];\r\n\r\n            columns.forEach((element, i) => {\r\n                if (i !== indexFocusElement) {\r\n                    excludes.push(element.name)\r\n                }\r\n            })\r\n\r\n            let action;\r\n            if (element.action === 'create') {\r\n                action = 'create'\r\n            } else {\r\n                action = 'edit'\r\n            }\r\n\r\n            let data = {...column, action, process: 'editing', title: 'Edit Column', excludesNames: excludes}\r\n\r\n            setData(() => {\r\n                return data\r\n            })\r\n\r\n        }\r\n    }\r\n    const deleteColumn = () => {\r\n\r\n        if (indexFocusElement > -1) {\r\n            let cloneColumns = _.cloneDeep(columns);\r\n            let cloneChangedColumns = _.cloneDeep(changedColumns);\r\n            let name = cloneColumns[indexFocusElement].name;\r\n            if (cloneChangedColumns.length > 0) {\r\n                let number = cloneChangedColumns.findIndex(item => item.add !== undefined);\r\n                if (number > -1) {\r\n                    let findIndex = cloneChangedColumns[number].add.findIndex(item => item.name === name);\r\n                    if (findIndex > -1) {\r\n                        cloneChangedColumns[number].add.splice(findIndex, 1);\r\n                    } else {\r\n                        let deleteIndex = cloneChangedColumns.findIndex(item => item.delete !== undefined);\r\n                        if (deleteIndex > -1) {\r\n                            cloneChangedColumns[deleteIndex].delete.push(name)\r\n                        } else {\r\n                            cloneChangedColumns.push({delete: [name]})\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    let deleteIndex = cloneChangedColumns.findIndex(item => item.delete !== undefined);\r\n                    if (deleteIndex > -1) {\r\n                        cloneChangedColumns[deleteIndex].delete.push(name)\r\n                    } else {\r\n                        cloneChangedColumns.push({delete: [name]})\r\n                    }\r\n                }\r\n            } else {\r\n                cloneChangedColumns.push({delete: [name]})\r\n            }\r\n\r\n            setchangedColumns(() => {\r\n                return cloneChangedColumns\r\n            })\r\n\r\n            let newColumns = cloneColumns.slice();\r\n            newColumns.splice(indexFocusElement, 1);\r\n\r\n            setColumns(() => {\r\n                return newColumns\r\n            })\r\n        }\r\n    }\r\n    // const deleteTrigger = () => {\r\n    //\r\n    //     if (indexFocusTrigger > -1) {\r\n    //         let cloneTriggers = _.cloneDeep(triggers);\r\n    //         let newTriggers = cloneTriggers.slice();\r\n    //         newTriggers.splice(indexFocusTrigger, 1);\r\n    //\r\n    //         setTriggers(() => {\r\n    //             return newTriggers\r\n    //         })\r\n    //     }\r\n    // }\r\n    const deleteIndex = () => {\r\n\r\n        if (indexFocusIndex > -1) {\r\n            let cloneIndices = _.cloneDeep(indices);\r\n            let nameIndex = cloneIndices[indexFocusIndex].name;\r\n            let cloneIndexsForChanged = _.cloneDeep(indexsForChanged);\r\n            let newIndices = cloneIndices.slice();\r\n\r\n            if (element.action === 'edit') {\r\n\r\n                let indexAdd = cloneIndexsForChanged.findIndex(item => item.add !== undefined);\r\n                if (indexAdd > -1) {\r\n                    let findIndex = cloneIndexsForChanged[indexAdd].add.findIndex(item => item.name === nameIndex)\r\n                    if (findIndex > -1) {\r\n                        cloneIndexsForChanged[indexFocusIndex].add.splice(findIndex, 1);\r\n                    } else {\r\n                        let indexDelete = cloneIndexsForChanged.findIndex(item => item.delete !== undefined);\r\n\r\n                        if (indexDelete > -1) {\r\n                            cloneIndexsForChanged[indexDelete].delete.push(nameIndex)\r\n                        } else {\r\n                            cloneIndexsForChanged.push({delete: [nameIndex]})\r\n                        }\r\n                    }\r\n                } else {\r\n                    let indexDelete = cloneIndexsForChanged.findIndex(item => item.delete !== undefined);\r\n\r\n                    if (indexDelete > -1) {\r\n                        cloneIndexsForChanged[indexDelete].delete.push(nameIndex)\r\n                    } else {\r\n                        cloneIndexsForChanged.push({delete: [nameIndex]})\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            setIndexsForChanged(() => {\r\n                return cloneIndexsForChanged\r\n            })\r\n\r\n            newIndices.splice(indexFocusIndex, 1);\r\n\r\n            setIndices(() => {\r\n                return newIndices\r\n            })\r\n        }\r\n    }\r\n    const close = () => {\r\n        setData(() => {\r\n            return ''\r\n        })\r\n    }\r\n\r\n    if (id === '') {\r\n        return null\r\n    } else {\r\n        return (<div>\r\n            <Buttons focus={focusTab} optionDisabled={setDisabledOption} runModal={showModal}/>\r\n            {focusTab === 'columns' ? <ColumnsModal id={id} data={data} saveData={saveData} close={close}/> :\r\n                focusTab === 'indices' ? <IndicesModal id={id} data={data} saveData={saveData} close={close}/> : null}\r\n            {/*focusTab === 'triggers' ?*/}\r\n            {/*    <TriggersModal id={id} data={data} saveData={saveData} close={close}/> : null}*/}\r\n            <div className={\"right-panel\"}>\r\n                <ul className=\"nav nav-tabs\" role=\"tablist\">\r\n                    <li className=\"nav-item\" role=\"presentation\">\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`prop-tab${id}`}\r\n                           data-toggle=\"tab\" href={`#prop${id}`} role=\"tab\"\r\n                           onClick={() => setActiveTab('properties')}\r\n                           aria-controls={`prop${id}`} aria-selected='false'>\r\n                            Properties\r\n                        </a>\r\n                    </li>\r\n                    <li className=\"nav-item\" role=\"presentation\">\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`columns-tab${id}`}\r\n                           data-toggle=\"tab\" href={`#columns${id}`} role=\"tab\"\r\n                           onClick={() => setActiveTab('columns')}\r\n                           aria-controls={`columns${id}`} aria-selected='false'>\r\n                            Columns\r\n                        </a>\r\n                    </li>\r\n                    <li className=\"nav-item\" role=\"presentation\">\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`indices-tab${id}`}\r\n                           data-toggle=\"tab\" href={`#indices${id}`} role=\"tab\"\r\n                           onClick={() => setActiveTab('indices')}\r\n                           aria-controls={`indices${id}`} aria-selected='false'>\r\n                            Indices\r\n                        </a>\r\n                    </li>\r\n                    {/*<li className=\"nav-item\" role=\"presentation\">*/}\r\n                    {/*    <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}*/}\r\n                    {/*       className={`nav-link`} id={`triggers-tab${id}`}*/}\r\n                    {/*       data-toggle=\"tab\" href={`#triggers${id}`} role=\"tab\"*/}\r\n                    {/*       onClick={() => setActiveTab('triggers')}*/}\r\n                    {/*       aria-controls={`triggers${id}`} aria-selected='false'>*/}\r\n                    {/*        Triggers*/}\r\n                    {/*    </a>*/}\r\n                    {/*</li>*/}\r\n                    <li className=\"nav-item\" role=\"presentation\">\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`cql-tab${id}`}\r\n                           data-toggle=\"tab\" href={`#cql${id}`} role=\"tab\"\r\n                           onClick={() => setActiveTab('cql')}\r\n                           aria-controls={`cql${id}`} aria-selected='false'>\r\n                            Cql\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"tab-content\" style={{marginTop: 20, marginLeft: 20, marginRight: 20}}>\r\n                    <div className={`tab-pane fade `} id={`prop${id}`} role=\"tabpanel\"\r\n                         aria-labelledby=\"view-tab\">\r\n                        <Properties name={nameTable} options={properties} disabled={action !== 'create'}\r\n                                    onChangeOption={onChangeOption}\r\n                                    setName={setNameTable}/>\r\n                    </div>\r\n                    <div className={`tab-pane fade `} id={`columns${id}`} role=\"tabpanel\"\r\n                         aria-labelledby=\"view-tab\">\r\n                        <Columns elements={columns} setFocus={setFocus}/>\r\n                    </div>\r\n                    <div className={`tab-pane fade `} id={`indices${id}`} role=\"tabpanel\"\r\n                         aria-labelledby=\"view-tab\">\r\n                        <Indices elements={indices} setFocus={setFocus}/>\r\n                    </div>\r\n                    {/*<div className={`tab-pane fade `} id={`triggers${id}`} role=\"tabpanel\"*/}\r\n                    {/*     aria-labelledby=\"view-tab\">*/}\r\n                    {/*    <Triggers elements={triggers} setFocus={setFocus}/>*/}\r\n                    {/*</div>*/}\r\n                    <div className={`tab-pane fade `} id={`cql${id}`} role=\"tabpanel\"\r\n                         aria-labelledby=\"view-tab\">\r\n                        <textarea className={\"cqltext\"} disabled={true}>\r\n                            {element.table ? element.table.describe : ''}\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n\r\n}\r\n\r\n\r\nconst Properties = ({name, disabled, options, setName, onChangeOption}) => {\r\n\r\n\r\n    let opt;\r\n    if (options) {\r\n        opt = options.map(item => {\r\n            return (\r\n                <tr className={`option_element ${item.focus ? 'focus' : ''}`}>\r\n                    <td><span className={'name_option'}>{item.name}</span></td>\r\n                    <td><input className={'value_option'} style={{width: '100%'}} value={item.value}/></td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        opt = (<table className=\"table\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">Name Option</th>\r\n                <th scope=\"col\">Value</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody onChange={(e) => onChangeOption(e)}>\r\n            {opt}\r\n            </tbody>\r\n        </table>)\r\n    }\r\n\r\n\r\n    return (<div>\r\n        <div><span style={{marginLeft: 10}}>Name</span><input style={{marginLeft: 10}}\r\n                                                              disabled={disabled} value={name}\r\n                                                              onChange={(e) => setName(e.target.value)}/>\r\n        </div>\r\n        {opt}\r\n    </div>)\r\n}\r\nconst Indices = ({elements, setFocus}) => {\r\n\r\n    const elem = elements.map((item) => {\r\n\r\n        return (<tr className={`indices_element ${item.focus ? 'focus' : ''}`}>\r\n            <td><span className={'name_index'}>{item.name}</span></td>\r\n            <td><span className={'index_columns'}>{item.column}</span></td>\r\n        </tr>)\r\n    })\r\n\r\n    return (<table className=\"table\">\r\n        <thead>\r\n        <tr>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Columns</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody onClick={setFocus}>\r\n        {elem}\r\n        </tbody>\r\n    </table>)\r\n}\r\n// const Triggers = ({elements, setFocus}) => {\r\n//\r\n//     const elem = elements.map((item) => {\r\n//         return (<tr className={`trigger_element ${item.focus ? 'focus' : ''}`}>\r\n//             <td><span className={'name_trigger'}>{item.name}</span></td>\r\n//             <td><span className={'class_trigger'}>{item.clazz}</span></td>\r\n//         </tr>)\r\n//     })\r\n//\r\n//     return (<table className=\"table\">\r\n//         <thead>\r\n//         <tr>\r\n//             <th scope=\"col\">Name</th>\r\n//             <th scope=\"col\">Class</th>\r\n//         </tr>\r\n//         </thead>\r\n//         <tbody onClick={setFocus}>\r\n//         {elem}\r\n//         </tbody>\r\n//     </table>)\r\n// }\r\n\r\nconst Columns = ({elements, setFocus}) => {\r\n\r\n    let elem;\r\n\r\n    if (elements.length !== 0) {\r\n\r\n        elem = elements.map((element) => {\r\n            if (element.name)\r\n                return (\r\n                    <tr className={`column_element ${element.focus ? 'focus' : ''}`}>\r\n                        <td><span className={'name_element'}>{element.name}</span></td>\r\n                        <td><span className={'type_element'}>{element.type}</span></td>\r\n                        <td><input type={\"checkbox\"} checked={element.isStatic} disabled={true}\r\n                                   className={'static_element'}/></td>\r\n                        <td><input type={\"checkbox\"} checked={element.isPartitionKey} disabled={true}\r\n                                   className={'partition_element'}/></td>\r\n                        <td><input type={\"checkbox\"} checked={element.isClusteringKey} disabled={true}\r\n                                   className={'clustering_element'}/>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n        })\r\n    }\r\n\r\n    return (<table className=\"table\">\r\n        <thead>\r\n        <tr>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Data Type</th>\r\n            <th scope=\"col\">Static</th>\r\n            <th scope=\"col\">Partition Key</th>\r\n            <th scope=\"col\">Clustering</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody onClick={setFocus}>\r\n        {elem}\r\n        </tbody>\r\n    </table>)\r\n}\r\n\r\nconst ColumnsModal = ({id, data, saveData, close}) => {\r\n\r\n    const [name, setNameColumn] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [type, setType] = useState('');\r\n    const [isStatic, setStatic] = useState(false);\r\n    const [isPartitionKey, setPartition] = useState(false);\r\n    const [isClusteringKey, setClustering] = useState(false);\r\n    const [excludesNames, setExcludeNames] = useState('');\r\n    const [warn, setWarn] = useState('');\r\n    const [action, setAction] = useState('');\r\n    const [process, setProcess] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            let {name, title, type, action, excludesNames, isPartitionKey, isClusteringKey, isStatic, process} = data;\r\n            if (name) {\r\n                setNameColumn(() => {\r\n                    return name\r\n                })\r\n            }\r\n            if (title) {\r\n                setTitle(() => {\r\n                    return title\r\n                })\r\n            }\r\n            if (type) {\r\n                setType(() => {\r\n                    return type\r\n                })\r\n            }\r\n            if (action) {\r\n                setAction(() => {\r\n                    return action\r\n                })\r\n            }\r\n            if (process) {\r\n                setProcess(() => {\r\n                    return process\r\n                })\r\n            }\r\n            if (excludesNames) {\r\n                setExcludeNames(() => {\r\n                    return excludesNames\r\n                })\r\n            }\r\n            if (isStatic) {\r\n                setStatic(() => {\r\n                    return isStatic\r\n                })\r\n            }\r\n            if (isPartitionKey) {\r\n                setPartition(() => {\r\n                    return isPartitionKey\r\n                })\r\n            }\r\n            if (isClusteringKey) {\r\n                setClustering(() => {\r\n                    return isClusteringKey\r\n                })\r\n            }\r\n        }\r\n\r\n    }, [data])\r\n\r\n    const setWarning = (value) => {\r\n        setWarn(() => {\r\n            return <span style={{color: \"red\"}}> this name already uses </span>\r\n        })\r\n        setNameColumn(() => {\r\n            return value\r\n        })\r\n    }\r\n    const clearFields = () => {\r\n        setNameColumn(() => {\r\n            return ''\r\n        })\r\n        setType(() => {\r\n            return ''\r\n        })\r\n        setStatic(() => {\r\n            return false\r\n        })\r\n        setPartition(() => {\r\n            return false\r\n        })\r\n        setClustering(() => {\r\n            return false\r\n        })\r\n    }\r\n    const closeModal = () => {\r\n        clearFields();\r\n        close();\r\n    }\r\n    const prepareColumnAndSave = () => {\r\n        $(`#columnsmodal${id}`).modal('hide')\r\n        saveData({name, type, isStatic, isClusteringKey, isPartitionKey, process})\r\n        clearFields();\r\n    }\r\n\r\n    const getSelectList = (type) => {\r\n        //todo: include custom type from system_schema.types   SET LIST MAP NEED ANOTHER\r\n        const types = ['', 'ascii', 'bigint', 'blob', 'boolean', 'counter', 'date', 'decimal',\r\n            'double', 'duration', 'float', 'inet', 'int',\r\n            'smallint', 'text', 'time', 'timestamp', 'timeuuid', 'tinyint', 'tuple',\r\n            'uuid', 'varchar', 'varint']\r\n\r\n\r\n        let index = types.findIndex(element => element === type.toLowerCase());\r\n\r\n        return types.map((element, i) => {\r\n            if (i === index) {\r\n                return <option selected>{element}</option>\r\n            } else {\r\n                return <option>{element}</option>\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n    const onChange = (e) => {\r\n        let changed = e.target.id;\r\n        let value = e.target.value;\r\n        let checked = e.target.checked;\r\n        if (changed === `columnname${id}`) {\r\n            if (excludesNames.includes(value)) {\r\n                setWarning(value)\r\n            } else {\r\n                if (warn !== '') {\r\n                    setWarn(() => {\r\n                        return ''\r\n                    })\r\n                }\r\n                setNameColumn(() => {\r\n                    return value\r\n                })\r\n            }\r\n        }\r\n        if (changed === `select${id}`) {\r\n            setType(() => {\r\n                return value\r\n            })\r\n        }\r\n        if (changed === `static${id}`) {\r\n\r\n            setStatic(() => {\r\n                return checked\r\n            })\r\n        }\r\n        if (changed === `partition${id}`) {\r\n            if (checked) {\r\n                setPartition(() => {\r\n                    return checked\r\n                })\r\n                setClustering(() => {\r\n                    return !checked\r\n                })\r\n            } else {\r\n                setPartition(() => {\r\n                    return checked\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n        if (changed === `clustering${id}`) {\r\n            if (checked) {\r\n                setClustering(() => {\r\n                    return checked\r\n                })\r\n                setPartition(() => {\r\n                    return !checked\r\n                })\r\n            } else {\r\n                setClustering(() => {\r\n                    return checked\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal fade\" id={`columnsmodal${id}`} data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\r\n             role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\"\r\n                            id=\"staticBackdropLabel\">{title}</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                                onClick={() => closeModal()}\r\n                        >\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\" onChange={onChange}>\r\n                        <div><span>Column Name</span> <input\r\n                            disabled={!isPartitionKey && (process === 'editing' && action === 'edit')}\r\n                            id={`columnname${id}`} className={'columnName'}\r\n                            value={name}\r\n                        />{warn}</div>\r\n                        <div><span style={{float: 'left'}}>Column Type</span>\r\n                            <select className=\"custom-select mr-sm-2\" id={`select${id}`}\r\n                                    disabled={process === 'editing' && action === 'edit'}>\r\n                                {getSelectList(type)}\r\n                            </select>\r\n                        </div>\r\n                        <span hidden={action !== 'create'}>Static   <input id={`static${id}`} type={\"checkbox\"}\r\n                                                                           checked={isStatic}/></span>\r\n                        <div></div>\r\n                        <span hidden={action !== 'create'}>Partition Key  <input id={`partition${id}`} type={\"checkbox\"}\r\n                                                                                 checked={isPartitionKey}/></span>\r\n                        <div></div>\r\n                        <span hidden={action !== 'create'}>Clustering Key  <input id={`clustering${id}`}\r\n                                                                                  type={\"checkbox\"}\r\n                                                                                  checked={isClusteringKey}/></span>\r\n\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\"\r\n                                data-dismiss=\"modal\"\r\n                                onClick={() => closeModal()}\r\n                        >CANCEL\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn btn-primary\"\r\n                                disabled={warn || name === '' || type === ''}\r\n                                onClick={() => prepareColumnAndSave()}\r\n                        >OK\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\nconst IndicesModal = ({id, data, saveData, close}) => {\r\n\r\n\r\n    const [columnName, setColumnName] = useState([]);\r\n    const [selectedColumn, setSelectedColumn] = useState('');\r\n    const [nameIndex, setNameIndex] = useState('');\r\n    const [className, setClassName] = useState('');\r\n    const [isIndexOnKeys, setIndexOnKeys] = useState(false);\r\n    const [isIndexOnValues, setIndexOnValues] = useState(false);\r\n    const [excludes, setExcudes] = useState([]);\r\n    const [warn, setWarn] = useState('');\r\n\r\n    // const getSelectList = (type) => {\r\n    //\r\n    //     if (data.columnsName) {\r\n    //         let index = data.columnsName.findIndex(element => element === type.toLowerCase());\r\n    //\r\n    //         let columns = data.columnsName.map((element, i) => {\r\n    //             if (i === index) {\r\n    //                 return (<option selected>{element}</option>);\r\n    //             } else {\r\n    //                 return (<option>{element}</option>);\r\n    //             }\r\n    //\r\n    //         })\r\n    //\r\n    //         setColumnName(() => {\r\n    //             return columns\r\n    //         })\r\n    //     }\r\n    //\r\n    // }\r\n\r\n\r\n    const setWarning = (value) => {\r\n        setWarn(() => {\r\n            return <span style={{color: \"red\"}}> this name already uses </span>\r\n        })\r\n        setNameIndex(() => {\r\n            return value\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            let elements = data.columnsName.map((item, i) => {\r\n                return (<option>{item}</option>);\r\n            });\r\n            if (elements.length > 0) {\r\n                setSelectedColumn(() => {\r\n                    return data.columnsName[0]\r\n                })\r\n                setColumnName(() => {\r\n                    return elements\r\n                })\r\n            }\r\n\r\n            if (data.excludes) {\r\n                setExcudes(() => {\r\n                    return data.excludes\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }, [data])\r\n\r\n    const clearFields = () => {\r\n        setColumnName(() => {\r\n            return []\r\n        })\r\n        setNameIndex(() => {\r\n            return ''\r\n        })\r\n        setIndexOnValues(() => {\r\n            return false\r\n        })\r\n        setIndexOnKeys(() => {\r\n            return false\r\n        })\r\n        setClassName(() => {\r\n            return ''\r\n        })\r\n    }\r\n    const closeModal = () => {\r\n        clearFields();\r\n        close();\r\n    }\r\n\r\n    const prepareIndexAndSave = () => {\r\n        $(`#indicesmodal${id}`).modal('hide')\r\n        saveData({name: nameIndex, column: selectedColumn, className, isIndexOnKeys, isIndexOnValues})\r\n        clearFields();\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        let changed = e.target.id;\r\n        let value = e.target.value;\r\n        let checked = e.target.checked;\r\n        if (changed === `select_index_modal${id}`) {\r\n            setSelectedColumn(() => {\r\n                return value\r\n            })\r\n\r\n        }\r\n        if (changed === `name_index${id}`) {\r\n\r\n            if (excludes.includes(value)) {\r\n                setWarning(value)\r\n            } else {\r\n                if (warn !== '') {\r\n                    setWarn(() => {\r\n                        return ''\r\n                    })\r\n                }\r\n                setNameIndex(() => {\r\n                    return value\r\n                })\r\n            }\r\n        }\r\n        if (changed === `name_class${id}`) {\r\n\r\n            setClassName(() => {\r\n                return value\r\n            })\r\n        }\r\n        if (changed === `on_keys${id}`) {\r\n            if (checked) {\r\n                setIndexOnKeys(() => {\r\n                    return checked\r\n                })\r\n                setIndexOnValues(() => {\r\n                    return !checked\r\n                })\r\n            } else {\r\n                setIndexOnKeys(() => {\r\n                    return checked\r\n                })\r\n            }\r\n\r\n        }\r\n        if (changed === `on_values${id}`) {\r\n            if (checked) {\r\n                setIndexOnValues(() => {\r\n                    return checked\r\n                })\r\n                setIndexOnKeys(() => {\r\n                    return !checked\r\n                })\r\n            } else {\r\n                setIndexOnValues(() => {\r\n                    return checked\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal fade\" id={`indicesmodal${id}`} data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\r\n             role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\"\r\n                            id=\"staticBackdropLabel\">Confirmation</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                                onClick={() => closeModal()}\r\n                        >\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\" onChange={onChange}>\r\n\r\n                        <span>Field Name</span>\r\n                        <select className=\"custom-select mr-sm-2\" id={`select_index_modal${id}`}>\r\n                            {columnName}\r\n                        </select>\r\n                        <span>Index Name  <input id={`name_index${id}`}\r\n                                                 value={nameIndex}/> {warn}</span>\r\n                        <div></div>\r\n                        <span>Class Name  <input id={`name_class${id}`}\r\n                                                 value={className}/></span>\r\n                        <div></div>\r\n\r\n                        <span>Index on Keys <input id={`on_keys${id}`}\r\n                                                   type={\"checkbox\"}\r\n                                                   checked={isIndexOnKeys}/></span>\r\n                        <div></div>\r\n                        <span>Index on Values  <input id={`on_values${id}`}\r\n                                                      type={\"checkbox\"}\r\n                                                      checked={isIndexOnValues}/></span>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\"\r\n                                data-dismiss=\"modal\"\r\n                                onClick={() => closeModal()}\r\n                        >CANCEL\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn btn-primary\"\r\n                                disabled={nameIndex === '' || warn}\r\n                                onClick={() => prepareIndexAndSave()}\r\n                        >OK\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n// const TriggersModal = ({id, data, saveData, close}) => {\r\n//\r\n//     const [name, setName] = useState()\r\n//     const [clazz, setClazz] = useState()\r\n//     const [title, setTitle] = useState()\r\n//\r\n//     useEffect(() => {\r\n//         if (data) {\r\n//             let {name, clazz, title} = data;\r\n//             if (name) {\r\n//                 setName(() => {\r\n//                     return name\r\n//                 })\r\n//             }\r\n//             if (clazz) {\r\n//                 setClazz(() => {\r\n//                     return clazz\r\n//                 })\r\n//             }\r\n//             if (title) {\r\n//                 setTitle(() => {\r\n//                     return title\r\n//                 })\r\n//             }\r\n//         }\r\n//     }, [data])\r\n//\r\n//     const clearFields = () => {\r\n//         setName(() => {\r\n//             return ''\r\n//         })\r\n//         setClazz(() => {\r\n//             return ''\r\n//         })\r\n//     }\r\n//\r\n//     const closeModal = () => {\r\n//         clearFields();\r\n//         close();\r\n//     }\r\n//     const prepareTriggerAndSave = () => {\r\n//         $(`#triggersmodal${id}`).modal('hide')\r\n//         saveData({name, clazz})\r\n//         clearFields();\r\n//     }\r\n//\r\n//     const onChange = (e) => {\r\n//         let targetId = e.target.id;\r\n//         let value = e.target.value;\r\n//         if (targetId === `name_trigger${id}`) {\r\n//             setName(() => {\r\n//                 return value\r\n//             })\r\n//         }\r\n//         if (targetId === `class_trigger${id}`) {\r\n//             setClazz(() => {\r\n//                 return value\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     return (\r\n//         <div className=\"modal fade\" id={`triggersmodal${id}`} data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\r\n//              role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n//             <div className=\"modal-dialog\">\r\n//                 <div className=\"modal-content\">\r\n//                     <div className=\"modal-header\">\r\n//                         <h5 className=\"modal-title\"\r\n//                             id=\"staticBackdropLabel\">{title}</h5>\r\n//                         <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n//                                 onClick={() => closeModal()}>\r\n//                             <span aria-hidden=\"true\">&times;</span>\r\n//                         </button>\r\n//                     </div>\r\n//                     <div className=\"modal-body\" onChange={onChange}>\r\n//\r\n//                         <div><span>Name Trigger</span><input id={`name_trigger${id}`} style={{marginLeft: 20}}\r\n//                                                              value={name}/></div>\r\n//                         <div><span>Class Name</span><input id={`class_trigger${id}`} style={{marginLeft: 20}}\r\n//                                                            value={clazz}/></div>\r\n//\r\n//                     </div>\r\n//                     <div className=\"modal-footer\">\r\n//                         <button type=\"button\" className=\"btn btn-secondary\"\r\n//                                 data-dismiss=\"modal\"\r\n//                                 onClick={() => closeModal()}\r\n//                         >CANCEL\r\n//                         </button>\r\n//                         <button type=\"button\" className=\"btn btn-primary\"\r\n//                                 onClick={() => prepareTriggerAndSave()}\r\n//                         >OK\r\n//                         </button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>)\r\n// }\r\n\r\n\r\nconst Buttons = ({focus, optionDisabled, runModal}) => {\r\n\r\n    const [buttons, setButtons] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let options = optionDisabled();\r\n        if (focus === 'properties' || focus === 'cql' || focus === '') {\r\n            let elemens = [];\r\n            elemens.push(<div>\r\n                <button type=\"button\" disabled={options.apply} onClick={() => runModal('apply')}\r\n                        className=\"btn btn-outline-success\" title=\"Apply Changes\"\r\n                ><FontAwesomeIcon icon={faCheck}/></button>\r\n            </div>)\r\n            setButtons(() => {\r\n                return (elemens)\r\n            })\r\n        }\r\n        if (focus === 'columns') {\r\n            let elemens = [];\r\n            elemens.push(<div>\r\n                <button type=\"button\" disabled={options.apply} onClick={() => runModal('apply')}\r\n                        className=\"btn btn-outline-success\" title=\"Apply Changes\"\r\n                ><FontAwesomeIcon icon={faCheck}/></button>\r\n                <button type=\"button\" disabled={options.add} onClick={() => runModal('add')}\r\n                        className=\"btn btn-outline-secondary\" title=\"Add column\"\r\n                ><FontAwesomeIcon icon={faPlusCircle}/></button>\r\n                <button type=\"button\" disabled={options.edit} onClick={() => runModal('edit')}\r\n                        className=\"btn btn-outline-secondary\" title=\"Edit column\"\r\n                ><FontAwesomeIcon icon={faEdit}/></button>\r\n                <button type=\"button\" disabled={options.delete} onClick={() => runModal('delete')}\r\n                        className=\"btn btn-outline-secondary\" title=\"Remove column\"\r\n                ><FontAwesomeIcon icon={faTrashAlt}/></button>\r\n\r\n            </div>)\r\n            setButtons(() => {\r\n                return (elemens)\r\n            })\r\n        }\r\n        if (focus === 'indices') {\r\n            let elemens = [];\r\n            elemens.push(<div>\r\n                <button type=\"button\" disabled={options.apply} onClick={() => runModal('apply')}\r\n                        className=\"btn btn-outline-success\" title=\"Apply Changes\"\r\n                ><FontAwesomeIcon icon={faCheck}/></button>\r\n                <button type=\"button\" disabled={options.add} onClick={() => runModal('add')}\r\n                        className=\"btn btn-outline-secondary\" title=\"Add index\"\r\n                ><FontAwesomeIcon icon={faPlusCircle}/></button>\r\n                <button type=\"button\" disabled={options.delete} onClick={() => runModal('delete')}\r\n                        className=\"btn btn-outline-secondary\" title=\"Delete index\"\r\n                ><FontAwesomeIcon icon={faTrashAlt}/></button>\r\n\r\n            </div>)\r\n            setButtons(() => {\r\n                return (elemens)\r\n            })\r\n        }\r\n        if (focus === 'triggers') {\r\n            let elemens = [];\r\n            elemens.push(<div>\r\n                <button type=\"button\" disabled={options.apply} onClick={() => runModal('apply')}\r\n                        className=\"btn btn-outline-success\" title=\"Apply Changes\"\r\n                ><FontAwesomeIcon icon={faCheck}/></button>\r\n                <button type=\"button\" disabled={options.add} onClick={() => runModal('add')}\r\n                        className=\"btn btn-outline-secondary\" title=\"Add trigger\"\r\n                ><FontAwesomeIcon icon={faPlusCircle}/></button>\r\n                <button type=\"button\" disabled={options.delete} onClick={() => runModal('delete')}\r\n                        className=\"btn btn-outline-secondary\" title=\"Delete trigger\"\r\n                ><FontAwesomeIcon icon={faTrashAlt}/></button>\r\n\r\n            </div>)\r\n            setButtons(() => {\r\n                return (elemens)\r\n            })\r\n        }\r\n\r\n    }, [focus, optionDisabled]);\r\n\r\n\r\n    return (<div>{buttons}</div>)\r\n}\r\n\r\nexport default Table;","import Table from \"./table\";\r\nexport default Table;","import React, {useState, useEffect} from \"react\";\r\nimport Toast from \"../toast\";\r\nimport UserType from \"../user-type/user-type\";\r\nimport UserFunction from \"../user-function/user-function\";\r\nimport AggregateFunction from \"../aggregate-function\";\r\nimport MaterializedView from \"../materialized-view\";\r\nimport CqlEditor from \"../cql-editor\";\r\nimport Table from \"../table\";\r\nimport './right-panel.css';\r\n\r\n\r\nconst $ = window.$;\r\nlet lastTime = 0;\r\n\r\n\r\nconst RightPanel = ({dataToast, removeToast, content, saveContent, closeTabPanel}) => {\r\n\r\n\r\n    let [tabs, setTabs] = useState([null]);\r\n    let [tabsContent, setTabsContent] = useState([null]);\r\n    let [render, setRender] = useState(false);\r\n\r\n\r\n\r\n    const returnTabs = () => {\r\n        if (content.length !== 0 && Array.isArray(content)) {\r\n            let elements = content.map((element, i) => {\r\n\r\n                if (element === null) return null;\r\n                if (element.type === 'userType') {\r\n\r\n                    return (<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`type-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#type${i}`} role=\"tab\"\r\n                           aria-controls={`type${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => closeTabPanel(`${+i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>)\r\n                }\r\n\r\n                if (element.type === 'userFunction') {\r\n\r\n                    return (<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`udf-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#udf${i}`} role=\"tab\"\r\n                           aria-controls={`udf${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => closeTabPanel(`${+i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>)\r\n                }\r\n                if (element.type === 'aggregateFunction') {\r\n\r\n                    return (<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`aggregate-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#aggregate${i}`} role=\"tab\"\r\n                           aria-controls={`aggregate${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => closeTabPanel(`${+i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>)\r\n                }\r\n                if (element.type === 'view') {\r\n\r\n                    return (<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`view-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#view${i}`} role=\"tab\"\r\n                           aria-controls={`view${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => closeTabPanel(`${+i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>)\r\n                }\r\n                if (element.type === 'cqleditor') {\r\n\r\n                    return (<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`cqleditor-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#cqleditor${i}`} role=\"tab\"\r\n                           aria-controls={`cqleditor${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => closeTabPanel(`${+i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>)\r\n                }\r\n                if (element.type === 'table') {\r\n\r\n                    return (<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`table-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#table${i}`} role=\"tab\"\r\n                           aria-controls={`table${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => closeTabPanel(`${+i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>)\r\n                }\r\n                return null;\r\n            });\r\n            return elements;\r\n        }\r\n    };\r\n\r\n\r\n    const returnTabsContent = () => {\r\n        if (content.length !== 0 && Array.isArray(content)) {\r\n            return content.map((element, i) => {\r\n                if (element === null) return null;\r\n                if (element.type === 'userType') {\r\n\r\n                    return (\r\n                        <div className={`tab-pane fade `} id={`type${i}`} role=\"tabpanel\"\r\n                             aria-labelledby=\"types-tab\">\r\n                            <UserType element={element} saveContent={(content) => supportFunc(content, `${+i}`)}/>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                if (element.type === 'userFunction') {\r\n\r\n                    return (<div className={`tab-pane fade `} id={`udf${i}`} role=\"tabpanel\"\r\n                                 aria-labelledby=\"udf-tab\">\r\n                        <UserFunction element={element} saveContent={(content) => supportFunc(content, `${+i}`)}/>\r\n                    </div>)\r\n                }\r\n                if (element.type === 'aggregateFunction') {\r\n\r\n                    return (<div className={`tab-pane fade `} id={`aggregate${i}`} role=\"tabpanel\"\r\n                                 aria-labelledby=\"aggregate-tab\">\r\n                        <AggregateFunction element={element} saveContent={(content) => supportFunc(content, `${+i}`)}/>\r\n                    </div>)\r\n                }\r\n                if (element.type === 'view') {\r\n\r\n                    return (<div className={`tab-pane fade `} id={`view${i}`} role=\"tabpanel\"\r\n                                 aria-labelledby=\"view-tab\">\r\n                        <MaterializedView element={element} saveContent={(content) => supportFunc(content, `${+i}`)}/>\r\n                    </div>)\r\n                }\r\n                if (element.type === 'cqleditor') {\r\n\r\n                    return (<div className={`tab-pane fade `} id={`cqleditor${i}`} role=\"tabpanel\"\r\n                                 aria-labelledby=\"cqleditor-tab\">\r\n                        <CqlEditor element={element} saveContent={(content) => supportFunc(content, `${+i}`)}/>\r\n                    </div>)\r\n                }\r\n                if (element.type === 'table') {\r\n\r\n                    return (<div className={`tab-pane fade `} id={`table${i}`} role=\"tabpanel\"\r\n                                 aria-labelledby=\"table-tab\">\r\n                        <Table element={element} saveContent={(content) => supportFunc(content, `${+i}`)}/>\r\n                    </div>)\r\n                }\r\n                return null;\r\n\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (content.length === 0 && tabs[0] !== null) {\r\n            setTabs(() => {\r\n                return [null]\r\n            })\r\n\r\n            setTabsContent(() => {\r\n                return [null]\r\n            })\r\n\r\n        }\r\n        if (content.length !== 0 && Array.isArray(content)) {\r\n\r\n\r\n            let tabs = returnTabs();\r\n            let tabsContent = returnTabsContent();\r\n\r\n            setTabs(() => {\r\n                return [tabs]\r\n            })\r\n\r\n            setTabsContent(() => {\r\n                return [tabsContent]\r\n            })\r\n\r\n            if (render) {\r\n                setRender(false)\r\n            } else {\r\n                setRender(true)\r\n            }\r\n\r\n\r\n        }\r\n    }, [content])\r\n\r\n    // show tabsContent after render\r\n    useEffect(() => {\r\n        // if (content.length !== 0) {\r\n        // hack... if fast click on create button jQuery not have time set show on focus tab\r\n        if ((performance.now() - lastTime) > 300) {\r\n            lastTime = performance.now();\r\n            let show = '';\r\n            content.forEach((el, i) => {\r\n\r\n                if (el && el.show !== '') {\r\n                    show = i;\r\n                }\r\n            });\r\n            if (show !== '') {\r\n                if (content[show].type === 'userType') {\r\n                    $(`#type-tab${show}`).tab('show');\r\n                }\r\n                if (content[show].type === 'userFunction') {\r\n                    $(`#udf-tab${show}`).tab('show');\r\n                }\r\n                if (content[show].type === 'aggregateFunction') {\r\n                    $(`#aggregate-tab${show}`).tab('show');\r\n                }\r\n                if (content[show].type === 'view') {\r\n                    $(`#view-tab${show}`).tab('show');\r\n                }\r\n                if (content[show].type === 'cqleditor') {\r\n                    $(`#cqleditor-tab${show}`).tab('show');\r\n                }\r\n                if (content[show].type === 'table') {\r\n                    $(`#table-tab${show}`).tab('show');\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [render])\r\n\r\n    const supportFunc = (content, i) => {\r\n        saveContent(content, +i);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"right-panel\"}>\r\n            {dataToast ? <Toast removeToast={removeToast} dataToast={dataToast}/> : null}\r\n            <ul className=\"nav nav-tabs\" id={`myTab`} role=\"tablist\">\r\n                {tabs}\r\n            </ul>\r\n            <div className=\"tab-content\" id=\"myTabContent\">\r\n                {tabsContent}\r\n            </div>\r\n        </div>);\r\n\r\n};\r\n\r\n\r\nexport default RightPanel;","import RightPanel from \"./right-panel\";\r\n\r\nexport default RightPanel;","import HeaderButtons from \"./header-buttons\";\r\n\r\nexport default HeaderButtons;","import React, {Component} from \"react\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faLink, faUnlink, faPlug, faEdit, faTrashAlt, faPlusSquare, faSignOutAlt} from '@fortawesome/free-solid-svg-icons'\r\nimport './header-buttons.css';\r\n\r\n\r\nexport default class HeaderButtons extends Component {\r\n    render() {\r\n        let {\r\n            typeFocus, connected, currentConnection, setAction,\r\n            connect, disconnect, createUserType, createUserFunction, createAggregateFunction, createMaterializedView\r\n            ,createCqlEditor,createTableHandler\r\n        } = this.props;\r\n        return (<div className={'headerbuttons'}>\r\n            <img className={'logo'} />\r\n            <button data-placement=\"bottom\" title=\"create connection\"\r\n                    type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\"\r\n                    data-target={'#createconnection'} onClick={() => setAction('createconnection')}>\r\n                <FontAwesomeIcon icon={faPlug}/>+\r\n            </button>\r\n            <button disabled={connected.includes(currentConnection) || !typeFocus}\r\n                    data-placement=\"bottom\" title=\"edit connection\"\r\n                    onClick={() => setAction('editconnection')}\r\n                    type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\"\r\n                    data-target={'#editconnection'}><FontAwesomeIcon icon={faEdit}/>\r\n            </button>\r\n            <button disabled={connected.includes(currentConnection) || !typeFocus}\r\n                    data-placement=\"bottom\" title=\"delete connection\"\r\n                    type=\"button\" className={\"btn btn-primary\"}\r\n                    onClick={() => setAction('deleteconnection')}><FontAwesomeIcon\r\n                icon={faTrashAlt}/></button>\r\n            <button data-placement=\"bottom\" title=\"connect\"\r\n                    disabled={connected.includes(currentConnection) || !typeFocus}\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={connect}><FontAwesomeIcon\r\n                icon={faLink}/></button>\r\n            <button disabled={!connected.includes(currentConnection) || !typeFocus}\r\n                    data-placement=\"bottom\" title=\"disconnect\"\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={disconnect}><FontAwesomeIcon\r\n                icon={faUnlink}/></button>\r\n            <button disabled={!connected.includes(currentConnection)}\r\n                    data-placement=\"bottom\" title=\"create keyspace\"\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => setAction('createkeyspace')}>\r\n                <FontAwesomeIcon\r\n                    icon={faPlusSquare}/> KS\r\n            </button>\r\n            <button data-placement=\"bottom\" title=\"create table\"\r\n                    disabled={typeFocus !== 'tables' && typeFocus !== 'table'}\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => createTableHandler()}><FontAwesomeIcon\r\n                icon={faPlusSquare}/> Table\r\n            </button>\r\n            <button data-placement=\"bottom\" title=\"create user function\"\r\n                    disabled={typeFocus !== 'functions' && typeFocus !== 'function'}\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => createUserFunction()}><FontAwesomeIcon\r\n                icon={faPlusSquare}/> User Func.\r\n            </button>\r\n            <button disabled={typeFocus !== 'agfunctions' && typeFocus !== 'agfunction'}\r\n                    data-placement=\"bottom\" title=\"create user aggregatin function\"\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => createAggregateFunction()}>\r\n                <FontAwesomeIcon icon={faPlusSquare}/> User Aggregate Func.\r\n            </button>\r\n            <button disabled={typeFocus !== 'types' && typeFocus !== 'type'}\r\n                    data-placement=\"bottom\" title=\"create user type\"\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => createUserType()}><FontAwesomeIcon\r\n                icon={faPlusSquare}/> User Type\r\n            </button>\r\n            <button disabled={typeFocus !== 'views' && typeFocus !== 'view'}\r\n                    data-placement=\"bottom\" title=\"create materialized view\"\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => createMaterializedView()}>\r\n                <FontAwesomeIcon\r\n                    icon={faPlusSquare}/> Materialized View\r\n            </button>\r\n            <button data-placement=\"bottom\" title=\"create user\" disabled={!connected.includes(currentConnection)}\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => setAction('createuser')}><FontAwesomeIcon\r\n                icon={faPlusSquare}/> User\r\n            </button>\r\n            <button data-placement=\"bottom\" title=\"create role\" disabled={!connected.includes(currentConnection)}\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => setAction('createrole')}><FontAwesomeIcon\r\n                icon={faPlusSquare}/> Role\r\n            </button>\r\n            <button data-placement=\"bottom\" title=\"cql editor\" disabled={!connected.includes(currentConnection)}\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => createCqlEditor()}>EDITOR\r\n            </button>\r\n            <button data-placement=\"bottom\" title=\"sign out\"\r\n                    type=\"button\" className={\"btn btn-primary\"} onClick={() => setAction('signout')}><FontAwesomeIcon\r\n                icon={faSignOutAlt}/> EXIT\r\n            </button>\r\n\r\n        </div>);\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './connection.css';\r\n const wrapBranch = (data, times) => {\r\n    let initial = data;\r\n    for (let i = 0; i < times; i++) {\r\n        initial = <div className={\"branch\"}>{initial}</div>;\r\n    }\r\n    return initial;\r\n}\r\n const getItem = (level = 0, icon = '', role = '', text = '', rotation = '', id = {}) => {\r\n\r\n    const wraped = (\r\n        <div className={\"tree-entry\"} role={role}>\r\n                <span className={\"tree-button\"}>\r\n                    {  rotation === 'spinner'\r\n                        ? <FontAwesomeIcon icon={faSpinner} pulse={true}/>\r\n                        : <span className={`tree-push ${rotation}`}></span>}\r\n\r\n                </span>\r\n\r\n            <span className={`tree-icon ${icon}`}></span>\r\n            <span className={\"tree-text\"}>{text}</span>\r\n        </div>\r\n    );\r\n\r\n    return (<>\r\n        <div role={\"tree-item\"} {...id}>\r\n            {wrapBranch(wraped, level)}\r\n        </div>\r\n    </>)\r\n}\r\n\r\n// todo: may change name?\r\nconst Connection = ({data}) => {\r\n    if (data === undefined || data === null) return '';\r\n    let alias = data.connection_alias;\r\n    let rotation = data.rotation;\r\n    let show = rotation === 'down' ? {className: 'show'} : {};\r\n    let id = data.id_tree_item;\r\n    let id_presentation = data.id_presentation;\r\n\r\n    return (<li className={'connection'} role={\"presentation\"} id={id_presentation} key={id_presentation}>\r\n        {getItem(0, 'connection-icon', '', alias, rotation, id)}\r\n        <KS action={show} dataks={data.keyspaces ? data.keyspaces : null}/>\r\n        <Roles action={show} data={data.roles ? data.roles : null}/>\r\n        <Users action={show} data={data.users ? data.users : null}/>\r\n    </li>)\r\n\r\n}\r\n\r\n\r\nconst KS = ({action, dataks}) => {\r\n    if (dataks === undefined || dataks === null) return '';\r\n    return dataks.map((ks) => {\r\n        const name = ks.name;\r\n        const rotation = ks.rotation;\r\n        const show = rotation === 'down' ? {className: 'show'} : {};\r\n        const id = ks.id_tree_item;\r\n        const id_presentation = ks.id_presentation;\r\n\r\n        return (<ul role={\"group\"} {...action}>\r\n            <li role={\"presentation\"} className={'keyspace'} id={id_presentation} key={id_presentation}>\r\n                {getItem(1, 'keyspace', '', name, rotation, id)}\r\n                <Tables data={ks.tables} action={show}/>\r\n                <UserFunctions data={ks.userFunctions} action={show}/>\r\n                <AggregateFunctions data={ks.aggregateFunctions} action={show}/>\r\n                <UserTypes data={ks.userTypes} action={show}/>\r\n                <MaterializedViews data={ks.views} action={show}/>\r\n            </li>\r\n        </ul>)\r\n    })\r\n}\r\nconst Roles = ({data, action}) => {\r\n    if (data === undefined || data === null) return '';\r\n    let {rotation, id_tree_item, id_presentation} = data.find(el => el.name === undefined);\r\n    const show = rotation === 'down' ? {className: 'show'} : {};\r\n    return (<ul role={\"group\"} {...action}>\r\n        <li role={\"presentation\"} className={'roles'} id={id_presentation} key={id_presentation}>\r\n            {getItem(1, '', '', `Roles ${data.length === 0 ? '' : '(' + (data.length - 1) + ')'}`, rotation, id_tree_item)}\r\n            <Role data={data} action={show}/>\r\n        </li>\r\n    </ul>)\r\n}\r\nconst Role = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n            const name = item.name;\r\n            const rotation = item.rotation=== 'spinner'? 'spinner': 'clear';\r\n            const id = item.id_tree_item;\r\n            const id_presentation = item.id_presentation;\r\n\r\n            return (<li role={\"presentation\"} className={'role'} id={id_presentation} key={id_presentation}>\r\n                {getItem(2, '', '', name, rotation, id)}\r\n            </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n}\r\n const Users = ({data, action}) => {\r\n    if (data === undefined || data === null) return '';\r\n    let {rotation, id_tree_item, id_presentation} = data.find(el => el.name === undefined);\r\n    const show = rotation === 'down' ? {className: 'show'} : {};\r\n    return (<ul role={\"group\"} {...action}>\r\n        <li role={\"presentation\"} className={'users'} id={id_presentation} key={id_presentation}>\r\n            {getItem(1, '', '', `Users ${data.length === 0 ? '' : '(' + (data.length - 1) + ')'}`, rotation, id_tree_item)}\r\n            <User data={data} action={show}/>\r\n        </li>\r\n    </ul>)\r\n}\r\n const User = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n            const name = item.name;\r\n            const rotation = item.rotation=== 'spinner'? 'spinner': 'clear';\r\n            const id = item.id_tree_item;\r\n            const id_presentation = item.id_presentation;\r\n\r\n            return (<li role={\"presentation\"} className={'user'} id={id_presentation} key={id_presentation}>\r\n                {getItem(2, '', '', name, rotation, id)}\r\n            </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n}\r\n\r\n const Tables = ({data, action}) => {\r\n    // find properties for array\r\n    let {rotation, id_tree_item, id_presentation} = data.find(el => el.name === undefined);\r\n    const show = rotation === 'down' ? {className: 'show'} : {};\r\n    return (<ul role={\"group\"} {...action}>\r\n        <li role={\"presentation\"} className={'tables'} id={id_presentation} key={id_presentation}>\r\n            {getItem(3, '', '', `Tables ${data.length === 0 ? '' : '(' + (data.length - 1) + ')'}`, rotation, id_tree_item)}\r\n            <Table data={data} action={show}/>\r\n        </li>\r\n    </ul>)\r\n\r\n}\r\n\r\n const Table = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n\r\n        if(item.name){\r\n        const name = item.name;\r\n        const rotation = item.rotation;\r\n        const show = rotation === 'down' ? {className: 'show'} : {};\r\n        const id = item.id_tree_item;\r\n        const id_presentation = item.id_presentation;\r\n\r\n        return (<li role={\"presentation\"} className={'table'} id={id_presentation} key={id_presentation}>\r\n            {getItem(4, '', '', name, rotation, id)}\r\n            <Columns data={item.columns} action={show}/>\r\n        </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n\r\n}\r\n const UserFunctions = ({data, action}) => {\r\n\r\n    let {rotation, id_tree_item, id_presentation} = data.find(el => el.name === undefined);\r\n    const show = rotation === 'down' ? {className: 'show'} : {};\r\n    return (<ul role={\"group\"} {...action}>\r\n        <li role={\"presentation\"} className={'functions'} id={id_presentation} key={id_presentation}>\r\n            {getItem(3, '', '', `User Defined Functions ${data.length === 0 ? '' : '(' + (data.length - 1) + ')'}`, rotation, id_tree_item)}\r\n            <UserFunction data={data} action={show}/>\r\n        </li>\r\n    </ul>)\r\n\r\n}\r\n\r\n const UserFunction = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n        const name = item.name;\r\n        const rotation = item.rotation=== 'spinner'? 'spinner': 'clear';\r\n        const id = item.id_tree_item;\r\n        const id_presentation = item.id_presentation;\r\n\r\n        return (<li role={\"presentation\"} className={'function'} id={id_presentation} key={id_presentation}>\r\n            {getItem(5, '', '', name.split(\"(\")[0], rotation, id)}\r\n        </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n\r\n}\r\n const AggregateFunctions = ({data, action}) => {\r\n\r\n    let {rotation, id_tree_item, id_presentation} = data.find(el => el.name === undefined);\r\n    const show = rotation === 'down' ? {className: 'show'} : {};\r\n    return (<ul role={\"group\"} {...action}>\r\n        <li role={\"presentation\"} className={'agfunctions'} id={id_presentation} key={id_presentation}>\r\n            {getItem(3, '', '', `Aggregate Functions ${data.length === 0 ? '' : '(' + (data.length -1) + ')'}`, rotation, id_tree_item)}\r\n            <AggregateFunction data={data} action={show}/>\r\n        </li>\r\n    </ul>)\r\n\r\n}\r\n\r\n const AggregateFunction = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n        const name = item.name;\r\n        const rotation = item.rotation=== 'spinner'? 'spinner': 'clear';\r\n        const id = item.id_tree_item;\r\n        const id_presentation = item.id_presentation;\r\n\r\n        return (<li role={\"presentation\"} className={'agfunction'} id={id_presentation} key={id_presentation}>\r\n            {getItem(5, '', '', name, rotation, id)}\r\n        </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n\r\n}\r\n\r\n const UserTypes = ({data, action}) => {\r\n\r\n    let {rotation, id_tree_item, id_presentation} = data.find(el => el.name === undefined);\r\n    const show = rotation === 'down' ? {className: 'show'} : {};\r\n    return (<ul role={\"group\"} {...action}>\r\n        <li role={\"presentation\"} className={'types'} id={id_presentation} key={id_presentation}>\r\n            {getItem(3, '', '', `User Types ${data.length === 0 ? '' : '(' + (data.length - 1) + ')'}`, rotation, id_tree_item)}\r\n            <UserType data={data} action={show}/>\r\n        </li>\r\n    </ul>)\r\n\r\n}\r\n\r\n const UserType = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n        const name = item.name;\r\n        const rotation =  item.rotation;\r\n        const show = rotation === 'down' ? {className: 'show'} : {};\r\n        const id = item.id_tree_item;\r\n        const id_presentation = item.id_presentation;\r\n\r\n        return (<li role={\"presentation\"} className={'type'} id={id_presentation} key={id_presentation}>\r\n            {getItem(4, '', '', name, rotation, id)}\r\n            <TypeFields data={item.fields} action={show}/>\r\n        </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n\r\n}\r\n const TypeFields = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n        const name = item.name;\r\n        const type = item.type;\r\n        const rotation = 'clear';\r\n        const id = item.id_tree_item;\r\n        const id_presentation = item.id_presentation;\r\n\r\n        return (<li role={\"presentation\"} className={'field'} id={id_presentation} key={id_presentation}>\r\n            {getItem(6, '', '', <>{name} <span\r\n                className={\"type-column\"}>{type}</span></>, rotation, id)}\r\n        </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n\r\n}\r\n\r\n const MaterializedViews = ({data, action}) => {\r\n\r\n    let {rotation, id_tree_item, id_presentation} = data.find(el => el.name === undefined);\r\n    const show = rotation === 'down' ? {className: 'show'} : {};\r\n    return (<ul role={\"group\"} {...action}>\r\n        <li role={\"presentation\"} className={'views'} id={id_presentation} key={id_presentation}>\r\n            {getItem(3, '', '', `Materialized Views ${data.length === 0 ? '' : '(' + (data.length - 1) + ')'}`, rotation, id_tree_item)}\r\n            <MaterializedView data={data} action={show}/>\r\n        </li>\r\n    </ul>)\r\n\r\n}\r\n\r\n const MaterializedView = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n        const name = item.name;\r\n        const rotation = item.rotation=== 'spinner'? 'spinner': 'clear';\r\n        const id = item.id_tree_item;\r\n        const id_presentation = item.id_presentation;\r\n\r\n        return (<li role={\"presentation\"} className={'view'} id={id_presentation} key={id_presentation}>\r\n            {getItem(5, '', '', name, rotation, id)}\r\n        </li>)\r\n    }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n\r\n}\r\n\r\n const Columns = ({data, action}) => {\r\n\r\n    const elements = data.map(item => {\r\n        if(item.name){\r\n        const name = item.name;\r\n        const type = item.type;\r\n        const rotation = 'clear';\r\n        const id = item.id_tree_item;\r\n        const id_presentation = item.id_presentation;\r\n\r\n        return (<li role={\"presentation\"} className={'column'} id={id_presentation} key={id_presentation}>\r\n            {getItem(5, '', '', <>{name} <span\r\n                className={\"type-column\"}>{type}</span></>, rotation, id)}\r\n\r\n        </li>)\r\n        }\r\n    })\r\n    return (<ul role={\"group\"} {...action}>{elements}</ul>)\r\n\r\n}\r\n\r\nexport default Connection;\r\n\r\n","import Connection from \"./connection\";\r\n\r\nexport default Connection;","import ContextMenu from \"./context-menu\";\r\n\r\nexport default ContextMenu;","import React, {useCallback, useState} from \"react\";\r\nimport {faDatabase} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './context-menu.css';\r\nconst ContextMenu = ({data, style}) => {\r\n\r\n    const [styleCustom, setStyleCustom] = useState({});\r\n\r\n\r\n    const measuredRef = useCallback(node => {\r\n        if (node !== null) {\r\n            let windowHeight = window.innerHeight;\r\n\r\n            let heightContext = node.getBoundingClientRect().height;\r\n            let left = style.left;\r\n\r\n            let top;\r\n            if ((heightContext+style.top) > windowHeight) {\r\n                top = windowHeight - heightContext - 5;\r\n            } else {\r\n                top = style.top;\r\n            }\r\n           const styleCust = {left, top}\r\n            setStyleCustom(() => styleCust)\r\n\r\n        }\r\n    }, [style]);\r\n\r\n\r\n    if (data !== undefined) {\r\n        let elements = data.map((text, i) => {\r\n            if (text === '') {\r\n                return;\r\n            } else if (text === 'dropdown-divider') {\r\n                return (<div className=\"dropdown-divider\"></div>)\r\n            } else if (text instanceof Object) {\r\n\r\n                let arrayAction = text['Generate Command'];\r\n\r\n                let elements = arrayAction.map(element => {\r\n                    return (<li className=\"context-menu__item\" key={i}>\r\n                        <span className={\"context-menu__item_text\"}>\r\n                        {element}\r\n                        </span>\r\n                    </li>)\r\n                });\r\n                return (<li className=\"dropdown dropup context-menu__item\" key={i}>\r\n                    <div className=\"dropdown-toggle\" id=\"dropdownMenuButton\"\r\n                         data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <span className={\"context-menu__item_text\"}>Generate Command</span>\r\n                    </div>\r\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                        {elements}\r\n                    </div>\r\n                </li>)\r\n\r\n            } else {\r\n                return (<li className=\"context-menu__item\" key={i}>\r\n                    <FontAwesomeIcon icon={faDatabase} pulse={false}/>\r\n                    <span className={\"context-menu__item_text\"}>\r\n                    {text}\r\n                    </span>\r\n                </li>)\r\n            }\r\n\r\n        });\r\n\r\n        return (\r\n            <nav ref={measuredRef} className={\"context-menu\"} style={styleCustom ? styleCustom : null}>\r\n                <ul className=\"context-menu__items\">\r\n                    {elements}\r\n                </ul>\r\n            </nav>\r\n        );\r\n\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport default ContextMenu;","import React, {Component} from \"react\";\r\nimport {faPlusCircle, faTrashAlt} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './keyspace.css';\r\n\r\nconst $ = window.$;\r\n\r\nexport default class Keyspace extends Component {\r\n    state = {\r\n        title: '',\r\n        id: '',\r\n        nameKS: '',\r\n        strategy: '',\r\n        repl_factor: '',\r\n        durable_writes: false,\r\n        focus: '',\r\n        dcElements: [],\r\n        warn: '',\r\n        excludes: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        $(`#${this.props.id}`).modal('show')\r\n        if (this.props.objectForEdit) {\r\n            if (this.props.objectForEdit.replication) {\r\n                let strategy = '';\r\n                let repl_factor = '';\r\n                let elements = [];\r\n                if (this.props.objectForEdit.replication.class.includes('Simple')) {\r\n                    strategy = 'simple';\r\n                    repl_factor = +this.props.objectForEdit.replication.replication_factor;\r\n                } else {\r\n                    strategy = 'topology';\r\n                    Object.keys(this.props.objectForEdit.replication).forEach(prop => {\r\n\r\n                        if (prop !== 'class') {\r\n                            elements.push({dc: prop, number: +this.props.objectForEdit.replication[prop]})\r\n                        }\r\n                    })\r\n                }\r\n\r\n                this.setState(() => {\r\n                    return {\r\n                        durable_writes: this.props.objectForEdit.durableWrites,\r\n                        nameKS: this.props.objectForEdit.name,\r\n                        strategy: strategy,\r\n                        repl_factor: repl_factor,\r\n                        dcElements: elements,\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n        if(this.props.excludes){\r\n            this.setState(() => {\r\n                return {\r\n                    excludes: this.props.excludes\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        let id = e.target.id;\r\n        let value = e.target.value;\r\n        if (id === 'nameKS') {\r\n            if(this.state.excludes.includes(value)){\r\n                this.setWarn(value)\r\n            }else{\r\n\r\n                this.setState(() => {\r\n                    return {\r\n                        nameKS: value,\r\n                        warn: ''\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        if (id === 'simple' || id === 'topology') {\r\n            this.setState(() => {\r\n                return {\r\n                    strategy: id\r\n                }\r\n            })\r\n        }\r\n        if (id === 'repl_factor') {\r\n            this.setState(() => {\r\n                return {\r\n                    repl_factor: value\r\n                }\r\n            })\r\n        }\r\n        if (id === 'durable_writes') {\r\n            let checked = e.target.checked;\r\n            this.setState(() => {\r\n                return {\r\n                    durable_writes: checked\r\n                }\r\n            })\r\n        }\r\n        if (e.target.closest('.dcelement')) {\r\n            let index = +e.target.closest('.dcelement').id;\r\n\r\n            if (this.state.dcElements.length !== 0) {\r\n\r\n                let oldItem = this.state.dcElements[index];\r\n\r\n                let newItem;\r\n                if (e.target.className === 'name_dcelement') {\r\n                    newItem = {...oldItem, 'dc': e.target.value};\r\n                }\r\n                if (e.target.className === 'count_dcelement') {\r\n                    newItem = {...oldItem, 'number': e.target.value};\r\n                }\r\n\r\n                let start = this.state.dcElements.slice(0, index);\r\n                let end = this.state.dcElements.slice(index + 1);\r\n                let newElements = [...start, newItem, ...end]\r\n                this.setState(() => {\r\n                    return {dcElements: newElements}\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    handleActionButton = (e) => {\r\n        let closest = e.target.closest('.btn');\r\n        if (closest.id === 'addbutton') {\r\n            if (this.state.dcElements instanceof Array) {\r\n                let copy = this.state.dcElements.slice();\r\n                copy.push({dc: 'dc', number: 2})\r\n                this.setState(() => {\r\n                    return {dcElements: copy, focus: ''}\r\n                })\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        if (closest.id === 'removebutton') {\r\n            if (this.state.focus !== '') {\r\n                if (this.state.dcElements.length !== 0) {\r\n                    let start = this.state.dcElements.slice(0, this.state.focus);\r\n                    let end = this.state.dcElements.slice(this.state.focus + 1);\r\n                    let newElements = [...start, ...end]\r\n                    let focus = this.state.focus;\r\n                    this.setState(() => {\r\n                        return {dcElements: newElements, focus: --focus}\r\n                    })\r\n                }\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    makeElements = (elements) => {\r\n\r\n        if (elements.length !== 0) {\r\n\r\n            return elements.map((element, i) => {\r\n\r\n                return (\r\n                    <tr id={i} className={'dcelement'}>\r\n                        <td><input className={'name_dcelement'} value={element.dc}/></td>\r\n                        <td><input className={'count_dcelement'} type={'number'} value={+element.number}/></td>\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    setFocus = (e) => {\r\n        let closest = e.target.closest('.dcelement');\r\n        if (closest) {\r\n            let id = closest.id;\r\n            if (document.querySelector('.dcelement.focus')) {\r\n                document.querySelector('.dcelement.focus').classList.toggle('focus');\r\n            }\r\n\r\n            closest.classList.toggle('focus')\r\n            this.setState(() => {\r\n                return {focus: +id}\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let {strategy, nameKS, repl_factor, durable_writes, dcElements, warn} = this.state;\r\n        return (\r\n            <div className=\"modal fade\" id={this.props.id} data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\r\n                 role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\"\r\n                                id=\"staticBackdropLabel\">{this.props.id === 'createkeyspace' ? 'Create Keyspace' : 'Edit Keyspace'}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                                    onClick={this.props.close}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <form onChange={this.onChange}>\r\n                                <div><span>Keyspace name</span> <input id={'nameKS'} value={nameKS}\r\n                                                                       disabled={this.props.id !== 'createkeyspace'}/>\r\n                                    {warn}\r\n                                </div>\r\n\r\n                                <input type={'radio'} name={'strategy'} id={'simple'} checked={strategy === 'simple'}/>\r\n                                <label htmlFor=\"simple\">Use simple strategy</label>\r\n\r\n                                <div><span>Replication factor</span> <input style={{width: '50px', marginLeft: '10px'}}\r\n                                                                            disabled={strategy !== 'simple'}\r\n                                                                            type={'number'} id={'repl_factor'}\r\n                                                                            value={repl_factor}/></div>\r\n\r\n                                <input type={'radio'} name={'strategy'} id={'topology'}\r\n                                       checked={strategy === 'topology'}/>\r\n                                <label htmlFor=\"topology\">Use network topology strategy</label>\r\n\r\n                                <table className=\"table\" hidden={strategy !== 'topology'} onClick={this.setFocus}>\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Data Center</th>\r\n                                        <th scope=\"col\">Number of replicas</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {this.makeElements(dcElements)}\r\n                                    </tbody>\r\n                                </table>\r\n\r\n                                <div hidden={strategy !== 'topology'}>\r\n                                    <div className=\"dropdown-divider\"></div>\r\n                                    <button type={'button'} className={'btn btn-outline-success'}\r\n                                            style={{marginLeft: '10px'}} id={'addbutton'}\r\n                                            onClick={this.handleActionButton}>\r\n                                        <FontAwesomeIcon icon={faPlusCircle}/>\r\n                                    </button>\r\n                                    <button type={'button'} className={'btn btn-outline-warning'}\r\n                                            style={{marginLeft: '10px'}} id={'removebutton'}\r\n                                            onClick={this.handleActionButton}>\r\n                                        <FontAwesomeIcon icon={faTrashAlt}/>\r\n                                    </button>\r\n\r\n                                    <div className=\"dropdown-divider\"></div>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <input type=\"checkbox\" checked={durable_writes} id={'durable_writes'}/> <label\r\n                                    htmlFor={'durable_writes'}>Durable writes</label>\r\n                                </div>\r\n                            </form>\r\n\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button onClick={this.closeModal} type=\"button\" className=\"btn btn-secondary\"\r\n                                    data-dismiss=\"modal\">Cancel\r\n                            </button>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.createKS} disabled={strategy === '' || warn}>Save</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setWarn(value) {\r\n        this.setState(() => {\r\n            return {\r\n                warn: <span style={{color: \"red\", fontSize: 12}}>this keyspace already exists</span>,\r\n                nameKS: value\r\n            }\r\n        })\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState(() => {\r\n            return {\r\n                title: '',\r\n                id: '',\r\n                nameKS: '',\r\n                strategy: '',\r\n                repl_factor: '',\r\n                durable_writes: false,\r\n                focus: '',\r\n                dcElements: [],\r\n                warn: ''\r\n            }\r\n        })\r\n        this.props.close()\r\n    }\r\n\r\n    createKS = () => {\r\n        let KS\r\n        let {repl_factor, nameKS, durable_writes, dcElements} = this.state;\r\n        if (this.state.strategy === 'simple') {\r\n            let map = new Map();\r\n            map.set('class', 'simple');\r\n            map.set('replication_factor', repl_factor + '');\r\n            KS = {\r\n                name: nameKS, durableWrites: durable_writes, replication:\r\n                    Object.fromEntries(map.entries())\r\n            }\r\n\r\n        } else if (this.state.strategy === 'topology') {\r\n            let map = new Map();\r\n            map.set('class', 'topology');\r\n            if (dcElements.length !== 0) {\r\n                dcElements.forEach(element => {\r\n                    map.set(element.dc, element.number + '');\r\n                })\r\n            }\r\n\r\n            KS = {name: nameKS, durableWrites: durable_writes, replication: Object.fromEntries(map.entries())}\r\n        }\r\n        this.props.createKS(KS);\r\n\r\n    }\r\n}","import Keyspace from \"./keyspace\";\r\nexport default Keyspace;","import UserType from \"./user-type\";\r\nexport default UserType;","import UserFunction from \"./user-function\";\r\nexport default UserFunction;","import React, {useEffect, useState} from \"react\";\r\nimport Service from \"../service/service\";\r\nimport {Role as R} from \"../../protobuffer/compiled.js\";\r\n\r\n\r\nconst $ = window.$;\r\n\r\nconst Role = ({id, close, exclud, connect, save, roleForEdit}) => {\r\n\r\n    const service = new Service();\r\n    const [nameRole, setNameRole] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirm_password, setConfirmPassword] = useState('');\r\n    const [excludes, setExcludes] = useState('');\r\n    const [warn, setWarning] = useState('');\r\n    const [warnPassword, setWarningPassword] = useState('');\r\n    const [isSuperUser, setSuperUser] = useState(false);\r\n    const [isCanLogin, setCanLogin] = useState(false);\r\n    const [connection, setConnection] = useState(false);\r\n    const [responseQuery, setResponse] = useState('');\r\n    const [errorResult, setErrorResult] = useState('');\r\n    const [title, setTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        $(`#${id}`).modal('show')\r\n\r\n        setConnection(connect);\r\n\r\n\r\n        if (id === 'createrole' || id === 'createuser') {\r\n\r\n            if (id === 'createuser') {\r\n                setTitle('Create User')\r\n            }\r\n            if (id === 'createrole') {\r\n                setTitle('Create Role')\r\n            }\r\n            setExcludes(() => exclud)\r\n        } else {\r\n            if (id === 'edituser') {\r\n                setTitle('Edit User')\r\n            }\r\n            if (id === 'editrole') {\r\n                setTitle('Edit Role')\r\n            }\r\n            setExcludes(() => exclud)\r\n            setNameRole(roleForEdit.name)\r\n            if (roleForEdit.options) {\r\n                let map = new Map(Object.entries(roleForEdit.options));\r\n                if (map.has('login')) {\r\n                    if (map.get('login') === 'true') {\r\n                        setCanLogin(true)\r\n                    }\r\n                }\r\n                if (map.has('superuser')) {\r\n                    if (map.get('superuser') === 'true') {\r\n                        setSuperUser(true)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (password && confirm_password) {\r\n            if (password !== confirm_password) {\r\n                setWarningPassword(() => <span style={{color: \"red\", fontSize: 12}}>passwords not equals</span>)\r\n            } else {\r\n                setWarningPassword(() => '');\r\n            }\r\n        } else {\r\n            if (warnPassword !== '')\r\n                setWarningPassword(() => '');\r\n        }\r\n\r\n    }, [password, confirm_password])\r\n\r\n\r\n    const chooseHandleFunction = (typeAction, data) => {\r\n        if (typeAction === 'createrole' || typeAction === 'createuser') {\r\n            return service.createRole(data)\r\n        }\r\n        if (typeAction === 'editrole' || typeAction === 'edituser') {\r\n            return service.editRole(data)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const createRole = () => {\r\n        let options = {};\r\n\r\n        options[\"password\"] = password;\r\n\r\n        if(id === 'createuser'){\r\n            options[\"login\"] = \"true\";\r\n        }\r\n\r\n        if(id !== 'edituser' && id !== 'createuser') {\r\n            options[\"login\"] = isCanLogin + '';\r\n        }\r\n\r\n        options[\"superuser\"] = isSuperUser + '';\r\n\r\n\r\n        let message = R.create({name: nameRole, connection, options})\r\n\r\n        let data = R.encode(message).finish();\r\n\r\n        chooseHandleFunction(id, data).then(result => {\r\n            try {\r\n                if (result instanceof ArrayBuffer) {\r\n                    let response = new TextDecoder(\"utf-8\").decode(result);\r\n\r\n                    if (response.includes(\"successfully\")) {\r\n                        setErrorResult(() => '');\r\n                        setResponse(() => response);\r\n                        setTimeout(() => {\r\n                            save(id);\r\n                        }, 1000)\r\n\r\n                    } else {\r\n                        setErrorResult(() => 'error scroll');\r\n                        setResponse(() => response);\r\n                    }\r\n\r\n\r\n                }\r\n            } catch (e) {\r\n                let textDecoder = new TextDecoder(\"utf-8\").decode(result);\r\n                if (textDecoder.length > 50) {\r\n                    setErrorResult(() => 'error scroll')\r\n                } else {\r\n                    setErrorResult(() => 'error')\r\n                }\r\n                setResponse(() => textDecoder);\r\n\r\n            }\r\n\r\n\r\n        }).catch(e => {\r\n                let\r\n                    textDecoder = new TextDecoder(\"utf-8\").decode(e);\r\n                if (textDecoder.length > 50) {\r\n                    setErrorResult(() => 'error scroll')\r\n                } else {\r\n                    setErrorResult(() => 'error')\r\n                }\r\n                setResponse(() => textDecoder);\r\n            }\r\n        )\r\n    }\r\n\r\n    const setWarn = (value) => {\r\n        setWarning(() => <span style={{color: \"red\", fontSize: 12}}>this role already exists</span>);\r\n        setNameRole(() => value);\r\n    }\r\n    const onChange = (e) => {\r\n        let id = e.target.id;\r\n        let value = e.target.value;\r\n        if (id === 'nameRole') {\r\n            if (excludes.includes(value)) {\r\n                setWarn(value)\r\n            } else {\r\n                setWarning(() => '');\r\n                setNameRole(() => value);\r\n            }\r\n        }\r\n        if (id === 'super_user') {\r\n            let checked = e.target.checked;\r\n            setSuperUser(() => checked)\r\n        }\r\n        if (id === 'can_login') {\r\n            let checked = e.target.checked;\r\n            setCanLogin(() => checked)\r\n        }\r\n        if (id === 'password') {\r\n            setPassword(() => value)\r\n        }\r\n        if (id === 'confirm_password') {\r\n            setConfirmPassword(() => value)\r\n        }\r\n    }\r\n    //todo: show password icon and implementation\r\n    return (\r\n        <div className=\"modal fade\" id={id} data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\r\n             role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\"\r\n                            id=\"staticBackdropLabel\">{title}</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                                onClick={close}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <form onChange={onChange}>\r\n                            <div><span>Role name</span> <input id={'nameRole'} value={nameRole}\r\n                                                               disabled={id !== 'createrole' && id !== 'createuser'}/>\r\n                                {warn}\r\n                            </div>\r\n\r\n                            <div><span>Password</span> <input id={'password'} type={'password'} value={password}\r\n                            />{warnPassword}\r\n                            </div>\r\n\r\n                            <div><span>Confirm Password</span> <input id={'confirm_password'} type={'password'}\r\n                                                                      value={confirm_password}\r\n                            />{warnPassword}</div>\r\n\r\n                            <div>\r\n                                <input type=\"checkbox\" checked={isSuperUser} id={'super_user'}/> <label\r\n                                htmlFor={'super_user'}>Superuser</label>\r\n                            </div>\r\n                            <div hidden={id === 'createuser'}>\r\n                                <input type=\"checkbox\" checked={isCanLogin} id={'can_login'}/> <label\r\n                                htmlFor={'can_login'}>Can login</label>\r\n                            </div>\r\n                            <div className={`valid ${errorResult}`}>{responseQuery}</div>\r\n                        </form>\r\n\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button onClick={() => close()} type=\"button\" className=\"btn btn-secondary\"\r\n                                data-dismiss=\"modal\">Cancel\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => createRole()}\r\n                                disabled={warn || nameRole === ''}>Save\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Role;","import Role from \"./role\";\r\nexport default Role;","import React, {useEffect} from \"react\";\r\nimport {faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst $ = window.$;\r\nconst ConfirmationModal = ({textToConfirm, killerFunction, close}) => {\r\n\r\n    useEffect(() => {\r\n        $(`#confirmation-modal`).modal('show')\r\n    }, [])\r\n\r\n    const hideModalAndExecuteKillerFunction = (killerFunction) => {\r\n        $('#confirmation-modal').modal('hide')\r\n        killerFunction();\r\n    }\r\n    return ((\r\n        <div className=\"modal fade\" id={'confirmation-modal'} data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\r\n             role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\"\r\n                            id=\"staticBackdropLabel\">Confirmation</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                                onClick={() => close()}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <span style={{float: \"left\", marginRight: 30}}><FontAwesomeIcon icon={faQuestion}/></span>\r\n                         {textToConfirm}\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\"\r\n                                data-dismiss=\"modal\" onClick={() => close()}>NO\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => hideModalAndExecuteKillerFunction(killerFunction)}>YES\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default ConfirmationModal;","import ConfirmationModal from \"./confirmation-modal\";\r\n\r\nexport default ConfirmationModal;","import React, {Component} from \"react\";\r\nimport CreateConnection from \"../create-connection\";\r\nimport '../../css/main.css'\r\nimport './app.css'\r\nimport LeftPanel from \"../left-panel\";\r\nimport RightPanel from \"../right-panel\";\r\nimport LocalStorageService from \"../service/local-storage-service\";\r\nimport HeaderButtons from \"../header-buttons\";\r\nimport Service from \"../service/service\";\r\nimport {KeySpaces, KeySpace, Roles} from \"../../protobuffer/compiled.js\"\r\nimport {Error} from \"../../protobuffer/error.js\"\r\nimport Connection from \"../connection\";\r\nimport * as _ from 'lodash'\r\nimport {guidGenerator} from '../utils/utils'\r\nimport 'react-virtualized/styles.css';\r\nimport ContextMenu from \"../context-menu\";\r\nimport Keyspace from \"../keyspace\";\r\nimport UserType from \"../user-type\";\r\nimport UserFunction from \"../user-function\";\r\nimport Role from \"../role\";\r\nimport ConfirmationModal from \"../confirmation-modal\";\r\nimport SplitPane from \"react-split-pane\";\r\n\r\n\r\nconst $ = window.$;\r\n\r\nexport default class App extends Component {\r\n\r\n\r\n    state = {\r\n        connections: new Map(),\r\n        rightPanelContent: [],\r\n        action: '',\r\n        focusId: '',\r\n        focus: '',\r\n        typeFocus: '',\r\n        currentConnection: '',\r\n        currentKeyspace: '',\r\n        connected: [],\r\n        showcontext: false,\r\n        stylecontext: '',\r\n        dataContext: [],\r\n        toast: '',\r\n        dataToast: '',\r\n        result: '',\r\n        loading: false\r\n    };\r\n\r\n\r\n    storage = new LocalStorageService();\r\n    service = new Service();\r\n\r\n\r\n    getListConnections = () => {\r\n        let items = this.state.connections;\r\n        if (!!items) {\r\n            let elements = []\r\n            items.forEach((object, name) => {\r\n                if (object !== '') {\r\n                    elements.push(<Connection data={object}/>)\r\n                }\r\n            })\r\n            return elements;\r\n        }\r\n    }\r\n\r\n    makeConnectionWithChangedProps = () => {\r\n        let items = this.storage.get();\r\n        let mapConnections;\r\n        if (!!items) {\r\n            if (this.state.connections.length !== 0) {\r\n                mapConnections = new Map(this.state.connections);\r\n            } else {\r\n                mapConnections = new Map();\r\n            }\r\n            try {\r\n                items.forEach(object => {\r\n                        let ob;\r\n                        if (object instanceof Object) {\r\n                            ob = object;\r\n                        } else {\r\n                            ob = JSON.parse(object);\r\n                        }\r\n                        let alias = ob.connection_alias;\r\n                        if (mapConnections.has(alias)) {\r\n                            ob = mapConnections.get(alias);\r\n                        }\r\n\r\n                        this.addAdditionalProperties(ob)\r\n                        mapConnections.set(alias, ob);\r\n                    }\r\n                )\r\n            } catch\r\n                (e) {\r\n\r\n            }\r\n        }\r\n\r\n        return mapConnections;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('click', this.currentFocus);\r\n        document.getElementById(\"tree-container\").addEventListener('dblclick', this.currentFocus);\r\n        document.getElementById(\"tree-container\").addEventListener('mouseover', this.currentFocus);\r\n        document.getElementById(\"tree-container\").addEventListener('mouseout', this.currentFocus);\r\n        document.addEventListener('contextmenu', this.currentFocus);\r\n\r\n\r\n        let elements = this.makeConnectionWithChangedProps();\r\n\r\n        this.setState(() => {\r\n            return ({connections: elements})\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n    makeContextData = (typeContext) => {\r\n        if (typeContext === 'connection') {\r\n            return [`${this.state.connected.includes(this.state.currentConnection) ? 'Create new Keyspace' : ''}`, 'CqlEditor',\r\n                `${this.state.connected.includes(this.state.currentConnection) ? 'Disconnect' : 'Connect'}`];\r\n        }\r\n        if (typeContext === 'keyspace') {\r\n            return ['Create new Table',\r\n                'dropdown-divider',\r\n                'Create new Keyspace',\r\n                `Edit '${this.state.focus}' Keyspace`,\r\n                `Delete '${this.state.focus}' Keyspace`,\r\n                'dropdown-divider',\r\n                'CqlEditor',\r\n                'dropdown-divider',\r\n                `${this.state.connected.includes(this.state.currentConnection) ? 'Disconnect' : 'Connect'}`]\r\n        }\r\n\r\n        if (typeContext === 'tables') {\r\n            return ['Create new Table'\r\n                // , 'Refresh'\r\n            ];\r\n        }\r\n        if (typeContext === 'table') {\r\n            return ['Create new Table',\r\n                `Edit '${this.state.focus}' Table`,\r\n                `Delete '${this.state.focus}' Table`,\r\n                {\r\n                    'Generate Command': ['select * from ', 'insert into to'\r\n                        // , 'update to'\r\n                        , 'delete from', 'create index']\r\n                }\r\n            ];\r\n        }\r\n        if (typeContext === 'types') {\r\n            return ['Create new User Type'\r\n\r\n            ];\r\n        }\r\n        if (typeContext === 'type') {\r\n            return ['Create new User Type',\r\n                `Edit '${this.state.focus}' User Type`,\r\n                `Delete '${this.state.focus}' User Type`,\r\n                {'Generate Command': ['create type to', 'drop type to']}\r\n            ];\r\n        }\r\n        if (typeContext === 'roles') {\r\n            return ['Create new Role'];\r\n        }\r\n        if (typeContext === 'role') {\r\n            return ['Create new Role',\r\n                `Edit '${this.state.focus}' Role`,\r\n                `Delete '${this.state.focus}' Role`\r\n\r\n            ];\r\n        }\r\n        if (typeContext === 'users') {\r\n            return ['Create new User User'\r\n\r\n            ];\r\n        }\r\n        if (typeContext === 'user') {\r\n            return ['Create new User ',\r\n                `Edit '${this.state.focus}' User`,\r\n                `Delete '${this.state.focus}' User`\r\n            ];\r\n        }\r\n        if (typeContext === 'agfunctions') {\r\n            return ['Create new Aggregate Function'\r\n            ];\r\n        }\r\n        if (typeContext === 'agfunction') {\r\n            return ['Create new Aggregate Function',\r\n                `Show '${this.state.focus}' Aggregate Function`,\r\n                `Delete '${this.state.focus}' Aggregate Function`,\r\n                // {'Generate Command': ['create aggregate function to', 'drop aggregate function to']}\r\n            ];\r\n        }\r\n        if (typeContext === 'functions') {\r\n            return ['Create new User Defined Function'\r\n            ];\r\n        }\r\n        if (typeContext === 'function') {\r\n            return ['Create new User Defined Function',\r\n                `Show '${this.state.focus}' User Defined Function`,\r\n                `Delete '${this.state.focus}' User Defined Function`,\r\n                // {'Generate Command': ['create function to', 'drop function to']}\r\n            ];\r\n        }\r\n        if (typeContext === 'views') {\r\n            return ['Create new Materialized View'\r\n            ];\r\n        }\r\n        if (typeContext === 'view') {\r\n            return ['Create new Materialized View',\r\n                `Show '${this.state.focus}' Materialized View`,\r\n                `Delete '${this.state.focus}' Materialized View`,\r\n                {'Generate Command': ['select * from', 'create materialized view', 'drop materialized view to']}\r\n            ];\r\n        }\r\n\r\n    }\r\n\r\n    createUserType = () => {\r\n        let object = {\r\n            type: 'userType',\r\n            action: 'create',\r\n            show: 'show active',\r\n            fields: [],\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + '.New User Type'\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    createUserFunction = () => {\r\n        let object = {\r\n            type: 'userFunction',\r\n            action: 'create',\r\n            show: 'show active',\r\n            viewFunction: 'CREATE OR REPLACE FUNCTION function3 ()\\n' +\r\n                'RETURNS NULL ON NULL INPUT\\n' +\r\n                'RETURNS text\\n' +\r\n                'LANGUAGE java\\n' +\r\n                'AS \\'return \"\";\\';',\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + '.New UDF'\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    createAggregateFunction = () => {\r\n        let object = {\r\n            type: 'aggregateFunction',\r\n            action: 'create',\r\n            show: 'show active',\r\n            viewFunction: `CREATE OR REPLACE AGGREGATE aggregate ()\\nSFUNC\\nSTYPE text\\nINITCOND ;`,\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + '.New Aggregate'\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n\r\n\r\n    createMateralizedView = () => {\r\n        let object = {\r\n            type: 'view',\r\n            action: 'create',\r\n            show: 'show active',\r\n            viewFunction: `CREATE MATERIALIZED VIEW view \\nAS SELECT\\nFROM\\nWHERE\\nPRIMARY KEY ()\\nWITH`,\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + '.New View'\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    createCqlEditor = (content) => {\r\n        let object = {\r\n            connection: this.state.currentConnection,\r\n            type: 'cqleditor',\r\n            action: 'create',\r\n            show: 'show active',\r\n            content: content,\r\n            name: 'CQLEditor',\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    createTableHandler = () => {\r\n        let object = {\r\n            type: 'table',\r\n            action: 'create',\r\n            show: 'show active',\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + '.New Table'\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    editTableHandler = (table) => {\r\n\r\n        let object = {\r\n            type: 'table',\r\n            action: 'edit',\r\n            show: 'show active',\r\n            table: table,\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + '.' + table.name\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    showUserFunction = () => {\r\n\r\n        let {focusId, connections, currentConnection} = this.state;\r\n\r\n        let content = connections.get(currentConnection);\r\n\r\n        let find = this.findById(content, 'id_presentation', focusId);\r\n\r\n        let showFunction = _.cloneDeep(find)\r\n\r\n        let name = showFunction.name;\r\n\r\n\r\n        let calledOnNullInput = showFunction.calledOnNullInput;\r\n        let returnsType = showFunction.returnType;\r\n        let language = showFunction.language;\r\n        let body = showFunction.body;\r\n        let signature = showFunction.signature;\r\n\r\n\r\n        let calledOrReturns = 'RETURNS NULL'\r\n        if (calledOnNullInput) {\r\n            calledOrReturns = 'CALLED '\r\n        }\r\n\r\n\r\n        let object = {\r\n            type: 'userFunction',\r\n            action: 'show',\r\n            show: 'show active',\r\n            viewFunction: `CREATE OR REPLACE FUNCTION ${signature}\\n${calledOrReturns} NULL ON NULL INPUT\\nRETURNS ${returnsType}\\nLANGUAGE ${language}\\nAS '${body}'`,\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + `.${name}`,\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    showAggregateFunction = () => {\r\n\r\n        let {focusId, connections, currentConnection} = this.state;\r\n\r\n        let content = connections.get(currentConnection);\r\n\r\n        let find = this.findById(content, 'id_presentation', focusId);\r\n\r\n        let showFunction = _.cloneDeep(find)\r\n\r\n        let name = showFunction.name;\r\n\r\n\r\n        let sFunc = showFunction.sFunc;\r\n        let sType = showFunction.sType;\r\n        let finalFunc = showFunction.finalFunc ? 'FINALFUNC ' + showFunction.finalFunc : '';\r\n        let initCond = showFunction.initCond ? 'INITCOND ' + showFunction.initCond : '';\r\n        let orReplace = showFunction.orReplace ? 'OR REPLACE' : '';\r\n        let signature = showFunction.signature;\r\n        let ifNotExist = showFunction.ifNotExist ? 'IF NOT EXISTS' : '';\r\n\r\n\r\n        let object = {\r\n            type: 'aggregateFunction',\r\n            action: 'show',\r\n            show: 'show active',\r\n            viewFunction: `CREATE ${orReplace} AGGREGATE ${ifNotExist} ${signature}\\nSFUNC ${sFunc}\\nSTYPE ${sType}\\n${finalFunc}\\n${initCond}`,\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + `.${name}`,\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n    showMaterializedView = () => {\r\n\r\n        let {focusId, connections, currentConnection} = this.state;\r\n\r\n        let content = connections.get(currentConnection);\r\n\r\n        let find = this.findById(content, 'id_presentation', focusId);\r\n\r\n        let showFunction = _.cloneDeep(find)\r\n\r\n        let name = showFunction.name;\r\n\r\n\r\n        let indexOf = showFunction.describe.indexOf('WITH');\r\n\r\n        let describe = showFunction.describe.substring(0, indexOf);\r\n\r\n\r\n        let object = {\r\n            type: 'view',\r\n            action: 'show',\r\n            show: 'show active',\r\n            viewFunction: describe,\r\n            name: this.state.currentConnection + '.' + this.state.currentKeyspace + `.${name}`,\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n\r\n    pushToRightPanel(object) {\r\n        let {rightPanelContent} = this.state;\r\n        let newArray = [];\r\n\r\n        if (rightPanelContent.length === 0) {\r\n            newArray.push(object)\r\n        } else {\r\n\r\n            newArray = _.cloneDeep(this.state.rightPanelContent);\r\n            newArray.forEach(element => {\r\n                if (element) {\r\n                    element.show = ''\r\n                }\r\n            });\r\n            newArray.push(object)\r\n        }\r\n        this.setState(() => {\r\n            return {rightPanelContent: newArray, showcontext: false}\r\n        })\r\n    }\r\n\r\n\r\n    findById = (objectForSeek, key, focusId) => {\r\n        if (objectForSeek[key] === focusId) {\r\n            return objectForSeek;\r\n        } else {\r\n            for (const el of Object.values(objectForSeek)) {\r\n                if (Array.isArray(el)) {\r\n                    for (const k of el) {\r\n                        let result = this.findById(k, key, focusId);\r\n                        if (result) {\r\n                            return result;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    editUserType = () => {\r\n\r\n        let {focusId, connections, currentConnection} = this.state;\r\n\r\n        let objectForSeek = connections.get(currentConnection);\r\n\r\n\r\n        let find = this.findById(objectForSeek, 'id_presentation', focusId);\r\n\r\n\r\n        let fields = []\r\n\r\n        find.fields.map((element => {\r\n            if (element.name) {\r\n                let newVar = {name: element.name, type: element.type};\r\n                fields.push(newVar)\r\n            }\r\n        }))\r\n\r\n\r\n        let object = {\r\n            type: 'userType',\r\n            action: 'edit',\r\n            fields,\r\n            show: 'show active',\r\n            name: `${this.state.currentConnection}.${this.state.currentKeyspace}.${find.name}`,\r\n        }\r\n        this.pushToRightPanel(object);\r\n    }\r\n\r\n    // todo: change it\r\n    executeContextMenuAction = (text) => {\r\n        let {typeFocus, focusId, currentConnection, connections, focus, currentKeyspace} = this.state;\r\n        if (text.indexOf('Generate') === 0) {\r\n            //nop\r\n        } else if (text.indexOf('Create') === 0) {\r\n            if (typeFocus === 'role' || typeFocus === 'roles') {\r\n                this.setState(() => {\r\n                    return {action: 'createrole'}\r\n                })\r\n            }\r\n            if (typeFocus === 'user' || typeFocus === 'users') {\r\n                this.setState(() => {\r\n                    return {action: 'createuser'}\r\n                })\r\n            }\r\n            if (typeFocus === 'type' || typeFocus === 'types') {\r\n                this.createUserType();\r\n            }\r\n            if (typeFocus === 'function' || typeFocus === 'functions') {\r\n                this.createUserFunction();\r\n            }\r\n            if (typeFocus === 'agfunction' || typeFocus === 'agfunctions') {\r\n                this.createAggregateFunction();\r\n            }\r\n            if (typeFocus === 'table' || typeFocus === 'tables') {\r\n                this.createTableHandler();\r\n            }\r\n            if (typeFocus === 'view' || typeFocus === 'views') {\r\n                this.createMateralizedView();\r\n            }\r\n\r\n        } else if (text.indexOf('Show') === 0) {\r\n            if (typeFocus === 'function') {\r\n                this.showUserFunction();\r\n            }\r\n            if (typeFocus === 'agfunction') {\r\n                this.showAggregateFunction();\r\n            }\r\n            if (typeFocus === 'view') {\r\n                this.showMaterializedView();\r\n            }\r\n\r\n\r\n        } else if (text.indexOf('Edit') === 0) {\r\n            if (typeFocus === 'keyspace') {\r\n                this.setState(() => {\r\n                    return {action: 'editkeyspace'}\r\n                })\r\n            }\r\n            if (typeFocus === 'type') {\r\n                this.editUserType();\r\n            }\r\n            if (typeFocus === 'role') {\r\n                this.setState(() => {\r\n                    return {action: 'editrole'}\r\n                })\r\n            }\r\n            if (typeFocus === 'user') {\r\n                this.setState(() => {\r\n                    return {action: 'edituser'}\r\n                })\r\n            }\r\n            if (typeFocus === 'table') {\r\n\r\n                let connect = connections.get(currentConnection);\r\n\r\n                let targetTable = this.findById(connect, 'id_presentation', focusId);\r\n\r\n                let cloneTable = _.cloneDeep(targetTable);\r\n\r\n                if (cloneTable) {\r\n                    this.editTableHandler(targetTable);\r\n                }\r\n\r\n\r\n            }\r\n        } else if (text.indexOf('Delete') === 0) {\r\n            if (typeFocus === 'keyspace') {\r\n                this.setState(() => {\r\n                    return {action: 'dropkeyspace'}\r\n                })\r\n            }\r\n            if (typeFocus === 'type') {\r\n                this.setState(() => {\r\n                    return {action: 'droptype'}\r\n                })\r\n\r\n            }\r\n            if (typeFocus === 'function') {\r\n                this.setState(() => {\r\n                    return {action: 'dropfunction'}\r\n                })\r\n            }\r\n            if (typeFocus === 'agfunction') {\r\n                this.setState(() => {\r\n                    return {action: 'dropagfunction'}\r\n                })\r\n            }\r\n            if (typeFocus === 'view') {\r\n                this.setState(() => {\r\n                    return {action: 'dropview'}\r\n                })\r\n            }\r\n            if (typeFocus === 'role') {\r\n                this.setState(() => {\r\n                    return {action: 'droprole'}\r\n                })\r\n            }\r\n            if (typeFocus === 'user') {\r\n                this.setState(() => {\r\n                    return {action: 'dropuser'}\r\n                })\r\n            }\r\n            if (typeFocus === 'table') {\r\n                this.setState(() => {\r\n                    return {action: 'droptable'}\r\n                })\r\n            }\r\n        } else if (text.indexOf('CqlEditor') === 0) {\r\n            this.createCqlEditor('')\r\n        } else if (text.indexOf('Connect') === 0) {\r\n            this.setState(() => {\r\n                return {action: 'connect'}\r\n            })\r\n        } else if (text.indexOf('Disconnect') === 0) {\r\n            this.setState(() => {\r\n                return {action: 'disconnect'}\r\n            })\r\n        } else if (text.indexOf('select') === 0) {\r\n            let content = `SELECT ${'*'} FROM ${currentKeyspace}.${focus}`\r\n            this.createCqlEditor(content)\r\n        } else if (text.indexOf('insert') === 0) {\r\n            let dataForSeek = connections.get(currentConnection);\r\n            let findObject = this.findById(dataForSeek, \"id_presentation\", focusId);\r\n            let columnsName = findObject.columns.map((item, i) => {\r\n                if (item.name !== undefined) {\r\n                    return item.name\r\n                }\r\n\r\n            }).filter(item => item !== undefined);\r\n            let fill = Array(columnsName.length).fill(' ');\r\n            let content = `INSERT INTO ${currentKeyspace}.${focus}(${columnsName}) VALUES (${fill})`\r\n            this.createCqlEditor(content)\r\n        }\r\n            // else if (text.indexOf('update') === 0) {\r\n            //     console.log('update ' + this.state.typeFocus)\r\n        // }\r\n        else if (text.indexOf('delete') === 0) {\r\n            let content = ` DROP TABLE ${currentKeyspace}.${focus}`\r\n            this.createCqlEditor(content)\r\n        } else if (text.indexOf('create index') === 0) {\r\n            let content = `CREATE INDEX new_index ON ${currentKeyspace}.${focus} ()`\r\n            this.createCqlEditor(content)\r\n        }\r\n    }\r\n\r\n    dropUDTType = () => {\r\n\r\n        let {rightPanelContent, currentConnection, currentKeyspace, focus, typeFocus, loading, focusId} = this.state;\r\n        let typeForDelete;\r\n        if (typeFocus === 'type') {\r\n            typeForDelete = currentConnection + '.' + currentKeyspace + '.' + focus;\r\n        }\r\n\r\n\r\n        if (!loading) {\r\n            let copyRightPanel = _.cloneDeep(rightPanelContent)\r\n            let map = _.cloneDeep(this.state.connections);\r\n            let contentConnection = map.get(this.state.currentConnection);\r\n\r\n\r\n            let deletingItem = this.findById(contentConnection, 'id_presentation', focusId);\r\n\r\n\r\n            deletingItem['rotation'] = 'spinner'\r\n\r\n            this.setState(() => {\r\n                return {showcontext: false, loading: true, connections: map}\r\n            })\r\n\r\n\r\n            this.service.dropUserType(typeForDelete).then(e => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n                        if (rightPanelContent.length !== 0) {\r\n\r\n\r\n                            let number = rightPanelContent.findIndex(el => el.name === typeForDelete);\r\n                            if (number !== -1) {\r\n\r\n                                copyRightPanel.splice(number, 1);\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copyRightPanel}\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        deletingItem['rotation'] = ''\r\n                        this.setState(() => {\r\n                            return {rightPanelContent: copyRightPanel}\r\n                        })\r\n\r\n                    }\r\n\r\n                    let {host, port, user, pass, connection_alias} = this.getConnectionProperies(currentConnection);\r\n\r\n                    if (currentKeyspace)\r\n                        this.service.getTypes(host, port, connection_alias, user, pass, currentKeyspace).then(result => {\r\n\r\n                                if (result instanceof ArrayBuffer) {\r\n\r\n                                    let uint8View = new Uint8Array(result);\r\n                                    try {\r\n\r\n                                        let decoded = KeySpace.decode(uint8View);\r\n\r\n                                        if (decoded.length === 0) {\r\n                                            this.disconnectState()\r\n                                        } else {\r\n\r\n                                            let userTypes = decoded.userTypes;\r\n\r\n                                            this.addAdditionalProperties(userTypes)\r\n\r\n\r\n                                            let keyspace = this.findById(contentConnection, 'name', currentKeyspace);\r\n\r\n                                            keyspace.userTypes = userTypes;\r\n\r\n                                            this.setState(() => {\r\n                                                return {connections: map, loading: false}\r\n                                            })\r\n                                        }\r\n\r\n                                    } catch (e) {\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        ).catch(e => {\r\n                            this.setState(() => {\r\n                                return {loading: false}\r\n                            })\r\n                        })\r\n\r\n\r\n                }\r\n\r\n            }).catch((e) => {\r\n                    this.makeDataForToast(e.toString())\r\n                    this.setState(() => {\r\n                        return {loading: false}\r\n                    })\r\n                }\r\n            )\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n\r\n    }\r\n    dropRole = () => {\r\n\r\n        let {currentConnection, focus, typeFocus, loading, focusId} = this.state;\r\n        let nameRoleWithConnection;\r\n        if (typeFocus === 'role' || typeFocus === 'user') {\r\n            nameRoleWithConnection = currentConnection + '.' + focus;\r\n        }\r\n\r\n\r\n        if (!loading) {\r\n\r\n            let map = _.cloneDeep(this.state.connections);\r\n            let contentConnection = map.get(this.state.currentConnection);\r\n\r\n\r\n            let deletingItem = this.findById(contentConnection, 'id_presentation', focusId);\r\n\r\n\r\n            deletingItem['rotation'] = 'spinner'\r\n\r\n            this.setState(() => {\r\n                return {showcontext: false, loading: true, connections: map}\r\n            })\r\n\r\n\r\n            this.service.dropRole(nameRoleWithConnection).then(e => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n\r\n                    } else {\r\n                        deletingItem['rotation'] = ''\r\n\r\n                    }\r\n\r\n\r\n                    let {host, port, user, pass, connection_alias} = this.getConnectionProperies(currentConnection);\r\n\r\n\r\n                    this.service.getRoles(host, port, connection_alias, user, pass).then(result => {\r\n\r\n                            if (result instanceof ArrayBuffer) {\r\n\r\n                                let uint8View = new Uint8Array(result);\r\n                                try {\r\n\r\n                                    let decoded = Roles.decode(uint8View);\r\n\r\n                                    if (decoded.length === 0) {\r\n                                        this.disconnectState()\r\n                                    } else {\r\n\r\n                                        let users = _.cloneDeep(decoded.roles);\r\n\r\n                                        this.addAdditionalProperties(decoded.roles);\r\n                                        this.addAdditionalProperties(users);\r\n\r\n\r\n                                        contentConnection['roles'] = decoded.roles;\r\n                                        contentConnection['users'] = users.filter(item => {\r\n\r\n                                                if (item.name === undefined) return true;\r\n                                                if (item.options) {\r\n                                                    return item.options.login === 'true';\r\n\r\n                                                }\r\n                                            }\r\n                                        )\r\n\r\n                                        this.setState(() => {\r\n                                            return {connections: map, loading: false}\r\n                                        })\r\n                                    }\r\n\r\n                                } catch (e) {\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    ).catch(e => {\r\n                        this.setState(() => {\r\n                            return {loading: false}\r\n                        })\r\n                    })\r\n\r\n\r\n                }\r\n\r\n            }).catch((e) => {\r\n                    this.makeDataForToast(e.toString())\r\n                    this.setState(() => {\r\n                        return {loading: false}\r\n                    })\r\n                }\r\n            )\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n\r\n    }\r\n\r\n    dropUserFunction = () => {\r\n\r\n        let {rightPanelContent, currentConnection, currentKeyspace, typeFocus, loading, focusId, connections} = this.state;\r\n        let funcForDelete;\r\n        let data = connections.get(currentConnection);\r\n        let targetFunction = this.findById(data, 'id_presentation', focusId);\r\n        if (typeFocus === 'function') {\r\n            funcForDelete = currentConnection + '.' + currentKeyspace + '.' + targetFunction.signature;\r\n        }\r\n\r\n\r\n        if (!loading) {\r\n            let copyRightPanel = _.cloneDeep(rightPanelContent)\r\n            let map = _.cloneDeep(connections);\r\n            let contentConnection = map.get(currentConnection);\r\n\r\n\r\n            let deletingItem = this.findById(contentConnection, 'id_presentation', focusId);\r\n\r\n\r\n            deletingItem['rotation'] = 'spinner'\r\n\r\n            this.setState(() => {\r\n                return {showcontext: false, loading: true, connections: map}\r\n            })\r\n\r\n\r\n            this.service.dropUserFunction(funcForDelete).then(e => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n                        if (rightPanelContent.length !== 0) {\r\n\r\n\r\n                            let number = rightPanelContent.findIndex(el => el.name === funcForDelete);\r\n                            if (number !== -1) {\r\n                                // todo : not remove! simple null set\r\n                                copyRightPanel.splice(number, 1);\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copyRightPanel}\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        deletingItem['rotation'] = ''\r\n                        this.setState(() => {\r\n                            return {rightPanelContent: copyRightPanel}\r\n                        })\r\n\r\n                    }\r\n\r\n                    let {host, port, user, pass, connection_alias} = this.getConnectionProperies(currentConnection);\r\n\r\n                    if (currentKeyspace)\r\n                        this.service.getUserFunctions(host, port, connection_alias, user, pass, currentKeyspace).then(result => {\r\n\r\n                                if (result instanceof ArrayBuffer) {\r\n\r\n                                    let uint8View = new Uint8Array(result);\r\n                                    try {\r\n\r\n                                        let decoded = KeySpace.decode(uint8View);\r\n\r\n                                        if (decoded.length === 0) {\r\n                                            this.disconnectState()\r\n                                        } else {\r\n\r\n                                            let userTypes = decoded.userFunctions;\r\n\r\n                                            this.addAdditionalProperties(userTypes)\r\n\r\n                                            //todo: search will implement otherwise\r\n                                            let keyspace = this.findById(contentConnection, 'name', currentKeyspace);\r\n\r\n                                            keyspace.userFunctions = userTypes;\r\n\r\n                                            this.setState(() => {\r\n                                                return {connections: map, loading: false}\r\n                                            })\r\n                                        }\r\n\r\n                                    } catch (e) {\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        ).catch(e => {\r\n                            this.setState(() => {\r\n                                return {loading: false}\r\n                            })\r\n                        })\r\n\r\n\r\n                }\r\n\r\n            }).catch((e) => {\r\n                    this.makeDataForToast(e.toString())\r\n                    this.setState(() => {\r\n                        return {loading: false}\r\n                    })\r\n                }\r\n            )\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n\r\n    }\r\n    dropAggregateFunction = () => {\r\n\r\n        let {rightPanelContent, currentConnection, currentKeyspace, typeFocus, loading, focusId, connections} = this.state;\r\n        let funcForDelete;\r\n        let data = connections.get(currentConnection);\r\n        let targetFunction = this.findById(data, 'id_presentation', focusId);\r\n        if (typeFocus === 'agfunction') {\r\n            funcForDelete = currentConnection + '.' + currentKeyspace + '.' + targetFunction.signature;\r\n        }\r\n\r\n\r\n        if (!loading) {\r\n            let copyRightPanel = _.cloneDeep(rightPanelContent)\r\n            let map = _.cloneDeep(connections);\r\n            let contentConnection = map.get(currentConnection);\r\n\r\n\r\n            let deletingItem = this.findById(contentConnection, 'id_presentation', focusId);\r\n\r\n\r\n            deletingItem['rotation'] = 'spinner'\r\n\r\n            this.setState(() => {\r\n                return {showcontext: false, loading: true, connections: map}\r\n            })\r\n\r\n\r\n            this.service.dropAggregateFunction(funcForDelete).then(e => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n                        if (rightPanelContent.length !== 0) {\r\n\r\n\r\n                            let number = rightPanelContent.findIndex(el => el.name === funcForDelete);\r\n                            if (number !== -1) {\r\n\r\n                                copyRightPanel.splice(number, 1);\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copyRightPanel}\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        deletingItem['rotation'] = ''\r\n                        this.setState(() => {\r\n                            return {rightPanelContent: copyRightPanel}\r\n                        })\r\n\r\n                    }\r\n\r\n                    let {host, port, user, pass, connection_alias} = this.getConnectionProperies(currentConnection);\r\n\r\n                    if (currentKeyspace)\r\n                        this.service.getAggregateFunctions(host, port, connection_alias, user, pass, currentKeyspace).then(result => {\r\n\r\n                                if (result instanceof ArrayBuffer) {\r\n\r\n                                    let uint8View = new Uint8Array(result);\r\n                                    try {\r\n\r\n                                        let decoded = KeySpace.decode(uint8View);\r\n\r\n                                        if (decoded.length === 0) {\r\n                                            this.disconnectState()\r\n                                        } else {\r\n\r\n                                            let userTypes = decoded.aggregateFunctions;\r\n\r\n                                            this.addAdditionalProperties(userTypes)\r\n\r\n                                            //todo: search will implement otherwise\r\n                                            let keyspace = this.findById(contentConnection, 'name', currentKeyspace);\r\n\r\n                                            keyspace.aggregateFunctions = userTypes;\r\n\r\n                                            this.setState(() => {\r\n                                                return {connections: map, loading: false}\r\n                                            })\r\n                                        }\r\n\r\n                                    } catch (e) {\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        ).catch(e => {\r\n                            this.setState(() => {\r\n                                return {loading: false}\r\n                            })\r\n                        })\r\n\r\n\r\n                }\r\n\r\n            }).catch((e) => {\r\n                    this.makeDataForToast(e.toString())\r\n                    this.setState(() => {\r\n                        return {loading: false}\r\n                    })\r\n                }\r\n            )\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n\r\n    }\r\n    dropMaterializedView = () => {\r\n\r\n        let {rightPanelContent, currentConnection, currentKeyspace, typeFocus, loading, focusId, connections} = this.state;\r\n        let viewForDelete;\r\n        let data = connections.get(currentConnection);\r\n        let targetView = this.findById(data, 'id_presentation', focusId);\r\n        if (typeFocus === 'view') {\r\n            viewForDelete = currentConnection + '.' + currentKeyspace + '.' + targetView.name;\r\n        }\r\n\r\n\r\n        if (!loading) {\r\n            let copyRightPanel = _.cloneDeep(rightPanelContent)\r\n            let map = _.cloneDeep(connections);\r\n            let contentConnection = map.get(currentConnection);\r\n\r\n\r\n            let deletingItem = this.findById(contentConnection, 'id_presentation', focusId);\r\n\r\n\r\n            deletingItem['rotation'] = 'spinner'\r\n\r\n            this.setState(() => {\r\n                return {showcontext: false, loading: true, connections: map}\r\n            })\r\n\r\n\r\n            this.service.dropMView(viewForDelete).then(e => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n                        if (rightPanelContent.length !== 0) {\r\n\r\n\r\n                            let number = rightPanelContent.findIndex(el => el.name === viewForDelete);\r\n                            if (number !== -1) {\r\n\r\n                                copyRightPanel.splice(number, 1);\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copyRightPanel}\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        deletingItem['rotation'] = ''\r\n                        this.setState(() => {\r\n                            return {rightPanelContent: copyRightPanel}\r\n                        })\r\n\r\n                    }\r\n\r\n                    let {host, port, user, pass, connection_alias} = this.getConnectionProperies(currentConnection);\r\n\r\n                    if (currentKeyspace)\r\n                        this.service.getMViews(host, port, connection_alias, user, pass, currentKeyspace).then(result => {\r\n\r\n                                if (result instanceof ArrayBuffer) {\r\n\r\n                                    let uint8View = new Uint8Array(result);\r\n                                    try {\r\n\r\n                                        let decoded = KeySpace.decode(uint8View);\r\n\r\n                                        if (decoded.length === 0) {\r\n                                            this.disconnectState()\r\n                                        } else {\r\n\r\n                                            let views = decoded.views;\r\n\r\n                                            this.addAdditionalProperties(views)\r\n\r\n                                            //todo: search will implement otherwise\r\n                                            let keyspace = this.findById(contentConnection, 'name', currentKeyspace);\r\n\r\n                                            keyspace.views = views;\r\n\r\n                                            this.setState(() => {\r\n                                                return {connections: map, loading: false}\r\n                                            })\r\n                                        }\r\n\r\n                                    } catch (e) {\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        ).catch(e => {\r\n                            this.setState(() => {\r\n                                return {loading: false}\r\n                            })\r\n                        })\r\n\r\n\r\n                }\r\n\r\n            }).catch((e) => {\r\n                    this.makeDataForToast(e.toString())\r\n                    this.setState(() => {\r\n                        return {loading: false}\r\n                    })\r\n                }\r\n            )\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n\r\n    }\r\n\r\n    dropTable = () => {\r\n\r\n        let {rightPanelContent, currentConnection, currentKeyspace, typeFocus, loading, focusId, connections} = this.state;\r\n        let viewForDelete;\r\n        let data = connections.get(currentConnection);\r\n        let targetView = this.findById(data, 'id_presentation', focusId);\r\n        if (typeFocus === 'table') {\r\n            viewForDelete = currentConnection + '.' + currentKeyspace + '.' + targetView.name;\r\n        }\r\n\r\n\r\n        if (!loading) {\r\n            let copyRightPanel = _.cloneDeep(rightPanelContent)\r\n            let map = _.cloneDeep(connections);\r\n            let contentConnection = map.get(currentConnection);\r\n\r\n\r\n            let deletingItem = this.findById(contentConnection, 'id_presentation', focusId);\r\n\r\n\r\n            deletingItem['rotation'] = 'spinner'\r\n\r\n            this.setState(() => {\r\n                return {showcontext: false, loading: true, connections: map}\r\n            })\r\n\r\n\r\n            this.service.dropTable(viewForDelete).then(e => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n                        if (rightPanelContent.length !== 0) {\r\n\r\n\r\n                            let number = rightPanelContent.findIndex(el => el.name === viewForDelete);\r\n                            if (number !== -1) {\r\n\r\n                                copyRightPanel.splice(number, 1);\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copyRightPanel}\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        deletingItem['rotation'] = ''\r\n                        this.setState(() => {\r\n                            return {rightPanelContent: copyRightPanel}\r\n                        })\r\n\r\n                    }\r\n\r\n                    let {host, port, user, pass, connection_alias} = this.getConnectionProperies(currentConnection);\r\n\r\n                    if (currentKeyspace)\r\n                        this.service.getTables(host, port, connection_alias, user, pass, currentKeyspace).then(result => {\r\n\r\n                                if (result instanceof ArrayBuffer) {\r\n\r\n                                    let uint8View = new Uint8Array(result);\r\n                                    try {\r\n\r\n                                        let decoded = KeySpace.decode(uint8View);\r\n\r\n                                        if (decoded.length === 0) {\r\n                                            this.disconnectState()\r\n                                        } else {\r\n\r\n                                            let tables = decoded.tables;\r\n\r\n                                            this.addAdditionalProperties(tables)\r\n\r\n                                            //todo: search will implement otherwise\r\n                                            let keyspace = this.findById(contentConnection, 'name', currentKeyspace);\r\n\r\n                                            keyspace.tables = tables;\r\n\r\n                                            this.setState(() => {\r\n                                                return {connections: map, loading: false}\r\n                                            })\r\n                                        }\r\n\r\n                                    } catch (e) {\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        ).catch(e => {\r\n                            this.setState(() => {\r\n                                return {loading: false}\r\n                            })\r\n                        })\r\n\r\n\r\n                }\r\n\r\n            }).catch((e) => {\r\n                    this.makeDataForToast(e.toString())\r\n                    this.setState(() => {\r\n                        return {loading: false}\r\n                    })\r\n                }\r\n            )\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n\r\n    }\r\n\r\n    currentFocus = (e) => {\r\n        try {\r\n            let {connected, connections, currentConnection, loading} = this.state;\r\n            if (e.target.closest('.context-menu__item')) {\r\n                let text = e.target.closest('.context-menu__item').innerText;\r\n                this.executeContextMenuAction(text)\r\n            } else if (e.target.closest('.headerbuttons')) {\r\n            } else {\r\n                // hover handler\r\n                if (e.type === 'mouseover' || e.type === 'mouseout') {\r\n\r\n                    let closestItem = e.target.closest('[role=tree-item]');\r\n\r\n                    if (closestItem) {\r\n                        closestItem.classList.toggle('hover')\r\n                    }\r\n\r\n                }\r\n\r\n                // click handler\r\n                if (e.type === 'click') {\r\n                    console.log('click ')\r\n                    let {target, typeFocus} = this.setFocus(e);\r\n\r\n                    if (e.target.classList.contains('tree-push')) {\r\n\r\n\r\n                        if (!connected.includes(currentConnection)) {\r\n\r\n                            if (typeFocus === 'connection') {\r\n                                this.tryConnect();\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            let id = target.id;\r\n\r\n                            let map = new Map(connections);\r\n                            let newVar = map.get(currentConnection);\r\n\r\n\r\n                            this.setDown(newVar, id)\r\n\r\n                            this.setState(() => {\r\n                                return {connections: map}\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                // context menu\r\n                if (e.type === 'contextmenu') {\r\n                    if (!e.target.closest('[role=presentation]')) {\r\n                        this.setState(() => {\r\n                            return {showcontext: false}\r\n                        })\r\n                    } else {\r\n                        e.preventDefault();\r\n                        let {typeFocus} = this.setFocus(e);\r\n\r\n                        //prepare data\r\n                        let data = this.makeContextData(typeFocus);\r\n\r\n\r\n                        this.setState(() => {\r\n                            return {\r\n                                showcontext: true,\r\n                                stylecontext: {'left': e.x, 'top': e.y},\r\n                                dataContext: data\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n\r\n                // dblclick handler\r\n                if (e.type === 'dblclick') {\r\n                    let {target} = this.setFocus(e);\r\n\r\n\r\n                    if (target) {\r\n\r\n                        if (!connected.includes(currentConnection)) {\r\n                            if (!loading)\r\n                                this.tryConnect();\r\n                        } else {\r\n                            let id = target.id;\r\n\r\n\r\n                            let map = new Map(connections);\r\n\r\n                            let newVar = map.get(currentConnection);\r\n\r\n\r\n                            this.setDown(newVar, id)\r\n\r\n                            this.setState(() => {\r\n                                return {connections: map}\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //nop\r\n            //todo: think about it\r\n            if (this.state.showcontext) {\r\n                this.setState(() => {\r\n                    return {showcontext: false}\r\n                })\r\n                console.log(e)\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // guidGenerator() {\r\n    //     let S4 = function () {\r\n    //         return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    //     };\r\n    //     return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\r\n    // }\r\n\r\n\r\n    setFocus(e) {\r\n        try {\r\n            let target = e.target.closest('[role=presentation]');\r\n            let closestConnection = e.target.closest('li.connection');\r\n            let closestKeyspace = e.target.closest('li.keyspace');\r\n\r\n            let nameConnection = closestConnection.querySelector('.tree-text').innerHTML;\r\n\r\n            let typeFocus = target.className;\r\n\r\n            let id = target.id;\r\n\r\n            let newmap = new Map(this.state.connections)\r\n            let valueMap = newmap.get(nameConnection);\r\n\r\n\r\n            newmap.forEach((value, name) => {\r\n                this.resetFocus(value);\r\n            })\r\n\r\n\r\n            this.focusSet(valueMap, id)\r\n\r\n            let map = newmap.set(nameConnection, valueMap);\r\n\r\n\r\n            this.setState(() => {\r\n                return {\r\n                    focusId: id,\r\n                    focus: target.querySelector('.tree-text').innerHTML,\r\n                    typeFocus: typeFocus,\r\n                    currentConnection: closestConnection.querySelector('.tree-text').innerHTML,\r\n                    currentKeyspace: closestKeyspace ? closestKeyspace.querySelector('.tree-text').innerHTML : '',\r\n                    connections: map,\r\n                    showcontext: false\r\n                }\r\n            });\r\n\r\n            return {target, typeFocus};\r\n        } catch (e) {\r\n            //nop\r\n        }\r\n    }\r\n\r\n    setDown = (object, id) => {\r\n        if (object.id_presentation === id) {\r\n            if (object.rotation) {\r\n                object.rotation = '';\r\n            } else {\r\n                object.rotation = 'down';\r\n            }\r\n            return true;\r\n        }\r\n        Object.values(object).forEach((k) => {\r\n            if (k instanceof Object) {\r\n                let result = this.setDown(k, id)\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    resetFocus = (object) => {\r\n        if (object.id_tree_item) {\r\n            if (object.id_tree_item !== '') {\r\n                object.id_tree_item = ''\r\n            }\r\n        }\r\n        Object.values(object).forEach((k) => {\r\n            if (k instanceof Object) {\r\n                this.resetFocus(k)\r\n            }\r\n        })\r\n    }\r\n    focusSet = (object, id) => {\r\n        if (object.id_presentation === id) {\r\n            if (object.id_tree_item === '') {\r\n                object.id_tree_item = {id: 'focus'}\r\n            } else {\r\n                if (object.id_tree_item) {\r\n                } else {\r\n                    object.id_tree_item = ''\r\n                }\r\n\r\n            }\r\n            return;\r\n        }\r\n        Object.values(object).forEach((k) => {\r\n            if (k instanceof Object) {\r\n                this.focusSet(k, id)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    addConnection = (cs) => {\r\n        if (cs) {\r\n            let elements = this.makeConnectionWithChangedProps();\r\n            this.setState(() => {\r\n                return ({connections: elements, focus: '', action: ''})\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    deleteConnection = () => {\r\n\r\n        let {focus, typeFocus} = this.state;\r\n\r\n        if (typeFocus === 'connection' && focus !== '') {\r\n\r\n            let newConnections = [];\r\n\r\n            let stringConnections = this.storage.get();\r\n\r\n\r\n            if (!!stringConnections) {\r\n\r\n                let map = new Map(this.state.connections);\r\n\r\n                for (let i = 0; i < stringConnections.length; i++) {\r\n\r\n                    if (focus === JSON.parse(stringConnections[i]).connection_alias) {\r\n                        this.setState(() => {\r\n                            return ({focus: '', currentClassName: '', currentConnection: '', typeFocus: ''})\r\n                        })\r\n                        map.delete(focus)\r\n                    } else {\r\n                        newConnections.push(stringConnections[i])\r\n                    }\r\n\r\n                }\r\n\r\n                if (map.size === 0) {\r\n                    this.storage.clear();\r\n                    this.setState(({connections}) => {\r\n                        return ({connections: ''})\r\n                    })\r\n                } else {\r\n\r\n                    this.storage.saveAll(newConnections);\r\n                    this.setState(() => {\r\n                        return ({connections: map})\r\n                    })\r\n                }\r\n            }\r\n\r\n        }\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n    }\r\n\r\n    disconnectState = () => {\r\n        if (this.state.currentConnection !== '' && this.state.connected.includes(this.state.currentConnection)) {\r\n            let connected = [];\r\n            if (this.state.connected.length === 0) {\r\n\r\n            } else {\r\n                connected.push(...this.state.connected);\r\n                let index = connected.findIndex(el => el === this.state.currentConnection);\r\n                connected.splice(index, 1)\r\n            }\r\n\r\n            this.setState(() => {\r\n                return {connected: connected, showcontext: false, rightPanelContent: [], dataToast: '', loading: false}\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    // todo: limit connection call\r\n    tryConnect = () => {\r\n        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(this.state.currentConnection);\r\n\r\n        let map = _.cloneDeep(this.state.connections);\r\n\r\n        let contentConnection = map.get(this.state.currentConnection);\r\n\r\n        contentConnection['rotation'] = 'spinner'\r\n\r\n\r\n        this.setState(() => {\r\n            return {connections: map, loading: true}\r\n        })\r\n\r\n        this.service.getKeySpaces(host, port, connection_alias, user, pass).then(result => {\r\n\r\n                if (result instanceof ArrayBuffer) {\r\n                    let {currentConnection, connected} = this.state;\r\n                    let uint8View = new Uint8Array(result);\r\n                    try {\r\n\r\n                        let decoded = KeySpaces.decode(uint8View);\r\n\r\n                        if (decoded.length === 0) {\r\n                            this.disconnectState()\r\n                        } else {\r\n\r\n\r\n                            for (let item of decoded.keyspaces) {\r\n                                this.addAdditionalProperties(item);\r\n                            }\r\n                            let users = _.cloneDeep(decoded.roles);\r\n\r\n                            this.addAdditionalProperties(decoded.roles);\r\n                            this.addAdditionalProperties(users);\r\n\r\n\r\n                            contentConnection['keyspaces'] = decoded.keyspaces;\r\n                            contentConnection['roles'] = decoded.roles;\r\n                            contentConnection['users'] = users.filter(item => {\r\n\r\n                                    if (item.name === undefined) return true;\r\n                                    if (item.options) {\r\n                                        return item.options.login === 'true';\r\n\r\n                                    }\r\n                                }\r\n                            )\r\n\r\n\r\n                            contentConnection['rotation'] = 'down'\r\n\r\n\r\n                            if (currentConnection !== '' && !connected.includes(currentConnection)) {\r\n                                let connect = [];\r\n                                if (connected.length === 0) {\r\n                                    connect.push(currentConnection);\r\n                                } else {\r\n                                    connect = _.cloneDeep(connected);\r\n                                    connect.push(currentConnection);\r\n                                }\r\n\r\n\r\n                                this.setState(() => {\r\n                                    return {connected: connect}\r\n                                });\r\n\r\n                                this.makeDataForToast('Connected successfully')\r\n                            }\r\n\r\n                            this.setState(() => {\r\n                                return {connections: map, loading: false}\r\n                            });\r\n\r\n\r\n                        }\r\n                    } catch (e) {\r\n                        try {\r\n                            contentConnection['rotation'] = ''\r\n                            this.setState(() => {\r\n                                return {connections: map, loading: true}\r\n                            })\r\n\r\n                            let error = Error.decode(uint8View);\r\n                            this.makeDataForToast(error.text)\r\n                        } catch (ee) {\r\n                            //nop\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        ).catch((e) => {\r\n            contentConnection['rotation'] = ''\r\n            this.setState(() => {\r\n                return {connections: map, loading: true}\r\n            })\r\n\r\n            this.makeDataForToast(e.toString());\r\n        })\r\n\r\n    }\r\n\r\n    getConnectionProperies(connection) {\r\n        let focus = this.storage.get(connection);\r\n        let host = JSON.parse(focus).host;\r\n        let port = JSON.parse(focus).port;\r\n        let user = JSON.parse(focus).authUser;\r\n        let pass = JSON.parse(focus).authPass;\r\n\r\n        let connection_alias = JSON.parse(focus).connection_alias;\r\n        return {host, port, user, pass, connection_alias};\r\n    }\r\n\r\n    getKeyspace = (keyspaceName, action) => {\r\n\r\n        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(this.state.currentConnection);\r\n\r\n        let map = _.cloneDeep(this.state.connections);\r\n\r\n        let contentConnection = map.get(this.state.currentConnection);\r\n\r\n        this.service.getKeySpace(host, port, connection_alias, user, pass, keyspaceName).then(result => {\r\n\r\n                if (result instanceof ArrayBuffer) {\r\n                    let {currentConnection, connected} = this.state;\r\n                    let uint8View = new Uint8Array(result);\r\n                    try {\r\n\r\n                        let decoded = KeySpaces.decode(uint8View);\r\n\r\n                        for (let item of decoded.keyspaces) {\r\n                            this.addAdditionalProperties(item);\r\n                        }\r\n\r\n                        if (action === 'edit') {\r\n                            if (decoded.keyspaces[0] instanceof Object) {\r\n                                let editedObject = decoded.keyspaces[0];\r\n                                let findIndex = contentConnection['keyspaces'].findIndex(el => el.name === editedObject.name);\r\n                                contentConnection['keyspaces'][findIndex] = editedObject;\r\n                            }\r\n                        }\r\n                        if (action === 'create') {\r\n                            if (decoded.keyspaces[0] instanceof Object) {\r\n                                contentConnection['keyspaces'].push(decoded.keyspaces[0])\r\n                                contentConnection['rotation'] = 'down'\r\n                            }\r\n                        }\r\n\r\n                        this.setState(() => {\r\n                            return {connections: map, loading: false}\r\n                        });\r\n\r\n\r\n                    } catch (e) {\r\n                        try {\r\n                            if (action === 'create') {\r\n                                contentConnection['rotation'] = ''\r\n                            }\r\n                            this.setState(() => {\r\n                                return {connections: map}\r\n                            })\r\n\r\n                            let error = Error.decode(uint8View);\r\n                            this.makeDataForToast(error.text)\r\n                        } catch (ee) {\r\n                            //nop\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ).catch((e) => {\r\n            if (action === 'create') {\r\n                contentConnection['rotation'] = ''\r\n            }\r\n            this.setState(() => {\r\n                return {connections: map}\r\n            })\r\n            this.makeDataForToast(e.toString());\r\n        })\r\n\r\n    }\r\n\r\n    connect = () => {\r\n        let {currentConnection, loading} = this.state;\r\n        if (currentConnection !== '') {\r\n            if (!loading)\r\n                this.tryConnect()\r\n        }\r\n    }\r\n\r\n    disconnect = () => {\r\n        if (this.state.currentConnection !== '') {\r\n            this.service.disConnect(this.state.currentConnection).then((e) => {\r\n\r\n                    if (e) {\r\n                        let map = new Map(this.state.connections);\r\n                        delete map.get(this.state.currentConnection).keyspaces;\r\n\r\n                        map.get(this.state.currentConnection).rotation = ''\r\n\r\n\r\n                        this.findById(map.get(this.state.currentConnection),\r\n                            'id_presentation', this.state.focusId)\r\n\r\n\r\n                        this.disconnectState();\r\n                        this.setState(() => {\r\n                            return {\r\n                                connections: map\r\n                            }\r\n                        })\r\n                    } else {\r\n                        // modal exeption\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    setAction = (action) => {\r\n        this.setState(() => {\r\n            return {action: action}\r\n        })\r\n    }\r\n    closeElement = () => {\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        })\r\n    }\r\n\r\n    showCurrentModalWindow = (action) => {\r\n\r\n\r\n        if (action === 'createconnection') {\r\n            return (<CreateConnection save={this.addConnection}\r\n                                      id={'createconnection'}\r\n                                      close={this.closeElement}/>)\r\n        }\r\n        if (action === 'editconnection') {\r\n            return (<CreateConnection save={this.addConnection}\r\n                                      focus={this.state.focus}\r\n                                      close={this.closeElement}\r\n                                      id={'editconnection'}/>)\r\n        }\r\n        if (action === 'deleteconnection') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' connection ?`}\r\n                                       killerFunction={this.deleteConnection}/>)\r\n        }\r\n        if (action === 'createrole') {\r\n            let rolesExclude = [];\r\n            let connection = this.state.connections.get(this.state.currentConnection);\r\n            if (connection.roles) {\r\n                connection.roles.forEach(item => {\r\n                    if (item.name !== undefined) {\r\n                        rolesExclude.push(item.name)\r\n                    }\r\n                })\r\n            }\r\n\r\n            return (<Role save={this.createRole}\r\n                          connect={this.state.currentConnection}\r\n                          exclud={rolesExclude}\r\n                          id={'createrole'}\r\n                          close={this.closeElement}/>)\r\n        }\r\n\r\n        if (action === 'signout') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to exit ?`}\r\n                                       killerFunction={this.service.exit}/>)\r\n        }\r\n        if (action === 'editrole') {\r\n\r\n            let {focusId, connections, currentConnection} = this.state;\r\n\r\n            let objectForSeek = connections.get(currentConnection);\r\n\r\n\r\n            let roleForEdit = this.findById(objectForSeek, 'id_presentation', focusId);\r\n\r\n            return (<Role save={this.createRole}\r\n                          roleForEdit={roleForEdit}\r\n                          connect={this.state.currentConnection}\r\n                          focus={this.state.focus}\r\n                          close={this.closeElement}\r\n                          id={'editrole'}/>)\r\n        }\r\n        if (action === 'createuser') {\r\n            let rolesExclude = [];\r\n            let connection = this.state.connections.get(this.state.currentConnection);\r\n            if (connection.roles) {\r\n                connection.roles.forEach(item => {\r\n                    if (item.name !== undefined) {\r\n                        rolesExclude.push(item.name)\r\n                    }\r\n                })\r\n            }\r\n\r\n            return (<Role save={this.createRole}\r\n                          connect={this.state.currentConnection}\r\n                          exclud={rolesExclude}\r\n                          id={'createuser'}\r\n                          close={this.closeElement}/>)\r\n        }\r\n        if (action === 'edituser') {\r\n            let {focusId, connections, currentConnection} = this.state;\r\n\r\n            let objectForSeek = connections.get(currentConnection);\r\n\r\n\r\n            let roleForEdit = this.findById(objectForSeek, 'id_presentation', focusId);\r\n\r\n            return (<Role save={this.createRole}\r\n                          roleForEdit={roleForEdit}\r\n                          connect={this.state.currentConnection}\r\n                          focus={this.state.focus}\r\n                          close={this.closeElement}\r\n                          id={'edituser'}/>)\r\n        }\r\n        if (action === 'createkeyspace') {\r\n            let namesKS;\r\n            if (this.state.connections.get(this.state.currentConnection)) {\r\n                namesKS = this.state.connections.get(this.state.currentConnection).keyspaces.map(el => {\r\n                    return el.name;\r\n                })\r\n            }\r\n\r\n\r\n            return (<Keyspace id={'createkeyspace'}\r\n                              createKS={this.createKS}\r\n                              close={this.closeElement}\r\n                              excludes={namesKS}/>)\r\n\r\n\r\n        }\r\n        if (action === 'editkeyspace') {\r\n            let objectForEdit = {};\r\n            this.state.connections.get(this.state.currentConnection).keyspaces.forEach(ks => {\r\n\r\n                if (ks.id_presentation === this.state.focusId) {\r\n                    objectForEdit.durableWrites = ks.durableWrites;\r\n                    objectForEdit.name = ks.name;\r\n                    objectForEdit.replication = ks.replication;\r\n                }\r\n            })\r\n\r\n            return (<Keyspace id={'editkeyspace'}\r\n                              close={this.closeElement}\r\n                              objectForEdit={objectForEdit}\r\n                              createKS={this.createKS}/>)\r\n        }\r\n\r\n        if (action === 'dropkeyspace') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' keyspace ?`}\r\n                                       killerFunction={this.dropKeyspace}/>)\r\n        }\r\n        if (action === 'droptype') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' type ?`}\r\n                                       killerFunction={this.dropUDTType}/>)\r\n        }\r\n        if (action === 'dropfunction') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' function ?`}\r\n                                       killerFunction={this.dropUserFunction}/>)\r\n        }\r\n        if (action === 'dropagfunction') {\r\n            return (<ConfirmationModal close={this.closeElement}\r\n                                       textToConfirm={`Do you really wish to delete '${this.state.focus}' aggredate function ?`}\r\n                                       killerFunction={this.dropAggregateFunction}/>)\r\n        }\r\n        if (action === 'droptable') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' table ?`}\r\n                                       killerFunction={this.dropTable}/>)\r\n        }\r\n        if (action === 'dropview') {\r\n            return (\r\n                <ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' materialized view?`}\r\n                                   killerFunction={this.dropMaterializedView}/>)\r\n        }\r\n        if (action === 'droprole') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' role ?`}\r\n                                       killerFunction={this.dropRole}/>)\r\n        }\r\n        if (action === 'dropuser') {\r\n            return (<ConfirmationModal close={this.closeElement} textToConfirm={`Do you really wish to delete '${this.state.focus}' user ?`}\r\n                                       killerFunction={this.dropRole}/>)\r\n        }\r\n\r\n        if (action === 'connect') {\r\n\r\n            this.connect();\r\n            this.setState(() => {\r\n                return {action: '', showcontext: false}\r\n            });\r\n        }\r\n        if (action === 'disconnect') {\r\n            this.disconnect();\r\n            this.setState(() => {\r\n                return {action: '', showcontext: false}\r\n            });\r\n        }\r\n        if (action === 'createuserfunction') {\r\n\r\n            this.setState(() => {\r\n                return {action: '', showcontext: false}\r\n            });\r\n        }\r\n    }\r\n\r\n    dropKeyspace = () => {\r\n        let message = KeySpace.create({name: this.state.focus, connectionAlias: this.state.currentConnection});\r\n        let envelope = KeySpace.encode(message).finish();\r\n\r\n        let map = _.cloneDeep(this.state.connections);\r\n        let contentConnection = map.get(this.state.currentConnection);\r\n\r\n\r\n        let findIndex = contentConnection['keyspaces'].findIndex(el => el.name === this.state.focus);\r\n\r\n        contentConnection['keyspaces'][findIndex].rotation = 'spinner'\r\n\r\n        this.setState(() => {\r\n            return {connections: map}\r\n        })\r\n\r\n        this.service.dropKeySpaces(envelope).then(e => {\r\n\r\n            if (e instanceof ArrayBuffer) {\r\n                let uint8View = new Uint8Array(e);\r\n\r\n                let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                if (this.makeDataForToast(response)) {\r\n                    contentConnection['keyspaces'].splice(findIndex, 1)\r\n\r\n                } else {\r\n                    contentConnection['keyspaces'][findIndex].rotation = ''\r\n                }\r\n                this.setState(() => {\r\n                    return {\r\n                        connections: map,\r\n                        typeFocus: '',\r\n                        focus: '',\r\n                        focusId: '',\r\n                        currenKeyspace: '',\r\n                        currentConnection: ''\r\n                    }\r\n                })\r\n            }\r\n\r\n        }).catch((e) => {\r\n            contentConnection['keyspaces'][findIndex].rotation = ''\r\n            this.setState(() => {\r\n                return {\r\n                    connections: map,\r\n                    typeFocus: '',\r\n                    focus: '',\r\n                    focusId: '',\r\n                    currentKeyspace: '',\r\n                    currentConnection: ''\r\n                }\r\n            })\r\n\r\n            this.makeDataForToast(e.toString());\r\n        })\r\n\r\n        this.setState(() => {\r\n            return {\r\n                action: '',\r\n                showcontext: false,\r\n                typeFocus: '',\r\n                focus: '',\r\n                focusId: '',\r\n                currentKeyspace: '',\r\n                currentConnection: ''\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    createRole = (id) => {\r\n        $(`#${id}`).modal('hide')\r\n        this.setState(() => {\r\n            return {action: ''}\r\n        });\r\n        this.tryConnect();\r\n    }\r\n\r\n    createKS = (data) => {\r\n        data.connectionAlias = this.state.currentConnection;\r\n        let message = KeySpace.create(data);\r\n\r\n        let finish = KeySpace.encode(message).finish();\r\n\r\n        let map = _.cloneDeep(this.state.connections);\r\n        let contentConnection = map.get(this.state.currentConnection);\r\n\r\n\r\n        if (this.state.action === 'createkeyspace') {\r\n\r\n            contentConnection['rotation'] = 'spinner'\r\n\r\n            this.setState(() => {\r\n                return {connections: map}\r\n            })\r\n\r\n            this.service.createKeySpaces(finish).then((e) => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n                        this.getKeyspace(data.name, 'create')\r\n                    } else {\r\n                        contentConnection['rotation'] = ''\r\n                        this.setState(() => {\r\n                            return {connections: map}\r\n                        })\r\n                    }\r\n                }\r\n            }).catch((e) => {\r\n                contentConnection['rotation'] = ''\r\n                this.setState(() => {\r\n                    return {connections: map}\r\n                })\r\n\r\n                this.makeDataForToast(e.toString());\r\n            })\r\n            $('#createkeyspace').modal('hide');\r\n\r\n        } else if (this.state.action === 'editkeyspace') {\r\n\r\n            let focusObject = this.findById(contentConnection, 'id_presentation', this.state.focusId);\r\n\r\n            if (focusObject) {\r\n                focusObject['rotation'] = 'spinner';\r\n            }\r\n\r\n            this.setState(() => {\r\n                return {connections: map}\r\n            })\r\n\r\n            this.service.editKeySpaces(finish).then((e) => {\r\n\r\n                if (e instanceof ArrayBuffer) {\r\n\r\n                    let uint8View = new Uint8Array(e);\r\n\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                    if (this.makeDataForToast(response)) {\r\n                        this.getKeyspace(data.name, 'edit')\r\n                    } else {\r\n                        focusObject['rotation'] = ''\r\n                        this.setState(() => {\r\n                            return {connections: map}\r\n                        })\r\n                    }\r\n                }\r\n            }).catch((e) => {\r\n                focusObject['rotation'] = ''\r\n                this.setState(() => {\r\n                    return {connections: map}\r\n                })\r\n\r\n                this.makeDataForToast(e.toString());\r\n            })\r\n            $('#editkeyspace').modal('hide');\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {action: '', showcontext: false}\r\n        });\r\n\r\n    }\r\n\r\n    makeDataForToast(response) {\r\n        if (response.toLowerCase().includes('successfully')) {\r\n            this.setState(() => {\r\n                return {\r\n                    dataToast: {result: response, style: {color: 'green'}}\r\n                }\r\n            })\r\n            return true;\r\n        } else {\r\n            this.setState(() => {\r\n                return {\r\n                    dataToast: {result: response, style: {color: 'red'}}\r\n                }\r\n            })\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let {\r\n            showcontext, stylecontext, dataContext, typeFocus,\r\n            connected, currentConnection, dataToast, action\r\n        } = this.state;\r\n        let context;\r\n\r\n        if (showcontext) {\r\n            context = <ContextMenu style={stylecontext} data={dataContext}/>\r\n        }\r\n\r\n        let listConnections = this.getListConnections();\r\n        return (<div className={\"container1\"}>\r\n            {context}\r\n            <div className={\"header-buttons\"}>\r\n                <HeaderButtons\r\n                    // todo: changed to one handler setAction\r\n                    setAction={this.setAction}\r\n                    typeFocus={typeFocus}\r\n                    connected={connected}\r\n                    currentConnection={currentConnection}\r\n                    connect={this.connect}\r\n                    disconnect={this.disconnect}\r\n                    createUserType={this.createUserType}\r\n                    createUserFunction={this.createUserFunction}\r\n                    createAggregateFunction={this.createAggregateFunction}\r\n                    createCqlEditor={this.createCqlEditor}\r\n                    createTableHandler={this.createTableHandler}\r\n                    createMaterializedView={this.createMateralizedView}\r\n                />\r\n            </div>\r\n\r\n\r\n            <SplitPane split=\"vertical\" minSize={250}>\r\n                <LeftPanel connections={listConnections}/>\r\n                <RightPanel removeToast={this.removeToast} dataToast={dataToast}\r\n                            content={this.state.rightPanelContent} saveContent={this.saveContent}\r\n                            closeTabPanel={this.closeTabPanel}/>\r\n            </SplitPane>\r\n\r\n            {/*<SplitWrapper sizes={[25, 75]}*/}\r\n            {/*       minSize={250}*/}\r\n            {/*       expandToMin={false}*/}\r\n            {/*       gutterSize={8}*/}\r\n            {/*       gutterAlign=\"right\"*/}\r\n            {/*       snapOffset={30}*/}\r\n            {/*       dragInterval={1}*/}\r\n            {/*       direction=\"horizontal\"*/}\r\n            {/*       cursor=\"col-resize\"*/}\r\n            {/*>*/}\r\n            {/*    <LeftPanel connections={listConnections}/>*/}\r\n            {/*    <RightPanel removeToast={this.removeToast} dataToast={dataToast}*/}\r\n            {/*                content={this.state.rightPanelContent} saveContent={this.saveContent}*/}\r\n            {/*                closeTabPanel={this.closeTabPanel}/>*/}\r\n            {/*</SplitWrapper>*/}\r\n            {action ? this.showCurrentModalWindow(action) : null}\r\n        </div>)\r\n    }\r\n\r\n\r\n    makeContent = () => {\r\n\r\n        if (Array.isArray(this.props.content)) {\r\n            let tabs = [];\r\n            let tabsContent = [];\r\n\r\n            this.props.content.forEach((element, i) => {\r\n\r\n                if (element.type === 'userType') {\r\n\r\n                    tabs.push((<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`type-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#type${i}`} role=\"tab\"\r\n                           aria-controls={`type${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => this.props.closeTabPanel(`${i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>));\r\n\r\n                    tabsContent.push(\r\n                        <div className={`tab-pane fade `} id={`type${i}`} role=\"tabpanel\"\r\n                             aria-labelledby=\"types-tab\">\r\n                            <UserType element={element} saveContent={(content) => this.supportFunc(content, `${+i}`)}/>\r\n                        </div>\r\n                    )\r\n                }\r\n                if (element.type === 'userFunction') {\r\n\r\n                    tabs.push((<li className=\"nav-item\" role=\"presentation\" key={i}>\r\n                        <a style={{padding: 3, fontSize: 15, fontFamily: 'Apple Chancery, cursive'}}\r\n                           className={`nav-link`} id={`udf-tab${i}`}\r\n                           data-toggle=\"tab\" href={`#udf${i}`} role=\"tab\"\r\n                           aria-controls={`udf${i}`} aria-selected='false'>\r\n                            {element.name}\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={() => this.props.closeTabPanel(`${i}`)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </a>\r\n                    </li>));\r\n\r\n                    tabsContent.push(\r\n                        <div className={`tab-pane fade `} id={`udf${i}`} role=\"tabpanel\"\r\n                             aria-labelledby=\"udfs-tab\">\r\n                            <UserFunction element={element}\r\n                                          saveContent={(content) => this.supportFunc(content, `${+i}`)}/>\r\n                        </div>\r\n                    )\r\n                }\r\n            })\r\n\r\n            this.setState(() => {\r\n                return {\r\n                    tabs, tabsContent\r\n                }\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n//todo: rename\r\n    saveContent = (content, i) => {\r\n\r\n        let map = _.cloneDeep(this.state.connections);\r\n\r\n        let copy = _.cloneDeep(this.state.rightPanelContent);\r\n        if (copy[i].type === 'userType') {\r\n\r\n            let connectionName = content.path.split('.')[0];\r\n            let nameKs = content.path.split('.')[1];\r\n            let fieldName = content.path.split('.')[2];\r\n            let contentConnection = map.get(connectionName);\r\n\r\n\r\n            if (content.action === 'create') {\r\n\r\n                let find = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                let wrap;\r\n                if (find) {\r\n                    wrap = find.userTypes.find(el => el.name === undefined);\r\n                    wrap['rotation'] = 'spinner'\r\n                }\r\n\r\n\r\n                this.setState(() => {\r\n                    return {connections: map, loading: true}\r\n                })\r\n\r\n                // show structure in applyType method user-type.js\r\n                this.service.createUserType(content).then((e) => {\r\n\r\n                    if (e instanceof ArrayBuffer) {\r\n\r\n                        let uint8View = new Uint8Array(e);\r\n\r\n                        let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n\r\n                        if (this.makeDataForToast(response)) {\r\n                            if (this.state.rightPanelContent.length !== 0) {\r\n                                // todo: copy maked another\r\n\r\n                                copy[i].action = 'edit'\r\n                                let nameType = content.nameType;\r\n                                let path = content.path.split('.');\r\n                                copy[i].name = path[0] + '.' + path[1] + '.' + nameType;\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: true}\r\n                                })\r\n                            }\r\n                        } else {\r\n                            this.setState(() => {\r\n                                return {rightPanelContent: copy, loading: true}\r\n                            })\r\n                        }\r\n\r\n\r\n                        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(connectionName);\r\n\r\n                        if (nameKs)\r\n                            this.service.getTypes(host, port, connection_alias, user, pass, nameKs).then(result => {\r\n\r\n                                    if (result instanceof ArrayBuffer) {\r\n\r\n                                        let uint8View = new Uint8Array(result);\r\n                                        try {\r\n\r\n                                            let decoded = KeySpace.decode(uint8View);\r\n\r\n                                            if (decoded.length === 0) {\r\n                                                this.disconnectState()\r\n                                            } else {\r\n\r\n                                                let userTypes = decoded.userTypes;\r\n\r\n                                                this.addAdditionalProperties(userTypes)\r\n\r\n\r\n                                                let keyspace = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                                                keyspace.userTypes = userTypes;\r\n\r\n                                                this.setState(() => {\r\n                                                    return {connections: map, loading: false}\r\n                                                })\r\n                                            }\r\n\r\n                                        } catch (e) {\r\n                                            this.setState(() => {\r\n                                                return {rightPanelContent: copy, loading: false}\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            ).catch(e => {\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: false}\r\n                                })\r\n                            })\r\n\r\n                    }\r\n\r\n                }).catch((e) => {\r\n                        this.setState(() => {\r\n                            return {rightPanelContent: copy, loading: false}\r\n                        });\r\n                        this.makeDataForToast(e.toString());\r\n                    }\r\n                )\r\n            }\r\n            if (content.action === 'edit') {\r\n\r\n                let find = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                let wrap;\r\n                if (find) {\r\n                    wrap = find.userTypes.find(el => el.name === fieldName);\r\n                    wrap['rotation'] = 'spinner'\r\n                }\r\n\r\n\r\n                this.setState(() => {\r\n                    return {connections: map, loading: true}\r\n                })\r\n\r\n                this.service.editUserType(content).then((e) => {\r\n\r\n                    if (e instanceof ArrayBuffer) {\r\n\r\n                        let uint8View = new Uint8Array(e);\r\n\r\n                        let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n\r\n                        let copy = _.cloneDeep(this.state.rightPanelContent);\r\n                        if (this.makeDataForToast(response)) {\r\n                            if (this.state.rightPanelContent.length !== 0) {\r\n                                if (copy[i].action !== 'edit') {\r\n                                    copy[i].action = 'edit'\r\n                                    let nameType = content.nameType;\r\n                                    let path = content.path.split('.');\r\n                                    copy[i].name = path[0] + '.' + path[1] + '.' + nameType;\r\n                                    this.setState(() => {\r\n                                        return {rightPanelContent: copy, loading: false}\r\n                                    })\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            this.setState(() => {\r\n                                return {rightPanelContent: copy, loading: false}\r\n                            })\r\n                        }\r\n\r\n\r\n                        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(connectionName);\r\n\r\n                        if (nameKs)\r\n                            this.service.getTypes(host, port, connection_alias, user, pass, nameKs).then(result => {\r\n\r\n                                    if (result instanceof ArrayBuffer) {\r\n\r\n                                        let uint8View = new Uint8Array(result);\r\n                                        try {\r\n\r\n                                            let decoded = KeySpace.decode(uint8View);\r\n\r\n                                            if (decoded.length === 0) {\r\n                                                this.disconnectState()\r\n                                            } else {\r\n\r\n                                                let fieldIndexFromServer = decoded.userTypes.findIndex(el => el.name === fieldName)\r\n\r\n                                                let editedTypeFromServer = decoded.userTypes[fieldIndexFromServer];\r\n                                                this.addAdditionalProperties(editedTypeFromServer)\r\n\r\n                                                editedTypeFromServer.rotation = 'down'\r\n\r\n                                                let keyspace = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                                                let fieldIndexFromUi = keyspace.userTypes.findIndex(el => el.name === fieldName)\r\n\r\n                                                keyspace.userTypes[fieldIndexFromUi] = editedTypeFromServer\r\n\r\n                                                copy[i].fields = editedTypeFromServer.fields;\r\n\r\n\r\n                                                this.setState(() => {\r\n                                                    return {connections: map, loading: false, rightPanelContent: copy}\r\n                                                })\r\n                                            }\r\n\r\n                                        } catch (e) {\r\n                                            this.setState(() => {\r\n                                                return {rightPanelContent: copy, loading: false}\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            ).catch(e => {\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: false}\r\n                                })\r\n                            })\r\n\r\n                    }\r\n\r\n                }).catch((e) => {\r\n                        this.makeDataForToast(e.toString());\r\n\r\n                        wrap['rotation'] = ''\r\n\r\n                        this.setState(() => {\r\n                            return {connections: map, loading: false, rightPanelContent: copy}\r\n                        })\r\n\r\n                    }\r\n                )\r\n            }\r\n        }\r\n\r\n        if (copy[i].type === 'userFunction') {\r\n\r\n            let tab = this.state.rightPanelContent[i];\r\n            let connectionName = tab.name.split('.')[0];\r\n            let nameKs = tab.name.split('.')[1];\r\n            // let fieldName = tab.name.split('.')[2];\r\n            let contentConnection = map.get(connectionName);\r\n\r\n            let find = this.findById(contentConnection, 'name', nameKs);\r\n\r\n            let wrap;\r\n            if (find) {\r\n                wrap = find.userFunctions.find(el => el.name === undefined);\r\n                wrap['rotation'] = 'spinner'\r\n            }\r\n\r\n            this.setState(() => {\r\n                return {connections: map}\r\n            })\r\n\r\n            this.service.createUserFunction(content).then(result => {\r\n                    if (result instanceof ArrayBuffer) {\r\n                        let uint8View = new Uint8Array(result);\r\n                        let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n                        if (this.makeDataForToast(response)) {\r\n                            if (this.state.rightPanelContent.length !== 0) {\r\n\r\n                                try {\r\n                                    let match = response.matchAll(/'.*'/g);\r\n                                    let regExpMatchArrays = Array.from(match);\r\n                                    let nameFunc = regExpMatchArrays[0][0]\r\n                                    nameFunc = nameFunc.replace(/'/g, '');\r\n\r\n                                    copy[i].name = connectionName + '.' + nameKs + '.' + nameFunc;\r\n                                    this.setState(() => {\r\n                                        return {rightPanelContent: copy, loading: false}\r\n                                    })\r\n                                } catch (e) {\r\n                                    console.log(e)\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            this.setState(() => {\r\n                                return {rightPanelContent: copy, loading: false}\r\n                            })\r\n                        }\r\n\r\n                        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(connectionName);\r\n\r\n                        if (nameKs)\r\n                            this.service.getUserFunctions(host, port, connection_alias, user, pass, nameKs).then(result => {\r\n\r\n                                    if (result instanceof ArrayBuffer) {\r\n\r\n                                        let uint8View = new Uint8Array(result);\r\n                                        try {\r\n\r\n                                            let decoded = KeySpace.decode(uint8View);\r\n\r\n                                            if (decoded.length === 0) {\r\n                                                this.disconnectState()\r\n                                            } else {\r\n\r\n                                                let userFunctions = decoded.userFunctions;\r\n\r\n                                                this.addAdditionalProperties(userFunctions)\r\n\r\n\r\n                                                let keyspace = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                                                keyspace.userFunctions = userFunctions;\r\n\r\n                                                this.setState(() => {\r\n                                                    return {connections: map, loading: false}\r\n                                                })\r\n                                            }\r\n\r\n                                        } catch (e) {\r\n                                            this.setState(() => {\r\n                                                return {rightPanelContent: copy, loading: false}\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            ).catch(e => {\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: false}\r\n                                })\r\n                            })\r\n\r\n\r\n                    }\r\n                }\r\n            ).catch(e => console.log(e))\r\n\r\n        }\r\n        if (copy[i].type === 'aggregateFunction') {\r\n\r\n            let tab = copy[i];\r\n            let connectionName = tab.name.split('.')[0];\r\n            let nameKs = tab.name.split('.')[1];\r\n            let contentConnection = map.get(connectionName);\r\n\r\n            let find = this.findById(contentConnection, 'name', nameKs);\r\n\r\n            let wrap;\r\n            if (find) {\r\n                wrap = find.aggregateFunctions.find(el => el.name === undefined);\r\n                wrap['rotation'] = 'spinner'\r\n            }\r\n\r\n            this.setState(() => {\r\n                return {connections: map}\r\n            })\r\n\r\n            this.service.createAggregateFunction(content).then(result => {\r\n                    if (result instanceof ArrayBuffer) {\r\n                        let uint8View = new Uint8Array(result);\r\n                        let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n                        if (this.makeDataForToast(response)) {\r\n                            if (copy.length !== 0) {\r\n\r\n                                try {\r\n                                    let match = response.matchAll(/'.*'/g);\r\n                                    let regExpMatchArrays = Array.from(match);\r\n                                    let nameFunc = regExpMatchArrays[0][0]\r\n                                    nameFunc = nameFunc.replace(/'/g, '');\r\n\r\n                                    copy[i].name = connectionName + '.' + nameKs + '.' + nameFunc;\r\n                                    this.setState(() => {\r\n                                        return {rightPanelContent: copy, loading: false}\r\n                                    })\r\n                                } catch (e) {\r\n                                    console.log(e)\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            this.setState(() => {\r\n                                return {rightPanelContent: copy, loading: false}\r\n                            })\r\n                        }\r\n\r\n                        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(connectionName);\r\n\r\n                        if (nameKs)\r\n                            this.service.getAggregateFunctions(host, port, connection_alias, user, pass, nameKs).then(result => {\r\n\r\n                                    if (result instanceof ArrayBuffer) {\r\n\r\n                                        let uint8View = new Uint8Array(result);\r\n                                        try {\r\n\r\n                                            let decoded = KeySpace.decode(uint8View);\r\n\r\n                                            if (decoded.length === 0) {\r\n                                                this.disconnectState()\r\n                                            } else {\r\n\r\n                                                let userFunctions = decoded.aggregateFunctions;\r\n\r\n                                                this.addAdditionalProperties(userFunctions)\r\n\r\n\r\n                                                let keyspace = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                                                keyspace.aggregateFunctions = userFunctions;\r\n\r\n                                                this.setState(() => {\r\n                                                    return {connections: map, loading: false}\r\n                                                })\r\n                                            }\r\n\r\n                                        } catch (e) {\r\n                                            this.setState(() => {\r\n                                                return {rightPanelContent: copy, loading: false}\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            ).catch(e => {\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: false}\r\n                                })\r\n                            })\r\n\r\n\r\n                    }\r\n                }\r\n            ).catch(e => console.log(e))\r\n        }\r\n        if (copy[i].type === 'view') {\r\n\r\n            let tab = copy[i];\r\n            let connectionName = tab.name.split('.')[0];\r\n            let nameKs = tab.name.split('.')[1];\r\n            let contentConnection = map.get(connectionName);\r\n\r\n            let find = this.findById(contentConnection, 'name', nameKs);\r\n\r\n            let wrap;\r\n            if (find) {\r\n                wrap = find.views.find(el => el.name === undefined);\r\n                wrap['rotation'] = 'spinner'\r\n            }\r\n\r\n            this.setState(() => {\r\n                return {connections: map}\r\n            })\r\n\r\n\r\n            this.service.createMV(content).then(result => {\r\n                if (result instanceof ArrayBuffer) {\r\n                    let uint8View = new Uint8Array(result);\r\n                    let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n                    if (this.makeDataForToast(response)) {\r\n                        if (this.state.rightPanelContent.length !== 0) {\r\n\r\n                            try {\r\n                                let match = response.matchAll(/'.*'/g);\r\n                                let regExpMatchArrays = Array.from(match);\r\n                                let nameFunc = regExpMatchArrays[0][0]\r\n                                nameFunc = nameFunc.replace(/'/g, '');\r\n\r\n                                copy[i].name = copy[i].name.split(\".\")[0] + '.' + copy[i].name.split(\".\")[1] + '.' + nameFunc;\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: false}\r\n                                })\r\n                            } catch (e) {\r\n                                console.log(e)\r\n                            }\r\n\r\n                            let {host, port, user, pass, connection_alias} = this.getConnectionProperies(connectionName);\r\n\r\n                            if (nameKs)\r\n                                this.service.getMViews(host, port, connection_alias, user, pass, nameKs).then(result => {\r\n\r\n                                        if (result instanceof ArrayBuffer) {\r\n\r\n                                            let uint8View = new Uint8Array(result);\r\n                                            try {\r\n\r\n                                                let decoded = KeySpace.decode(uint8View);\r\n\r\n                                                if (decoded.length === 0) {\r\n                                                    this.disconnectState()\r\n                                                } else {\r\n\r\n                                                    let views = decoded.views;\r\n\r\n                                                    this.addAdditionalProperties(views)\r\n\r\n\r\n                                                    let keyspace = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                                                    keyspace.views = views;\r\n\r\n                                                    this.setState(() => {\r\n                                                        return {connections: map, loading: false}\r\n                                                    })\r\n                                                }\r\n\r\n                                            } catch (e) {\r\n                                                this.setState(() => {\r\n                                                    return {rightPanelContent: copy, loading: false}\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ).catch(e => {\r\n                                    this.setState(() => {\r\n                                        return {rightPanelContent: copy, loading: false}\r\n                                    })\r\n                                })\r\n\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        wrap['rotation'] = ''\r\n\r\n                        this.setState(() => {\r\n                            return {rightPanelContent: copy, loading: false, connections: map}\r\n                        })\r\n                    }\r\n\r\n                }\r\n            }).catch(e => console.log(e))\r\n\r\n        }\r\n\r\n        if (copy[i].type === 'table') {\r\n\r\n            let tab = copy[i];\r\n            let connectionName = tab.name.split('.')[0];\r\n            let nameKs = tab.name.split('.')[1];\r\n            let contentConnection = map.get(connectionName);\r\n\r\n            let find = this.findById(contentConnection, 'name', nameKs);\r\n\r\n            let wrap;\r\n            if (find) {\r\n                wrap = find.tables.find(el => el.name === undefined);\r\n                wrap['rotation'] = 'spinner'\r\n            }\r\n\r\n            this.setState(() => {\r\n                return {connections: map}\r\n            })\r\n\r\n            if (content.action === 'create') {\r\n                this.service.createTable(content.finish).then(result => {\r\n                    if (result instanceof ArrayBuffer) {\r\n                        let uint8View = new Uint8Array(result);\r\n                        let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n                        if (this.makeDataForToast(response)) {\r\n                            if (this.state.rightPanelContent.length !== 0) {\r\n\r\n                                try {\r\n                                    // let match = response.matchAll(/'.*'/g);\r\n                                    // let regExpMatchArrays = Array.from(match);\r\n                                    // let nameFunc = regExpMatchArrays[0][0]\r\n                                    // nameFunc = nameFunc.replace(/'/g, '');\r\n                                    //\r\n                                    // copy[i].name = copy[i].name.split(\".\")[0] + '.' + copy[i].name.split(\".\")[1] + '.' + nameFunc;\r\n                                    // this.setState(() => {\r\n                                    //     return {rightPanelContent: copy, loading: false}\r\n                                    // })\r\n                                    // todo: just will close tab or ?\r\n                                    this.closeTabPanel(i)\r\n                                } catch (e) {\r\n                                    console.log(e)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            wrap['rotation'] = ''\r\n                            this.setState(() => {\r\n                                return {rightPanelContent: copy, loading: false, connections: map}\r\n                            })\r\n                        }\r\n\r\n\r\n                        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(connectionName);\r\n\r\n                        if (nameKs)\r\n                            this.service.getTables(host, port, connection_alias, user, pass, nameKs).then(result => {\r\n\r\n                                    if (result instanceof ArrayBuffer) {\r\n\r\n                                        let uint8View = new Uint8Array(result);\r\n                                        try {\r\n\r\n                                            let decoded = KeySpace.decode(uint8View);\r\n\r\n                                            if (decoded.length === 0) {\r\n                                                this.disconnectState()\r\n                                            } else {\r\n\r\n                                                let tables = decoded.tables;\r\n\r\n                                                this.addAdditionalProperties(tables)\r\n\r\n\r\n                                                let keyspace = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                                                keyspace.tables = tables;\r\n\r\n                                                this.setState(() => {\r\n                                                    return {connections: map, loading: false}\r\n                                                })\r\n                                            }\r\n\r\n                                        } catch (e) {\r\n                                            this.setState(() => {\r\n                                                return {rightPanelContent: copy, loading: false}\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            ).catch(e => {\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: false}\r\n                                })\r\n                            })\r\n\r\n\r\n                    }\r\n                }).catch(e => console.log(e))\r\n            }\r\n            if (content.action === 'edit') {\r\n\r\n\r\n                this.service.editTable(content).then(result => {\r\n\r\n                    if (result instanceof ArrayBuffer) {\r\n                        let uint8View = new Uint8Array(result);\r\n                        let response = new TextDecoder(\"utf-8\").decode(uint8View);\r\n                        if (this.makeDataForToast(response)) {\r\n                            if (this.state.rightPanelContent.length !== 0) {\r\n                                try {\r\n                                    // todo: just will close tab or ?\r\n                                    this.closeTabPanel(i)\r\n                                } catch (e) {\r\n                                }\r\n                            }\r\n                        } else {\r\n                            wrap['rotation'] = ''\r\n                            this.setState(() => {\r\n                                return {rightPanelContent: copy, loading: false, connections: map}\r\n                            })\r\n                        }\r\n\r\n                        let {host, port, user, pass, connection_alias} = this.getConnectionProperies(connectionName);\r\n\r\n                        if (nameKs)\r\n                            this.service.getTables(host, port, connection_alias, user, pass, nameKs).then(result => {\r\n\r\n                                    if (result instanceof ArrayBuffer) {\r\n\r\n                                        let uint8View = new Uint8Array(result);\r\n                                        try {\r\n\r\n                                            let decoded = KeySpace.decode(uint8View);\r\n\r\n                                            if (decoded.length === 0) {\r\n                                                this.disconnectState()\r\n                                            } else {\r\n\r\n                                                let tables = decoded.tables\r\n\r\n                                                this.addAdditionalProperties(tables)\r\n\r\n                                                try {\r\n                                                    let findIndex = tables.findIndex(item => item.name === content.nameTable);\r\n\r\n                                                    if (findIndex > -1) {\r\n                                                        this.editTableHandler(tables[findIndex]);\r\n                                                    }\r\n\r\n                                                } catch (e) {\r\n                                                }\r\n\r\n\r\n                                                let keyspace = this.findById(contentConnection, 'name', nameKs);\r\n\r\n                                                keyspace.tables = tables;\r\n\r\n                                                this.setState(() => {\r\n                                                    return {connections: map, loading: false}\r\n                                                })\r\n                                            }\r\n\r\n                                        } catch (e) {\r\n                                            this.setState(() => {\r\n                                                return {rightPanelContent: copy, loading: false}\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            ).catch(e => {\r\n                                this.setState(() => {\r\n                                    return {rightPanelContent: copy, loading: false}\r\n                                })\r\n                            })\r\n\r\n                    }\r\n\r\n\r\n                }).catch((e) => console.log(e))\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    closeTabPanel = (index) => {\r\n        if (this.state.rightPanelContent.length > 0) {\r\n            let copyContent = _.cloneDeep(this.state.rightPanelContent);\r\n\r\n            // todo: i not delete item from array, just set null, may be have something best\r\n            // copyContent.splice(index, 1);\r\n\r\n            copyContent[index] = null;\r\n\r\n            let allNull = 0;\r\n\r\n            copyContent.forEach(el => {\r\n                if (el === null) {\r\n                    allNull++\r\n                }\r\n            });\r\n\r\n\r\n            if (allNull && allNull === copyContent.length) {\r\n                copyContent = []\r\n            }\r\n\r\n            this.setState(() => {\r\n                return {\r\n                    rightPanelContent: copyContent\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n    }\r\n\r\n    removeToast = () => {\r\n        this.setState(() => {\r\n            return {dataToast: ''}\r\n        })\r\n    }\r\n\r\n    addAdditionalProperties = (object) => {\r\n        Object.values(object).forEach((val) => {\r\n            if (val instanceof Object) {\r\n                let keyByValue = this.getKeyByValue(object, val);\r\n                if (keyByValue !== 'replication') {\r\n                    this.addAdditionalProperties(val)\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n        if (object instanceof Array) {\r\n            object.push({'rotation': '', 'id_tree_item': '', 'id_presentation': guidGenerator()})\r\n        } else {\r\n            if (object['rotation'] === undefined) {\r\n                object['rotation'] = '';\r\n            }\r\n            if (object['id_tree_item'] === undefined) {\r\n                object['id_tree_item'] = '';\r\n            }\r\n            if (object['id_presentation'] === undefined) {\r\n                object['id_presentation'] = guidGenerator();\r\n            }\r\n        }\r\n\r\n\r\n        return object;\r\n    }\r\n\r\n\r\n}\r\n\r\n","import App from \"./app\";\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app\";\n\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n\n\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Error = (function() {\n\n    /**\n     * Properties of an Error.\n     * @exports IError\n     * @interface IError\n     * @property {string|null} [text] Error text\n     */\n\n    /**\n     * Constructs a new Error.\n     * @exports Error\n     * @classdesc Represents an Error.\n     * @implements IError\n     * @constructor\n     * @param {IError=} [properties] Properties to set\n     */\n    function Error(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Error text.\n     * @member {string} text\n     * @memberof Error\n     * @instance\n     */\n    Error.prototype.text = \"\";\n\n    /**\n     * Creates a new Error instance using the specified properties.\n     * @function create\n     * @memberof Error\n     * @static\n     * @param {IError=} [properties] Properties to set\n     * @returns {Error} Error instance\n     */\n    Error.create = function create(properties) {\n        return new Error(properties);\n    };\n\n    /**\n     * Encodes the specified Error message. Does not implicitly {@link Error.verify|verify} messages.\n     * @function encode\n     * @memberof Error\n     * @static\n     * @param {IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.text != null && Object.hasOwnProperty.call(message, \"text\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Error message, length delimited. Does not implicitly {@link Error.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Error\n     * @static\n     * @param {IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Error.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer.\n     * @function decode\n     * @memberof Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Error();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.text = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Error message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Error.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Error message.\n     * @function verify\n     * @memberof Error\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Error.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.text != null && message.hasOwnProperty(\"text\"))\n            if (!$util.isString(message.text))\n                return \"text: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates an Error message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Error\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Error} Error\n     */\n    Error.fromObject = function fromObject(object) {\n        if (object instanceof $root.Error)\n            return object;\n        var message = new $root.Error();\n        if (object.text != null)\n            message.text = String(object.text);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Error message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Error\n     * @static\n     * @param {Error} message Error\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Error.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.text = \"\";\n        if (message.text != null && message.hasOwnProperty(\"text\"))\n            object.text = message.text;\n        return object;\n    };\n\n    /**\n     * Converts this Error to JSON.\n     * @function toJSON\n     * @memberof Error\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Error.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Error;\n})();\n\nmodule.exports = $root;\n"],"sourceRoot":""}